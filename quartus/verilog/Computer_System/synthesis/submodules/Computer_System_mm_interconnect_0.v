// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_axi_master.awid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_awaddr,                                      //                                                                .awaddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awburst,                                     //                                                                .awburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awprot,                                      //                                                                .awprot
		input  wire         ARM_A9_HPS_h2f_axi_master_awvalid,                                     //                                                                .awvalid
		output wire         ARM_A9_HPS_h2f_axi_master_awready,                                     //                                                                .awready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_wid,                                         //                                                                .wid
		input  wire [127:0] ARM_A9_HPS_h2f_axi_master_wdata,                                       //                                                                .wdata
		input  wire [15:0]  ARM_A9_HPS_h2f_axi_master_wstrb,                                       //                                                                .wstrb
		input  wire         ARM_A9_HPS_h2f_axi_master_wlast,                                       //                                                                .wlast
		input  wire         ARM_A9_HPS_h2f_axi_master_wvalid,                                      //                                                                .wvalid
		output wire         ARM_A9_HPS_h2f_axi_master_wready,                                      //                                                                .wready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_bid,                                         //                                                                .bid
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_bresp,                                       //                                                                .bresp
		output wire         ARM_A9_HPS_h2f_axi_master_bvalid,                                      //                                                                .bvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_bready,                                      //                                                                .bready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_arid,                                        //                                                                .arid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_araddr,                                      //                                                                .araddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arburst,                                     //                                                                .arburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arprot,                                      //                                                                .arprot
		input  wire         ARM_A9_HPS_h2f_axi_master_arvalid,                                     //                                                                .arvalid
		output wire         ARM_A9_HPS_h2f_axi_master_arready,                                     //                                                                .arready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_rid,                                         //                                                                .rid
		output wire [127:0] ARM_A9_HPS_h2f_axi_master_rdata,                                       //                                                                .rdata
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_rresp,                                       //                                                                .rresp
		output wire         ARM_A9_HPS_h2f_axi_master_rlast,                                       //                                                                .rlast
		output wire         ARM_A9_HPS_h2f_axi_master_rvalid,                                      //                                                                .rvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_rready,                                      //                                                                .rready
		input  wire         System_PLL_sys_clk_clk,                                                //                                              System_PLL_sys_clk.clk
		input  wire         ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         inst_sram_reset2_reset_bridge_in_reset_reset,                          //                          inst_sram_reset2_reset_bridge_in_reset.reset
		output wire [7:0]   inst_sram_s2_address,                                                  //                                                    inst_sram_s2.address
		output wire         inst_sram_s2_write,                                                    //                                                                .write
		input  wire [127:0] inst_sram_s2_readdata,                                                 //                                                                .readdata
		output wire [127:0] inst_sram_s2_writedata,                                                //                                                                .writedata
		output wire [15:0]  inst_sram_s2_byteenable,                                               //                                                                .byteenable
		output wire         inst_sram_s2_chipselect,                                               //                                                                .chipselect
		output wire         inst_sram_s2_clken,                                                    //                                                                .clken
		output wire [11:0]  sram_0_s2_address,                                                     //                                                       sram_0_s2.address
		output wire         sram_0_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_0_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_0_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_0_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_0_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_0_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_1_s2_address,                                                     //                                                       sram_1_s2.address
		output wire         sram_1_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_1_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_1_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_1_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_1_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_1_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_10_s2_address,                                                    //                                                      sram_10_s2.address
		output wire         sram_10_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_10_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_10_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_10_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_10_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_10_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_11_s2_address,                                                    //                                                      sram_11_s2.address
		output wire         sram_11_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_11_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_11_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_11_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_11_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_11_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_12_s2_address,                                                    //                                                      sram_12_s2.address
		output wire         sram_12_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_12_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_12_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_12_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_12_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_12_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_13_s2_address,                                                    //                                                      sram_13_s2.address
		output wire         sram_13_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_13_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_13_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_13_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_13_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_13_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_14_s2_address,                                                    //                                                      sram_14_s2.address
		output wire         sram_14_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_14_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_14_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_14_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_14_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_14_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_15_s2_address,                                                    //                                                      sram_15_s2.address
		output wire         sram_15_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_15_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_15_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_15_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_15_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_15_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_16_s2_address,                                                    //                                                      sram_16_s2.address
		output wire         sram_16_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_16_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_16_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_16_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_16_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_16_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_17_s2_address,                                                    //                                                      sram_17_s2.address
		output wire         sram_17_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_17_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_17_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_17_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_17_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_17_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_18_s2_address,                                                    //                                                      sram_18_s2.address
		output wire         sram_18_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_18_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_18_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_18_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_18_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_18_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_19_s2_address,                                                    //                                                      sram_19_s2.address
		output wire         sram_19_s2_write,                                                      //                                                                .write
		input  wire [15:0]  sram_19_s2_readdata,                                                   //                                                                .readdata
		output wire [15:0]  sram_19_s2_writedata,                                                  //                                                                .writedata
		output wire [1:0]   sram_19_s2_byteenable,                                                 //                                                                .byteenable
		output wire         sram_19_s2_chipselect,                                                 //                                                                .chipselect
		output wire         sram_19_s2_clken,                                                      //                                                                .clken
		output wire [11:0]  sram_2_s2_address,                                                     //                                                       sram_2_s2.address
		output wire         sram_2_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_2_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_2_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_2_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_2_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_2_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_3_s2_address,                                                     //                                                       sram_3_s2.address
		output wire         sram_3_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_3_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_3_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_3_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_3_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_3_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_4_s2_address,                                                     //                                                       sram_4_s2.address
		output wire         sram_4_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_4_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_4_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_4_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_4_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_4_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_5_s2_address,                                                     //                                                       sram_5_s2.address
		output wire         sram_5_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_5_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_5_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_5_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_5_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_5_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_6_s2_address,                                                     //                                                       sram_6_s2.address
		output wire         sram_6_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_6_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_6_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_6_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_6_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_6_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_7_s2_address,                                                     //                                                       sram_7_s2.address
		output wire         sram_7_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_7_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_7_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_7_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_7_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_7_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_8_s2_address,                                                     //                                                       sram_8_s2.address
		output wire         sram_8_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_8_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_8_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_8_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_8_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_8_s2_clken,                                                       //                                                                .clken
		output wire [11:0]  sram_9_s2_address,                                                     //                                                       sram_9_s2.address
		output wire         sram_9_s2_write,                                                       //                                                                .write
		input  wire [15:0]  sram_9_s2_readdata,                                                    //                                                                .readdata
		output wire [15:0]  sram_9_s2_writedata,                                                   //                                                                .writedata
		output wire [1:0]   sram_9_s2_byteenable,                                                  //                                                                .byteenable
		output wire         sram_9_s2_chipselect,                                                  //                                                                .chipselect
		output wire         sram_9_s2_clken                                                        //                                                                .clken
	);

	wire  [127:0] inst_sram_s2_agent_m0_readdata;                             // inst_sram_s2_translator:uav_readdata -> inst_sram_s2_agent:m0_readdata
	wire          inst_sram_s2_agent_m0_waitrequest;                          // inst_sram_s2_translator:uav_waitrequest -> inst_sram_s2_agent:m0_waitrequest
	wire          inst_sram_s2_agent_m0_debugaccess;                          // inst_sram_s2_agent:m0_debugaccess -> inst_sram_s2_translator:uav_debugaccess
	wire   [29:0] inst_sram_s2_agent_m0_address;                              // inst_sram_s2_agent:m0_address -> inst_sram_s2_translator:uav_address
	wire   [15:0] inst_sram_s2_agent_m0_byteenable;                           // inst_sram_s2_agent:m0_byteenable -> inst_sram_s2_translator:uav_byteenable
	wire          inst_sram_s2_agent_m0_read;                                 // inst_sram_s2_agent:m0_read -> inst_sram_s2_translator:uav_read
	wire          inst_sram_s2_agent_m0_readdatavalid;                        // inst_sram_s2_translator:uav_readdatavalid -> inst_sram_s2_agent:m0_readdatavalid
	wire          inst_sram_s2_agent_m0_lock;                                 // inst_sram_s2_agent:m0_lock -> inst_sram_s2_translator:uav_lock
	wire  [127:0] inst_sram_s2_agent_m0_writedata;                            // inst_sram_s2_agent:m0_writedata -> inst_sram_s2_translator:uav_writedata
	wire          inst_sram_s2_agent_m0_write;                                // inst_sram_s2_agent:m0_write -> inst_sram_s2_translator:uav_write
	wire    [4:0] inst_sram_s2_agent_m0_burstcount;                           // inst_sram_s2_agent:m0_burstcount -> inst_sram_s2_translator:uav_burstcount
	wire          inst_sram_s2_agent_rf_source_valid;                         // inst_sram_s2_agent:rf_source_valid -> inst_sram_s2_agent_rsp_fifo:in_valid
	wire  [241:0] inst_sram_s2_agent_rf_source_data;                          // inst_sram_s2_agent:rf_source_data -> inst_sram_s2_agent_rsp_fifo:in_data
	wire          inst_sram_s2_agent_rf_source_ready;                         // inst_sram_s2_agent_rsp_fifo:in_ready -> inst_sram_s2_agent:rf_source_ready
	wire          inst_sram_s2_agent_rf_source_startofpacket;                 // inst_sram_s2_agent:rf_source_startofpacket -> inst_sram_s2_agent_rsp_fifo:in_startofpacket
	wire          inst_sram_s2_agent_rf_source_endofpacket;                   // inst_sram_s2_agent:rf_source_endofpacket -> inst_sram_s2_agent_rsp_fifo:in_endofpacket
	wire          inst_sram_s2_agent_rsp_fifo_out_valid;                      // inst_sram_s2_agent_rsp_fifo:out_valid -> inst_sram_s2_agent:rf_sink_valid
	wire  [241:0] inst_sram_s2_agent_rsp_fifo_out_data;                       // inst_sram_s2_agent_rsp_fifo:out_data -> inst_sram_s2_agent:rf_sink_data
	wire          inst_sram_s2_agent_rsp_fifo_out_ready;                      // inst_sram_s2_agent:rf_sink_ready -> inst_sram_s2_agent_rsp_fifo:out_ready
	wire          inst_sram_s2_agent_rsp_fifo_out_startofpacket;              // inst_sram_s2_agent_rsp_fifo:out_startofpacket -> inst_sram_s2_agent:rf_sink_startofpacket
	wire          inst_sram_s2_agent_rsp_fifo_out_endofpacket;                // inst_sram_s2_agent_rsp_fifo:out_endofpacket -> inst_sram_s2_agent:rf_sink_endofpacket
	wire          inst_sram_s2_agent_rdata_fifo_src_valid;                    // inst_sram_s2_agent:rdata_fifo_src_valid -> inst_sram_s2_agent_rdata_fifo:in_valid
	wire  [129:0] inst_sram_s2_agent_rdata_fifo_src_data;                     // inst_sram_s2_agent:rdata_fifo_src_data -> inst_sram_s2_agent_rdata_fifo:in_data
	wire          inst_sram_s2_agent_rdata_fifo_src_ready;                    // inst_sram_s2_agent_rdata_fifo:in_ready -> inst_sram_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_0_s2_agent_m0_readdata;                                // sram_0_s2_translator:uav_readdata -> sram_0_s2_agent:m0_readdata
	wire          sram_0_s2_agent_m0_waitrequest;                             // sram_0_s2_translator:uav_waitrequest -> sram_0_s2_agent:m0_waitrequest
	wire          sram_0_s2_agent_m0_debugaccess;                             // sram_0_s2_agent:m0_debugaccess -> sram_0_s2_translator:uav_debugaccess
	wire   [29:0] sram_0_s2_agent_m0_address;                                 // sram_0_s2_agent:m0_address -> sram_0_s2_translator:uav_address
	wire    [1:0] sram_0_s2_agent_m0_byteenable;                              // sram_0_s2_agent:m0_byteenable -> sram_0_s2_translator:uav_byteenable
	wire          sram_0_s2_agent_m0_read;                                    // sram_0_s2_agent:m0_read -> sram_0_s2_translator:uav_read
	wire          sram_0_s2_agent_m0_readdatavalid;                           // sram_0_s2_translator:uav_readdatavalid -> sram_0_s2_agent:m0_readdatavalid
	wire          sram_0_s2_agent_m0_lock;                                    // sram_0_s2_agent:m0_lock -> sram_0_s2_translator:uav_lock
	wire   [15:0] sram_0_s2_agent_m0_writedata;                               // sram_0_s2_agent:m0_writedata -> sram_0_s2_translator:uav_writedata
	wire          sram_0_s2_agent_m0_write;                                   // sram_0_s2_agent:m0_write -> sram_0_s2_translator:uav_write
	wire    [1:0] sram_0_s2_agent_m0_burstcount;                              // sram_0_s2_agent:m0_burstcount -> sram_0_s2_translator:uav_burstcount
	wire          sram_0_s2_agent_rf_source_valid;                            // sram_0_s2_agent:rf_source_valid -> sram_0_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_0_s2_agent_rf_source_data;                             // sram_0_s2_agent:rf_source_data -> sram_0_s2_agent_rsp_fifo:in_data
	wire          sram_0_s2_agent_rf_source_ready;                            // sram_0_s2_agent_rsp_fifo:in_ready -> sram_0_s2_agent:rf_source_ready
	wire          sram_0_s2_agent_rf_source_startofpacket;                    // sram_0_s2_agent:rf_source_startofpacket -> sram_0_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_0_s2_agent_rf_source_endofpacket;                      // sram_0_s2_agent:rf_source_endofpacket -> sram_0_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_0_s2_agent_rsp_fifo_out_valid;                         // sram_0_s2_agent_rsp_fifo:out_valid -> sram_0_s2_agent:rf_sink_valid
	wire  [115:0] sram_0_s2_agent_rsp_fifo_out_data;                          // sram_0_s2_agent_rsp_fifo:out_data -> sram_0_s2_agent:rf_sink_data
	wire          sram_0_s2_agent_rsp_fifo_out_ready;                         // sram_0_s2_agent:rf_sink_ready -> sram_0_s2_agent_rsp_fifo:out_ready
	wire          sram_0_s2_agent_rsp_fifo_out_startofpacket;                 // sram_0_s2_agent_rsp_fifo:out_startofpacket -> sram_0_s2_agent:rf_sink_startofpacket
	wire          sram_0_s2_agent_rsp_fifo_out_endofpacket;                   // sram_0_s2_agent_rsp_fifo:out_endofpacket -> sram_0_s2_agent:rf_sink_endofpacket
	wire          sram_0_s2_agent_rdata_fifo_src_valid;                       // sram_0_s2_agent:rdata_fifo_src_valid -> sram_0_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_0_s2_agent_rdata_fifo_src_data;                        // sram_0_s2_agent:rdata_fifo_src_data -> sram_0_s2_agent_rdata_fifo:in_data
	wire          sram_0_s2_agent_rdata_fifo_src_ready;                       // sram_0_s2_agent_rdata_fifo:in_ready -> sram_0_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_1_s2_agent_m0_readdata;                                // sram_1_s2_translator:uav_readdata -> sram_1_s2_agent:m0_readdata
	wire          sram_1_s2_agent_m0_waitrequest;                             // sram_1_s2_translator:uav_waitrequest -> sram_1_s2_agent:m0_waitrequest
	wire          sram_1_s2_agent_m0_debugaccess;                             // sram_1_s2_agent:m0_debugaccess -> sram_1_s2_translator:uav_debugaccess
	wire   [29:0] sram_1_s2_agent_m0_address;                                 // sram_1_s2_agent:m0_address -> sram_1_s2_translator:uav_address
	wire    [1:0] sram_1_s2_agent_m0_byteenable;                              // sram_1_s2_agent:m0_byteenable -> sram_1_s2_translator:uav_byteenable
	wire          sram_1_s2_agent_m0_read;                                    // sram_1_s2_agent:m0_read -> sram_1_s2_translator:uav_read
	wire          sram_1_s2_agent_m0_readdatavalid;                           // sram_1_s2_translator:uav_readdatavalid -> sram_1_s2_agent:m0_readdatavalid
	wire          sram_1_s2_agent_m0_lock;                                    // sram_1_s2_agent:m0_lock -> sram_1_s2_translator:uav_lock
	wire   [15:0] sram_1_s2_agent_m0_writedata;                               // sram_1_s2_agent:m0_writedata -> sram_1_s2_translator:uav_writedata
	wire          sram_1_s2_agent_m0_write;                                   // sram_1_s2_agent:m0_write -> sram_1_s2_translator:uav_write
	wire    [1:0] sram_1_s2_agent_m0_burstcount;                              // sram_1_s2_agent:m0_burstcount -> sram_1_s2_translator:uav_burstcount
	wire          sram_1_s2_agent_rf_source_valid;                            // sram_1_s2_agent:rf_source_valid -> sram_1_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_1_s2_agent_rf_source_data;                             // sram_1_s2_agent:rf_source_data -> sram_1_s2_agent_rsp_fifo:in_data
	wire          sram_1_s2_agent_rf_source_ready;                            // sram_1_s2_agent_rsp_fifo:in_ready -> sram_1_s2_agent:rf_source_ready
	wire          sram_1_s2_agent_rf_source_startofpacket;                    // sram_1_s2_agent:rf_source_startofpacket -> sram_1_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_1_s2_agent_rf_source_endofpacket;                      // sram_1_s2_agent:rf_source_endofpacket -> sram_1_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_1_s2_agent_rsp_fifo_out_valid;                         // sram_1_s2_agent_rsp_fifo:out_valid -> sram_1_s2_agent:rf_sink_valid
	wire  [115:0] sram_1_s2_agent_rsp_fifo_out_data;                          // sram_1_s2_agent_rsp_fifo:out_data -> sram_1_s2_agent:rf_sink_data
	wire          sram_1_s2_agent_rsp_fifo_out_ready;                         // sram_1_s2_agent:rf_sink_ready -> sram_1_s2_agent_rsp_fifo:out_ready
	wire          sram_1_s2_agent_rsp_fifo_out_startofpacket;                 // sram_1_s2_agent_rsp_fifo:out_startofpacket -> sram_1_s2_agent:rf_sink_startofpacket
	wire          sram_1_s2_agent_rsp_fifo_out_endofpacket;                   // sram_1_s2_agent_rsp_fifo:out_endofpacket -> sram_1_s2_agent:rf_sink_endofpacket
	wire          sram_1_s2_agent_rdata_fifo_src_valid;                       // sram_1_s2_agent:rdata_fifo_src_valid -> sram_1_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_1_s2_agent_rdata_fifo_src_data;                        // sram_1_s2_agent:rdata_fifo_src_data -> sram_1_s2_agent_rdata_fifo:in_data
	wire          sram_1_s2_agent_rdata_fifo_src_ready;                       // sram_1_s2_agent_rdata_fifo:in_ready -> sram_1_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_2_s2_agent_m0_readdata;                                // sram_2_s2_translator:uav_readdata -> sram_2_s2_agent:m0_readdata
	wire          sram_2_s2_agent_m0_waitrequest;                             // sram_2_s2_translator:uav_waitrequest -> sram_2_s2_agent:m0_waitrequest
	wire          sram_2_s2_agent_m0_debugaccess;                             // sram_2_s2_agent:m0_debugaccess -> sram_2_s2_translator:uav_debugaccess
	wire   [29:0] sram_2_s2_agent_m0_address;                                 // sram_2_s2_agent:m0_address -> sram_2_s2_translator:uav_address
	wire    [1:0] sram_2_s2_agent_m0_byteenable;                              // sram_2_s2_agent:m0_byteenable -> sram_2_s2_translator:uav_byteenable
	wire          sram_2_s2_agent_m0_read;                                    // sram_2_s2_agent:m0_read -> sram_2_s2_translator:uav_read
	wire          sram_2_s2_agent_m0_readdatavalid;                           // sram_2_s2_translator:uav_readdatavalid -> sram_2_s2_agent:m0_readdatavalid
	wire          sram_2_s2_agent_m0_lock;                                    // sram_2_s2_agent:m0_lock -> sram_2_s2_translator:uav_lock
	wire   [15:0] sram_2_s2_agent_m0_writedata;                               // sram_2_s2_agent:m0_writedata -> sram_2_s2_translator:uav_writedata
	wire          sram_2_s2_agent_m0_write;                                   // sram_2_s2_agent:m0_write -> sram_2_s2_translator:uav_write
	wire    [1:0] sram_2_s2_agent_m0_burstcount;                              // sram_2_s2_agent:m0_burstcount -> sram_2_s2_translator:uav_burstcount
	wire          sram_2_s2_agent_rf_source_valid;                            // sram_2_s2_agent:rf_source_valid -> sram_2_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_2_s2_agent_rf_source_data;                             // sram_2_s2_agent:rf_source_data -> sram_2_s2_agent_rsp_fifo:in_data
	wire          sram_2_s2_agent_rf_source_ready;                            // sram_2_s2_agent_rsp_fifo:in_ready -> sram_2_s2_agent:rf_source_ready
	wire          sram_2_s2_agent_rf_source_startofpacket;                    // sram_2_s2_agent:rf_source_startofpacket -> sram_2_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_2_s2_agent_rf_source_endofpacket;                      // sram_2_s2_agent:rf_source_endofpacket -> sram_2_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_2_s2_agent_rsp_fifo_out_valid;                         // sram_2_s2_agent_rsp_fifo:out_valid -> sram_2_s2_agent:rf_sink_valid
	wire  [115:0] sram_2_s2_agent_rsp_fifo_out_data;                          // sram_2_s2_agent_rsp_fifo:out_data -> sram_2_s2_agent:rf_sink_data
	wire          sram_2_s2_agent_rsp_fifo_out_ready;                         // sram_2_s2_agent:rf_sink_ready -> sram_2_s2_agent_rsp_fifo:out_ready
	wire          sram_2_s2_agent_rsp_fifo_out_startofpacket;                 // sram_2_s2_agent_rsp_fifo:out_startofpacket -> sram_2_s2_agent:rf_sink_startofpacket
	wire          sram_2_s2_agent_rsp_fifo_out_endofpacket;                   // sram_2_s2_agent_rsp_fifo:out_endofpacket -> sram_2_s2_agent:rf_sink_endofpacket
	wire          sram_2_s2_agent_rdata_fifo_src_valid;                       // sram_2_s2_agent:rdata_fifo_src_valid -> sram_2_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_2_s2_agent_rdata_fifo_src_data;                        // sram_2_s2_agent:rdata_fifo_src_data -> sram_2_s2_agent_rdata_fifo:in_data
	wire          sram_2_s2_agent_rdata_fifo_src_ready;                       // sram_2_s2_agent_rdata_fifo:in_ready -> sram_2_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_3_s2_agent_m0_readdata;                                // sram_3_s2_translator:uav_readdata -> sram_3_s2_agent:m0_readdata
	wire          sram_3_s2_agent_m0_waitrequest;                             // sram_3_s2_translator:uav_waitrequest -> sram_3_s2_agent:m0_waitrequest
	wire          sram_3_s2_agent_m0_debugaccess;                             // sram_3_s2_agent:m0_debugaccess -> sram_3_s2_translator:uav_debugaccess
	wire   [29:0] sram_3_s2_agent_m0_address;                                 // sram_3_s2_agent:m0_address -> sram_3_s2_translator:uav_address
	wire    [1:0] sram_3_s2_agent_m0_byteenable;                              // sram_3_s2_agent:m0_byteenable -> sram_3_s2_translator:uav_byteenable
	wire          sram_3_s2_agent_m0_read;                                    // sram_3_s2_agent:m0_read -> sram_3_s2_translator:uav_read
	wire          sram_3_s2_agent_m0_readdatavalid;                           // sram_3_s2_translator:uav_readdatavalid -> sram_3_s2_agent:m0_readdatavalid
	wire          sram_3_s2_agent_m0_lock;                                    // sram_3_s2_agent:m0_lock -> sram_3_s2_translator:uav_lock
	wire   [15:0] sram_3_s2_agent_m0_writedata;                               // sram_3_s2_agent:m0_writedata -> sram_3_s2_translator:uav_writedata
	wire          sram_3_s2_agent_m0_write;                                   // sram_3_s2_agent:m0_write -> sram_3_s2_translator:uav_write
	wire    [1:0] sram_3_s2_agent_m0_burstcount;                              // sram_3_s2_agent:m0_burstcount -> sram_3_s2_translator:uav_burstcount
	wire          sram_3_s2_agent_rf_source_valid;                            // sram_3_s2_agent:rf_source_valid -> sram_3_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_3_s2_agent_rf_source_data;                             // sram_3_s2_agent:rf_source_data -> sram_3_s2_agent_rsp_fifo:in_data
	wire          sram_3_s2_agent_rf_source_ready;                            // sram_3_s2_agent_rsp_fifo:in_ready -> sram_3_s2_agent:rf_source_ready
	wire          sram_3_s2_agent_rf_source_startofpacket;                    // sram_3_s2_agent:rf_source_startofpacket -> sram_3_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_3_s2_agent_rf_source_endofpacket;                      // sram_3_s2_agent:rf_source_endofpacket -> sram_3_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_3_s2_agent_rsp_fifo_out_valid;                         // sram_3_s2_agent_rsp_fifo:out_valid -> sram_3_s2_agent:rf_sink_valid
	wire  [115:0] sram_3_s2_agent_rsp_fifo_out_data;                          // sram_3_s2_agent_rsp_fifo:out_data -> sram_3_s2_agent:rf_sink_data
	wire          sram_3_s2_agent_rsp_fifo_out_ready;                         // sram_3_s2_agent:rf_sink_ready -> sram_3_s2_agent_rsp_fifo:out_ready
	wire          sram_3_s2_agent_rsp_fifo_out_startofpacket;                 // sram_3_s2_agent_rsp_fifo:out_startofpacket -> sram_3_s2_agent:rf_sink_startofpacket
	wire          sram_3_s2_agent_rsp_fifo_out_endofpacket;                   // sram_3_s2_agent_rsp_fifo:out_endofpacket -> sram_3_s2_agent:rf_sink_endofpacket
	wire          sram_3_s2_agent_rdata_fifo_src_valid;                       // sram_3_s2_agent:rdata_fifo_src_valid -> sram_3_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_3_s2_agent_rdata_fifo_src_data;                        // sram_3_s2_agent:rdata_fifo_src_data -> sram_3_s2_agent_rdata_fifo:in_data
	wire          sram_3_s2_agent_rdata_fifo_src_ready;                       // sram_3_s2_agent_rdata_fifo:in_ready -> sram_3_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_4_s2_agent_m0_readdata;                                // sram_4_s2_translator:uav_readdata -> sram_4_s2_agent:m0_readdata
	wire          sram_4_s2_agent_m0_waitrequest;                             // sram_4_s2_translator:uav_waitrequest -> sram_4_s2_agent:m0_waitrequest
	wire          sram_4_s2_agent_m0_debugaccess;                             // sram_4_s2_agent:m0_debugaccess -> sram_4_s2_translator:uav_debugaccess
	wire   [29:0] sram_4_s2_agent_m0_address;                                 // sram_4_s2_agent:m0_address -> sram_4_s2_translator:uav_address
	wire    [1:0] sram_4_s2_agent_m0_byteenable;                              // sram_4_s2_agent:m0_byteenable -> sram_4_s2_translator:uav_byteenable
	wire          sram_4_s2_agent_m0_read;                                    // sram_4_s2_agent:m0_read -> sram_4_s2_translator:uav_read
	wire          sram_4_s2_agent_m0_readdatavalid;                           // sram_4_s2_translator:uav_readdatavalid -> sram_4_s2_agent:m0_readdatavalid
	wire          sram_4_s2_agent_m0_lock;                                    // sram_4_s2_agent:m0_lock -> sram_4_s2_translator:uav_lock
	wire   [15:0] sram_4_s2_agent_m0_writedata;                               // sram_4_s2_agent:m0_writedata -> sram_4_s2_translator:uav_writedata
	wire          sram_4_s2_agent_m0_write;                                   // sram_4_s2_agent:m0_write -> sram_4_s2_translator:uav_write
	wire    [1:0] sram_4_s2_agent_m0_burstcount;                              // sram_4_s2_agent:m0_burstcount -> sram_4_s2_translator:uav_burstcount
	wire          sram_4_s2_agent_rf_source_valid;                            // sram_4_s2_agent:rf_source_valid -> sram_4_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_4_s2_agent_rf_source_data;                             // sram_4_s2_agent:rf_source_data -> sram_4_s2_agent_rsp_fifo:in_data
	wire          sram_4_s2_agent_rf_source_ready;                            // sram_4_s2_agent_rsp_fifo:in_ready -> sram_4_s2_agent:rf_source_ready
	wire          sram_4_s2_agent_rf_source_startofpacket;                    // sram_4_s2_agent:rf_source_startofpacket -> sram_4_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_4_s2_agent_rf_source_endofpacket;                      // sram_4_s2_agent:rf_source_endofpacket -> sram_4_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_4_s2_agent_rsp_fifo_out_valid;                         // sram_4_s2_agent_rsp_fifo:out_valid -> sram_4_s2_agent:rf_sink_valid
	wire  [115:0] sram_4_s2_agent_rsp_fifo_out_data;                          // sram_4_s2_agent_rsp_fifo:out_data -> sram_4_s2_agent:rf_sink_data
	wire          sram_4_s2_agent_rsp_fifo_out_ready;                         // sram_4_s2_agent:rf_sink_ready -> sram_4_s2_agent_rsp_fifo:out_ready
	wire          sram_4_s2_agent_rsp_fifo_out_startofpacket;                 // sram_4_s2_agent_rsp_fifo:out_startofpacket -> sram_4_s2_agent:rf_sink_startofpacket
	wire          sram_4_s2_agent_rsp_fifo_out_endofpacket;                   // sram_4_s2_agent_rsp_fifo:out_endofpacket -> sram_4_s2_agent:rf_sink_endofpacket
	wire          sram_4_s2_agent_rdata_fifo_src_valid;                       // sram_4_s2_agent:rdata_fifo_src_valid -> sram_4_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_4_s2_agent_rdata_fifo_src_data;                        // sram_4_s2_agent:rdata_fifo_src_data -> sram_4_s2_agent_rdata_fifo:in_data
	wire          sram_4_s2_agent_rdata_fifo_src_ready;                       // sram_4_s2_agent_rdata_fifo:in_ready -> sram_4_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_5_s2_agent_m0_readdata;                                // sram_5_s2_translator:uav_readdata -> sram_5_s2_agent:m0_readdata
	wire          sram_5_s2_agent_m0_waitrequest;                             // sram_5_s2_translator:uav_waitrequest -> sram_5_s2_agent:m0_waitrequest
	wire          sram_5_s2_agent_m0_debugaccess;                             // sram_5_s2_agent:m0_debugaccess -> sram_5_s2_translator:uav_debugaccess
	wire   [29:0] sram_5_s2_agent_m0_address;                                 // sram_5_s2_agent:m0_address -> sram_5_s2_translator:uav_address
	wire    [1:0] sram_5_s2_agent_m0_byteenable;                              // sram_5_s2_agent:m0_byteenable -> sram_5_s2_translator:uav_byteenable
	wire          sram_5_s2_agent_m0_read;                                    // sram_5_s2_agent:m0_read -> sram_5_s2_translator:uav_read
	wire          sram_5_s2_agent_m0_readdatavalid;                           // sram_5_s2_translator:uav_readdatavalid -> sram_5_s2_agent:m0_readdatavalid
	wire          sram_5_s2_agent_m0_lock;                                    // sram_5_s2_agent:m0_lock -> sram_5_s2_translator:uav_lock
	wire   [15:0] sram_5_s2_agent_m0_writedata;                               // sram_5_s2_agent:m0_writedata -> sram_5_s2_translator:uav_writedata
	wire          sram_5_s2_agent_m0_write;                                   // sram_5_s2_agent:m0_write -> sram_5_s2_translator:uav_write
	wire    [1:0] sram_5_s2_agent_m0_burstcount;                              // sram_5_s2_agent:m0_burstcount -> sram_5_s2_translator:uav_burstcount
	wire          sram_5_s2_agent_rf_source_valid;                            // sram_5_s2_agent:rf_source_valid -> sram_5_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_5_s2_agent_rf_source_data;                             // sram_5_s2_agent:rf_source_data -> sram_5_s2_agent_rsp_fifo:in_data
	wire          sram_5_s2_agent_rf_source_ready;                            // sram_5_s2_agent_rsp_fifo:in_ready -> sram_5_s2_agent:rf_source_ready
	wire          sram_5_s2_agent_rf_source_startofpacket;                    // sram_5_s2_agent:rf_source_startofpacket -> sram_5_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_5_s2_agent_rf_source_endofpacket;                      // sram_5_s2_agent:rf_source_endofpacket -> sram_5_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_5_s2_agent_rsp_fifo_out_valid;                         // sram_5_s2_agent_rsp_fifo:out_valid -> sram_5_s2_agent:rf_sink_valid
	wire  [115:0] sram_5_s2_agent_rsp_fifo_out_data;                          // sram_5_s2_agent_rsp_fifo:out_data -> sram_5_s2_agent:rf_sink_data
	wire          sram_5_s2_agent_rsp_fifo_out_ready;                         // sram_5_s2_agent:rf_sink_ready -> sram_5_s2_agent_rsp_fifo:out_ready
	wire          sram_5_s2_agent_rsp_fifo_out_startofpacket;                 // sram_5_s2_agent_rsp_fifo:out_startofpacket -> sram_5_s2_agent:rf_sink_startofpacket
	wire          sram_5_s2_agent_rsp_fifo_out_endofpacket;                   // sram_5_s2_agent_rsp_fifo:out_endofpacket -> sram_5_s2_agent:rf_sink_endofpacket
	wire          sram_5_s2_agent_rdata_fifo_src_valid;                       // sram_5_s2_agent:rdata_fifo_src_valid -> sram_5_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_5_s2_agent_rdata_fifo_src_data;                        // sram_5_s2_agent:rdata_fifo_src_data -> sram_5_s2_agent_rdata_fifo:in_data
	wire          sram_5_s2_agent_rdata_fifo_src_ready;                       // sram_5_s2_agent_rdata_fifo:in_ready -> sram_5_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_6_s2_agent_m0_readdata;                                // sram_6_s2_translator:uav_readdata -> sram_6_s2_agent:m0_readdata
	wire          sram_6_s2_agent_m0_waitrequest;                             // sram_6_s2_translator:uav_waitrequest -> sram_6_s2_agent:m0_waitrequest
	wire          sram_6_s2_agent_m0_debugaccess;                             // sram_6_s2_agent:m0_debugaccess -> sram_6_s2_translator:uav_debugaccess
	wire   [29:0] sram_6_s2_agent_m0_address;                                 // sram_6_s2_agent:m0_address -> sram_6_s2_translator:uav_address
	wire    [1:0] sram_6_s2_agent_m0_byteenable;                              // sram_6_s2_agent:m0_byteenable -> sram_6_s2_translator:uav_byteenable
	wire          sram_6_s2_agent_m0_read;                                    // sram_6_s2_agent:m0_read -> sram_6_s2_translator:uav_read
	wire          sram_6_s2_agent_m0_readdatavalid;                           // sram_6_s2_translator:uav_readdatavalid -> sram_6_s2_agent:m0_readdatavalid
	wire          sram_6_s2_agent_m0_lock;                                    // sram_6_s2_agent:m0_lock -> sram_6_s2_translator:uav_lock
	wire   [15:0] sram_6_s2_agent_m0_writedata;                               // sram_6_s2_agent:m0_writedata -> sram_6_s2_translator:uav_writedata
	wire          sram_6_s2_agent_m0_write;                                   // sram_6_s2_agent:m0_write -> sram_6_s2_translator:uav_write
	wire    [1:0] sram_6_s2_agent_m0_burstcount;                              // sram_6_s2_agent:m0_burstcount -> sram_6_s2_translator:uav_burstcount
	wire          sram_6_s2_agent_rf_source_valid;                            // sram_6_s2_agent:rf_source_valid -> sram_6_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_6_s2_agent_rf_source_data;                             // sram_6_s2_agent:rf_source_data -> sram_6_s2_agent_rsp_fifo:in_data
	wire          sram_6_s2_agent_rf_source_ready;                            // sram_6_s2_agent_rsp_fifo:in_ready -> sram_6_s2_agent:rf_source_ready
	wire          sram_6_s2_agent_rf_source_startofpacket;                    // sram_6_s2_agent:rf_source_startofpacket -> sram_6_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_6_s2_agent_rf_source_endofpacket;                      // sram_6_s2_agent:rf_source_endofpacket -> sram_6_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_6_s2_agent_rsp_fifo_out_valid;                         // sram_6_s2_agent_rsp_fifo:out_valid -> sram_6_s2_agent:rf_sink_valid
	wire  [115:0] sram_6_s2_agent_rsp_fifo_out_data;                          // sram_6_s2_agent_rsp_fifo:out_data -> sram_6_s2_agent:rf_sink_data
	wire          sram_6_s2_agent_rsp_fifo_out_ready;                         // sram_6_s2_agent:rf_sink_ready -> sram_6_s2_agent_rsp_fifo:out_ready
	wire          sram_6_s2_agent_rsp_fifo_out_startofpacket;                 // sram_6_s2_agent_rsp_fifo:out_startofpacket -> sram_6_s2_agent:rf_sink_startofpacket
	wire          sram_6_s2_agent_rsp_fifo_out_endofpacket;                   // sram_6_s2_agent_rsp_fifo:out_endofpacket -> sram_6_s2_agent:rf_sink_endofpacket
	wire          sram_6_s2_agent_rdata_fifo_src_valid;                       // sram_6_s2_agent:rdata_fifo_src_valid -> sram_6_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_6_s2_agent_rdata_fifo_src_data;                        // sram_6_s2_agent:rdata_fifo_src_data -> sram_6_s2_agent_rdata_fifo:in_data
	wire          sram_6_s2_agent_rdata_fifo_src_ready;                       // sram_6_s2_agent_rdata_fifo:in_ready -> sram_6_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_7_s2_agent_m0_readdata;                                // sram_7_s2_translator:uav_readdata -> sram_7_s2_agent:m0_readdata
	wire          sram_7_s2_agent_m0_waitrequest;                             // sram_7_s2_translator:uav_waitrequest -> sram_7_s2_agent:m0_waitrequest
	wire          sram_7_s2_agent_m0_debugaccess;                             // sram_7_s2_agent:m0_debugaccess -> sram_7_s2_translator:uav_debugaccess
	wire   [29:0] sram_7_s2_agent_m0_address;                                 // sram_7_s2_agent:m0_address -> sram_7_s2_translator:uav_address
	wire    [1:0] sram_7_s2_agent_m0_byteenable;                              // sram_7_s2_agent:m0_byteenable -> sram_7_s2_translator:uav_byteenable
	wire          sram_7_s2_agent_m0_read;                                    // sram_7_s2_agent:m0_read -> sram_7_s2_translator:uav_read
	wire          sram_7_s2_agent_m0_readdatavalid;                           // sram_7_s2_translator:uav_readdatavalid -> sram_7_s2_agent:m0_readdatavalid
	wire          sram_7_s2_agent_m0_lock;                                    // sram_7_s2_agent:m0_lock -> sram_7_s2_translator:uav_lock
	wire   [15:0] sram_7_s2_agent_m0_writedata;                               // sram_7_s2_agent:m0_writedata -> sram_7_s2_translator:uav_writedata
	wire          sram_7_s2_agent_m0_write;                                   // sram_7_s2_agent:m0_write -> sram_7_s2_translator:uav_write
	wire    [1:0] sram_7_s2_agent_m0_burstcount;                              // sram_7_s2_agent:m0_burstcount -> sram_7_s2_translator:uav_burstcount
	wire          sram_7_s2_agent_rf_source_valid;                            // sram_7_s2_agent:rf_source_valid -> sram_7_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_7_s2_agent_rf_source_data;                             // sram_7_s2_agent:rf_source_data -> sram_7_s2_agent_rsp_fifo:in_data
	wire          sram_7_s2_agent_rf_source_ready;                            // sram_7_s2_agent_rsp_fifo:in_ready -> sram_7_s2_agent:rf_source_ready
	wire          sram_7_s2_agent_rf_source_startofpacket;                    // sram_7_s2_agent:rf_source_startofpacket -> sram_7_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_7_s2_agent_rf_source_endofpacket;                      // sram_7_s2_agent:rf_source_endofpacket -> sram_7_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_7_s2_agent_rsp_fifo_out_valid;                         // sram_7_s2_agent_rsp_fifo:out_valid -> sram_7_s2_agent:rf_sink_valid
	wire  [115:0] sram_7_s2_agent_rsp_fifo_out_data;                          // sram_7_s2_agent_rsp_fifo:out_data -> sram_7_s2_agent:rf_sink_data
	wire          sram_7_s2_agent_rsp_fifo_out_ready;                         // sram_7_s2_agent:rf_sink_ready -> sram_7_s2_agent_rsp_fifo:out_ready
	wire          sram_7_s2_agent_rsp_fifo_out_startofpacket;                 // sram_7_s2_agent_rsp_fifo:out_startofpacket -> sram_7_s2_agent:rf_sink_startofpacket
	wire          sram_7_s2_agent_rsp_fifo_out_endofpacket;                   // sram_7_s2_agent_rsp_fifo:out_endofpacket -> sram_7_s2_agent:rf_sink_endofpacket
	wire          sram_7_s2_agent_rdata_fifo_src_valid;                       // sram_7_s2_agent:rdata_fifo_src_valid -> sram_7_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_7_s2_agent_rdata_fifo_src_data;                        // sram_7_s2_agent:rdata_fifo_src_data -> sram_7_s2_agent_rdata_fifo:in_data
	wire          sram_7_s2_agent_rdata_fifo_src_ready;                       // sram_7_s2_agent_rdata_fifo:in_ready -> sram_7_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_8_s2_agent_m0_readdata;                                // sram_8_s2_translator:uav_readdata -> sram_8_s2_agent:m0_readdata
	wire          sram_8_s2_agent_m0_waitrequest;                             // sram_8_s2_translator:uav_waitrequest -> sram_8_s2_agent:m0_waitrequest
	wire          sram_8_s2_agent_m0_debugaccess;                             // sram_8_s2_agent:m0_debugaccess -> sram_8_s2_translator:uav_debugaccess
	wire   [29:0] sram_8_s2_agent_m0_address;                                 // sram_8_s2_agent:m0_address -> sram_8_s2_translator:uav_address
	wire    [1:0] sram_8_s2_agent_m0_byteenable;                              // sram_8_s2_agent:m0_byteenable -> sram_8_s2_translator:uav_byteenable
	wire          sram_8_s2_agent_m0_read;                                    // sram_8_s2_agent:m0_read -> sram_8_s2_translator:uav_read
	wire          sram_8_s2_agent_m0_readdatavalid;                           // sram_8_s2_translator:uav_readdatavalid -> sram_8_s2_agent:m0_readdatavalid
	wire          sram_8_s2_agent_m0_lock;                                    // sram_8_s2_agent:m0_lock -> sram_8_s2_translator:uav_lock
	wire   [15:0] sram_8_s2_agent_m0_writedata;                               // sram_8_s2_agent:m0_writedata -> sram_8_s2_translator:uav_writedata
	wire          sram_8_s2_agent_m0_write;                                   // sram_8_s2_agent:m0_write -> sram_8_s2_translator:uav_write
	wire    [1:0] sram_8_s2_agent_m0_burstcount;                              // sram_8_s2_agent:m0_burstcount -> sram_8_s2_translator:uav_burstcount
	wire          sram_8_s2_agent_rf_source_valid;                            // sram_8_s2_agent:rf_source_valid -> sram_8_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_8_s2_agent_rf_source_data;                             // sram_8_s2_agent:rf_source_data -> sram_8_s2_agent_rsp_fifo:in_data
	wire          sram_8_s2_agent_rf_source_ready;                            // sram_8_s2_agent_rsp_fifo:in_ready -> sram_8_s2_agent:rf_source_ready
	wire          sram_8_s2_agent_rf_source_startofpacket;                    // sram_8_s2_agent:rf_source_startofpacket -> sram_8_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_8_s2_agent_rf_source_endofpacket;                      // sram_8_s2_agent:rf_source_endofpacket -> sram_8_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_8_s2_agent_rsp_fifo_out_valid;                         // sram_8_s2_agent_rsp_fifo:out_valid -> sram_8_s2_agent:rf_sink_valid
	wire  [115:0] sram_8_s2_agent_rsp_fifo_out_data;                          // sram_8_s2_agent_rsp_fifo:out_data -> sram_8_s2_agent:rf_sink_data
	wire          sram_8_s2_agent_rsp_fifo_out_ready;                         // sram_8_s2_agent:rf_sink_ready -> sram_8_s2_agent_rsp_fifo:out_ready
	wire          sram_8_s2_agent_rsp_fifo_out_startofpacket;                 // sram_8_s2_agent_rsp_fifo:out_startofpacket -> sram_8_s2_agent:rf_sink_startofpacket
	wire          sram_8_s2_agent_rsp_fifo_out_endofpacket;                   // sram_8_s2_agent_rsp_fifo:out_endofpacket -> sram_8_s2_agent:rf_sink_endofpacket
	wire          sram_8_s2_agent_rdata_fifo_src_valid;                       // sram_8_s2_agent:rdata_fifo_src_valid -> sram_8_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_8_s2_agent_rdata_fifo_src_data;                        // sram_8_s2_agent:rdata_fifo_src_data -> sram_8_s2_agent_rdata_fifo:in_data
	wire          sram_8_s2_agent_rdata_fifo_src_ready;                       // sram_8_s2_agent_rdata_fifo:in_ready -> sram_8_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_9_s2_agent_m0_readdata;                                // sram_9_s2_translator:uav_readdata -> sram_9_s2_agent:m0_readdata
	wire          sram_9_s2_agent_m0_waitrequest;                             // sram_9_s2_translator:uav_waitrequest -> sram_9_s2_agent:m0_waitrequest
	wire          sram_9_s2_agent_m0_debugaccess;                             // sram_9_s2_agent:m0_debugaccess -> sram_9_s2_translator:uav_debugaccess
	wire   [29:0] sram_9_s2_agent_m0_address;                                 // sram_9_s2_agent:m0_address -> sram_9_s2_translator:uav_address
	wire    [1:0] sram_9_s2_agent_m0_byteenable;                              // sram_9_s2_agent:m0_byteenable -> sram_9_s2_translator:uav_byteenable
	wire          sram_9_s2_agent_m0_read;                                    // sram_9_s2_agent:m0_read -> sram_9_s2_translator:uav_read
	wire          sram_9_s2_agent_m0_readdatavalid;                           // sram_9_s2_translator:uav_readdatavalid -> sram_9_s2_agent:m0_readdatavalid
	wire          sram_9_s2_agent_m0_lock;                                    // sram_9_s2_agent:m0_lock -> sram_9_s2_translator:uav_lock
	wire   [15:0] sram_9_s2_agent_m0_writedata;                               // sram_9_s2_agent:m0_writedata -> sram_9_s2_translator:uav_writedata
	wire          sram_9_s2_agent_m0_write;                                   // sram_9_s2_agent:m0_write -> sram_9_s2_translator:uav_write
	wire    [1:0] sram_9_s2_agent_m0_burstcount;                              // sram_9_s2_agent:m0_burstcount -> sram_9_s2_translator:uav_burstcount
	wire          sram_9_s2_agent_rf_source_valid;                            // sram_9_s2_agent:rf_source_valid -> sram_9_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_9_s2_agent_rf_source_data;                             // sram_9_s2_agent:rf_source_data -> sram_9_s2_agent_rsp_fifo:in_data
	wire          sram_9_s2_agent_rf_source_ready;                            // sram_9_s2_agent_rsp_fifo:in_ready -> sram_9_s2_agent:rf_source_ready
	wire          sram_9_s2_agent_rf_source_startofpacket;                    // sram_9_s2_agent:rf_source_startofpacket -> sram_9_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_9_s2_agent_rf_source_endofpacket;                      // sram_9_s2_agent:rf_source_endofpacket -> sram_9_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_9_s2_agent_rsp_fifo_out_valid;                         // sram_9_s2_agent_rsp_fifo:out_valid -> sram_9_s2_agent:rf_sink_valid
	wire  [115:0] sram_9_s2_agent_rsp_fifo_out_data;                          // sram_9_s2_agent_rsp_fifo:out_data -> sram_9_s2_agent:rf_sink_data
	wire          sram_9_s2_agent_rsp_fifo_out_ready;                         // sram_9_s2_agent:rf_sink_ready -> sram_9_s2_agent_rsp_fifo:out_ready
	wire          sram_9_s2_agent_rsp_fifo_out_startofpacket;                 // sram_9_s2_agent_rsp_fifo:out_startofpacket -> sram_9_s2_agent:rf_sink_startofpacket
	wire          sram_9_s2_agent_rsp_fifo_out_endofpacket;                   // sram_9_s2_agent_rsp_fifo:out_endofpacket -> sram_9_s2_agent:rf_sink_endofpacket
	wire          sram_9_s2_agent_rdata_fifo_src_valid;                       // sram_9_s2_agent:rdata_fifo_src_valid -> sram_9_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_9_s2_agent_rdata_fifo_src_data;                        // sram_9_s2_agent:rdata_fifo_src_data -> sram_9_s2_agent_rdata_fifo:in_data
	wire          sram_9_s2_agent_rdata_fifo_src_ready;                       // sram_9_s2_agent_rdata_fifo:in_ready -> sram_9_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_10_s2_agent_m0_readdata;                               // sram_10_s2_translator:uav_readdata -> sram_10_s2_agent:m0_readdata
	wire          sram_10_s2_agent_m0_waitrequest;                            // sram_10_s2_translator:uav_waitrequest -> sram_10_s2_agent:m0_waitrequest
	wire          sram_10_s2_agent_m0_debugaccess;                            // sram_10_s2_agent:m0_debugaccess -> sram_10_s2_translator:uav_debugaccess
	wire   [29:0] sram_10_s2_agent_m0_address;                                // sram_10_s2_agent:m0_address -> sram_10_s2_translator:uav_address
	wire    [1:0] sram_10_s2_agent_m0_byteenable;                             // sram_10_s2_agent:m0_byteenable -> sram_10_s2_translator:uav_byteenable
	wire          sram_10_s2_agent_m0_read;                                   // sram_10_s2_agent:m0_read -> sram_10_s2_translator:uav_read
	wire          sram_10_s2_agent_m0_readdatavalid;                          // sram_10_s2_translator:uav_readdatavalid -> sram_10_s2_agent:m0_readdatavalid
	wire          sram_10_s2_agent_m0_lock;                                   // sram_10_s2_agent:m0_lock -> sram_10_s2_translator:uav_lock
	wire   [15:0] sram_10_s2_agent_m0_writedata;                              // sram_10_s2_agent:m0_writedata -> sram_10_s2_translator:uav_writedata
	wire          sram_10_s2_agent_m0_write;                                  // sram_10_s2_agent:m0_write -> sram_10_s2_translator:uav_write
	wire    [1:0] sram_10_s2_agent_m0_burstcount;                             // sram_10_s2_agent:m0_burstcount -> sram_10_s2_translator:uav_burstcount
	wire          sram_10_s2_agent_rf_source_valid;                           // sram_10_s2_agent:rf_source_valid -> sram_10_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_10_s2_agent_rf_source_data;                            // sram_10_s2_agent:rf_source_data -> sram_10_s2_agent_rsp_fifo:in_data
	wire          sram_10_s2_agent_rf_source_ready;                           // sram_10_s2_agent_rsp_fifo:in_ready -> sram_10_s2_agent:rf_source_ready
	wire          sram_10_s2_agent_rf_source_startofpacket;                   // sram_10_s2_agent:rf_source_startofpacket -> sram_10_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_10_s2_agent_rf_source_endofpacket;                     // sram_10_s2_agent:rf_source_endofpacket -> sram_10_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_10_s2_agent_rsp_fifo_out_valid;                        // sram_10_s2_agent_rsp_fifo:out_valid -> sram_10_s2_agent:rf_sink_valid
	wire  [115:0] sram_10_s2_agent_rsp_fifo_out_data;                         // sram_10_s2_agent_rsp_fifo:out_data -> sram_10_s2_agent:rf_sink_data
	wire          sram_10_s2_agent_rsp_fifo_out_ready;                        // sram_10_s2_agent:rf_sink_ready -> sram_10_s2_agent_rsp_fifo:out_ready
	wire          sram_10_s2_agent_rsp_fifo_out_startofpacket;                // sram_10_s2_agent_rsp_fifo:out_startofpacket -> sram_10_s2_agent:rf_sink_startofpacket
	wire          sram_10_s2_agent_rsp_fifo_out_endofpacket;                  // sram_10_s2_agent_rsp_fifo:out_endofpacket -> sram_10_s2_agent:rf_sink_endofpacket
	wire          sram_10_s2_agent_rdata_fifo_src_valid;                      // sram_10_s2_agent:rdata_fifo_src_valid -> sram_10_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_10_s2_agent_rdata_fifo_src_data;                       // sram_10_s2_agent:rdata_fifo_src_data -> sram_10_s2_agent_rdata_fifo:in_data
	wire          sram_10_s2_agent_rdata_fifo_src_ready;                      // sram_10_s2_agent_rdata_fifo:in_ready -> sram_10_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_11_s2_agent_m0_readdata;                               // sram_11_s2_translator:uav_readdata -> sram_11_s2_agent:m0_readdata
	wire          sram_11_s2_agent_m0_waitrequest;                            // sram_11_s2_translator:uav_waitrequest -> sram_11_s2_agent:m0_waitrequest
	wire          sram_11_s2_agent_m0_debugaccess;                            // sram_11_s2_agent:m0_debugaccess -> sram_11_s2_translator:uav_debugaccess
	wire   [29:0] sram_11_s2_agent_m0_address;                                // sram_11_s2_agent:m0_address -> sram_11_s2_translator:uav_address
	wire    [1:0] sram_11_s2_agent_m0_byteenable;                             // sram_11_s2_agent:m0_byteenable -> sram_11_s2_translator:uav_byteenable
	wire          sram_11_s2_agent_m0_read;                                   // sram_11_s2_agent:m0_read -> sram_11_s2_translator:uav_read
	wire          sram_11_s2_agent_m0_readdatavalid;                          // sram_11_s2_translator:uav_readdatavalid -> sram_11_s2_agent:m0_readdatavalid
	wire          sram_11_s2_agent_m0_lock;                                   // sram_11_s2_agent:m0_lock -> sram_11_s2_translator:uav_lock
	wire   [15:0] sram_11_s2_agent_m0_writedata;                              // sram_11_s2_agent:m0_writedata -> sram_11_s2_translator:uav_writedata
	wire          sram_11_s2_agent_m0_write;                                  // sram_11_s2_agent:m0_write -> sram_11_s2_translator:uav_write
	wire    [1:0] sram_11_s2_agent_m0_burstcount;                             // sram_11_s2_agent:m0_burstcount -> sram_11_s2_translator:uav_burstcount
	wire          sram_11_s2_agent_rf_source_valid;                           // sram_11_s2_agent:rf_source_valid -> sram_11_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_11_s2_agent_rf_source_data;                            // sram_11_s2_agent:rf_source_data -> sram_11_s2_agent_rsp_fifo:in_data
	wire          sram_11_s2_agent_rf_source_ready;                           // sram_11_s2_agent_rsp_fifo:in_ready -> sram_11_s2_agent:rf_source_ready
	wire          sram_11_s2_agent_rf_source_startofpacket;                   // sram_11_s2_agent:rf_source_startofpacket -> sram_11_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_11_s2_agent_rf_source_endofpacket;                     // sram_11_s2_agent:rf_source_endofpacket -> sram_11_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_11_s2_agent_rsp_fifo_out_valid;                        // sram_11_s2_agent_rsp_fifo:out_valid -> sram_11_s2_agent:rf_sink_valid
	wire  [115:0] sram_11_s2_agent_rsp_fifo_out_data;                         // sram_11_s2_agent_rsp_fifo:out_data -> sram_11_s2_agent:rf_sink_data
	wire          sram_11_s2_agent_rsp_fifo_out_ready;                        // sram_11_s2_agent:rf_sink_ready -> sram_11_s2_agent_rsp_fifo:out_ready
	wire          sram_11_s2_agent_rsp_fifo_out_startofpacket;                // sram_11_s2_agent_rsp_fifo:out_startofpacket -> sram_11_s2_agent:rf_sink_startofpacket
	wire          sram_11_s2_agent_rsp_fifo_out_endofpacket;                  // sram_11_s2_agent_rsp_fifo:out_endofpacket -> sram_11_s2_agent:rf_sink_endofpacket
	wire          sram_11_s2_agent_rdata_fifo_src_valid;                      // sram_11_s2_agent:rdata_fifo_src_valid -> sram_11_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_11_s2_agent_rdata_fifo_src_data;                       // sram_11_s2_agent:rdata_fifo_src_data -> sram_11_s2_agent_rdata_fifo:in_data
	wire          sram_11_s2_agent_rdata_fifo_src_ready;                      // sram_11_s2_agent_rdata_fifo:in_ready -> sram_11_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_12_s2_agent_m0_readdata;                               // sram_12_s2_translator:uav_readdata -> sram_12_s2_agent:m0_readdata
	wire          sram_12_s2_agent_m0_waitrequest;                            // sram_12_s2_translator:uav_waitrequest -> sram_12_s2_agent:m0_waitrequest
	wire          sram_12_s2_agent_m0_debugaccess;                            // sram_12_s2_agent:m0_debugaccess -> sram_12_s2_translator:uav_debugaccess
	wire   [29:0] sram_12_s2_agent_m0_address;                                // sram_12_s2_agent:m0_address -> sram_12_s2_translator:uav_address
	wire    [1:0] sram_12_s2_agent_m0_byteenable;                             // sram_12_s2_agent:m0_byteenable -> sram_12_s2_translator:uav_byteenable
	wire          sram_12_s2_agent_m0_read;                                   // sram_12_s2_agent:m0_read -> sram_12_s2_translator:uav_read
	wire          sram_12_s2_agent_m0_readdatavalid;                          // sram_12_s2_translator:uav_readdatavalid -> sram_12_s2_agent:m0_readdatavalid
	wire          sram_12_s2_agent_m0_lock;                                   // sram_12_s2_agent:m0_lock -> sram_12_s2_translator:uav_lock
	wire   [15:0] sram_12_s2_agent_m0_writedata;                              // sram_12_s2_agent:m0_writedata -> sram_12_s2_translator:uav_writedata
	wire          sram_12_s2_agent_m0_write;                                  // sram_12_s2_agent:m0_write -> sram_12_s2_translator:uav_write
	wire    [1:0] sram_12_s2_agent_m0_burstcount;                             // sram_12_s2_agent:m0_burstcount -> sram_12_s2_translator:uav_burstcount
	wire          sram_12_s2_agent_rf_source_valid;                           // sram_12_s2_agent:rf_source_valid -> sram_12_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_12_s2_agent_rf_source_data;                            // sram_12_s2_agent:rf_source_data -> sram_12_s2_agent_rsp_fifo:in_data
	wire          sram_12_s2_agent_rf_source_ready;                           // sram_12_s2_agent_rsp_fifo:in_ready -> sram_12_s2_agent:rf_source_ready
	wire          sram_12_s2_agent_rf_source_startofpacket;                   // sram_12_s2_agent:rf_source_startofpacket -> sram_12_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_12_s2_agent_rf_source_endofpacket;                     // sram_12_s2_agent:rf_source_endofpacket -> sram_12_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_12_s2_agent_rsp_fifo_out_valid;                        // sram_12_s2_agent_rsp_fifo:out_valid -> sram_12_s2_agent:rf_sink_valid
	wire  [115:0] sram_12_s2_agent_rsp_fifo_out_data;                         // sram_12_s2_agent_rsp_fifo:out_data -> sram_12_s2_agent:rf_sink_data
	wire          sram_12_s2_agent_rsp_fifo_out_ready;                        // sram_12_s2_agent:rf_sink_ready -> sram_12_s2_agent_rsp_fifo:out_ready
	wire          sram_12_s2_agent_rsp_fifo_out_startofpacket;                // sram_12_s2_agent_rsp_fifo:out_startofpacket -> sram_12_s2_agent:rf_sink_startofpacket
	wire          sram_12_s2_agent_rsp_fifo_out_endofpacket;                  // sram_12_s2_agent_rsp_fifo:out_endofpacket -> sram_12_s2_agent:rf_sink_endofpacket
	wire          sram_12_s2_agent_rdata_fifo_src_valid;                      // sram_12_s2_agent:rdata_fifo_src_valid -> sram_12_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_12_s2_agent_rdata_fifo_src_data;                       // sram_12_s2_agent:rdata_fifo_src_data -> sram_12_s2_agent_rdata_fifo:in_data
	wire          sram_12_s2_agent_rdata_fifo_src_ready;                      // sram_12_s2_agent_rdata_fifo:in_ready -> sram_12_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_13_s2_agent_m0_readdata;                               // sram_13_s2_translator:uav_readdata -> sram_13_s2_agent:m0_readdata
	wire          sram_13_s2_agent_m0_waitrequest;                            // sram_13_s2_translator:uav_waitrequest -> sram_13_s2_agent:m0_waitrequest
	wire          sram_13_s2_agent_m0_debugaccess;                            // sram_13_s2_agent:m0_debugaccess -> sram_13_s2_translator:uav_debugaccess
	wire   [29:0] sram_13_s2_agent_m0_address;                                // sram_13_s2_agent:m0_address -> sram_13_s2_translator:uav_address
	wire    [1:0] sram_13_s2_agent_m0_byteenable;                             // sram_13_s2_agent:m0_byteenable -> sram_13_s2_translator:uav_byteenable
	wire          sram_13_s2_agent_m0_read;                                   // sram_13_s2_agent:m0_read -> sram_13_s2_translator:uav_read
	wire          sram_13_s2_agent_m0_readdatavalid;                          // sram_13_s2_translator:uav_readdatavalid -> sram_13_s2_agent:m0_readdatavalid
	wire          sram_13_s2_agent_m0_lock;                                   // sram_13_s2_agent:m0_lock -> sram_13_s2_translator:uav_lock
	wire   [15:0] sram_13_s2_agent_m0_writedata;                              // sram_13_s2_agent:m0_writedata -> sram_13_s2_translator:uav_writedata
	wire          sram_13_s2_agent_m0_write;                                  // sram_13_s2_agent:m0_write -> sram_13_s2_translator:uav_write
	wire    [1:0] sram_13_s2_agent_m0_burstcount;                             // sram_13_s2_agent:m0_burstcount -> sram_13_s2_translator:uav_burstcount
	wire          sram_13_s2_agent_rf_source_valid;                           // sram_13_s2_agent:rf_source_valid -> sram_13_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_13_s2_agent_rf_source_data;                            // sram_13_s2_agent:rf_source_data -> sram_13_s2_agent_rsp_fifo:in_data
	wire          sram_13_s2_agent_rf_source_ready;                           // sram_13_s2_agent_rsp_fifo:in_ready -> sram_13_s2_agent:rf_source_ready
	wire          sram_13_s2_agent_rf_source_startofpacket;                   // sram_13_s2_agent:rf_source_startofpacket -> sram_13_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_13_s2_agent_rf_source_endofpacket;                     // sram_13_s2_agent:rf_source_endofpacket -> sram_13_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_13_s2_agent_rsp_fifo_out_valid;                        // sram_13_s2_agent_rsp_fifo:out_valid -> sram_13_s2_agent:rf_sink_valid
	wire  [115:0] sram_13_s2_agent_rsp_fifo_out_data;                         // sram_13_s2_agent_rsp_fifo:out_data -> sram_13_s2_agent:rf_sink_data
	wire          sram_13_s2_agent_rsp_fifo_out_ready;                        // sram_13_s2_agent:rf_sink_ready -> sram_13_s2_agent_rsp_fifo:out_ready
	wire          sram_13_s2_agent_rsp_fifo_out_startofpacket;                // sram_13_s2_agent_rsp_fifo:out_startofpacket -> sram_13_s2_agent:rf_sink_startofpacket
	wire          sram_13_s2_agent_rsp_fifo_out_endofpacket;                  // sram_13_s2_agent_rsp_fifo:out_endofpacket -> sram_13_s2_agent:rf_sink_endofpacket
	wire          sram_13_s2_agent_rdata_fifo_src_valid;                      // sram_13_s2_agent:rdata_fifo_src_valid -> sram_13_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_13_s2_agent_rdata_fifo_src_data;                       // sram_13_s2_agent:rdata_fifo_src_data -> sram_13_s2_agent_rdata_fifo:in_data
	wire          sram_13_s2_agent_rdata_fifo_src_ready;                      // sram_13_s2_agent_rdata_fifo:in_ready -> sram_13_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_14_s2_agent_m0_readdata;                               // sram_14_s2_translator:uav_readdata -> sram_14_s2_agent:m0_readdata
	wire          sram_14_s2_agent_m0_waitrequest;                            // sram_14_s2_translator:uav_waitrequest -> sram_14_s2_agent:m0_waitrequest
	wire          sram_14_s2_agent_m0_debugaccess;                            // sram_14_s2_agent:m0_debugaccess -> sram_14_s2_translator:uav_debugaccess
	wire   [29:0] sram_14_s2_agent_m0_address;                                // sram_14_s2_agent:m0_address -> sram_14_s2_translator:uav_address
	wire    [1:0] sram_14_s2_agent_m0_byteenable;                             // sram_14_s2_agent:m0_byteenable -> sram_14_s2_translator:uav_byteenable
	wire          sram_14_s2_agent_m0_read;                                   // sram_14_s2_agent:m0_read -> sram_14_s2_translator:uav_read
	wire          sram_14_s2_agent_m0_readdatavalid;                          // sram_14_s2_translator:uav_readdatavalid -> sram_14_s2_agent:m0_readdatavalid
	wire          sram_14_s2_agent_m0_lock;                                   // sram_14_s2_agent:m0_lock -> sram_14_s2_translator:uav_lock
	wire   [15:0] sram_14_s2_agent_m0_writedata;                              // sram_14_s2_agent:m0_writedata -> sram_14_s2_translator:uav_writedata
	wire          sram_14_s2_agent_m0_write;                                  // sram_14_s2_agent:m0_write -> sram_14_s2_translator:uav_write
	wire    [1:0] sram_14_s2_agent_m0_burstcount;                             // sram_14_s2_agent:m0_burstcount -> sram_14_s2_translator:uav_burstcount
	wire          sram_14_s2_agent_rf_source_valid;                           // sram_14_s2_agent:rf_source_valid -> sram_14_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_14_s2_agent_rf_source_data;                            // sram_14_s2_agent:rf_source_data -> sram_14_s2_agent_rsp_fifo:in_data
	wire          sram_14_s2_agent_rf_source_ready;                           // sram_14_s2_agent_rsp_fifo:in_ready -> sram_14_s2_agent:rf_source_ready
	wire          sram_14_s2_agent_rf_source_startofpacket;                   // sram_14_s2_agent:rf_source_startofpacket -> sram_14_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_14_s2_agent_rf_source_endofpacket;                     // sram_14_s2_agent:rf_source_endofpacket -> sram_14_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_14_s2_agent_rsp_fifo_out_valid;                        // sram_14_s2_agent_rsp_fifo:out_valid -> sram_14_s2_agent:rf_sink_valid
	wire  [115:0] sram_14_s2_agent_rsp_fifo_out_data;                         // sram_14_s2_agent_rsp_fifo:out_data -> sram_14_s2_agent:rf_sink_data
	wire          sram_14_s2_agent_rsp_fifo_out_ready;                        // sram_14_s2_agent:rf_sink_ready -> sram_14_s2_agent_rsp_fifo:out_ready
	wire          sram_14_s2_agent_rsp_fifo_out_startofpacket;                // sram_14_s2_agent_rsp_fifo:out_startofpacket -> sram_14_s2_agent:rf_sink_startofpacket
	wire          sram_14_s2_agent_rsp_fifo_out_endofpacket;                  // sram_14_s2_agent_rsp_fifo:out_endofpacket -> sram_14_s2_agent:rf_sink_endofpacket
	wire          sram_14_s2_agent_rdata_fifo_src_valid;                      // sram_14_s2_agent:rdata_fifo_src_valid -> sram_14_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_14_s2_agent_rdata_fifo_src_data;                       // sram_14_s2_agent:rdata_fifo_src_data -> sram_14_s2_agent_rdata_fifo:in_data
	wire          sram_14_s2_agent_rdata_fifo_src_ready;                      // sram_14_s2_agent_rdata_fifo:in_ready -> sram_14_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_15_s2_agent_m0_readdata;                               // sram_15_s2_translator:uav_readdata -> sram_15_s2_agent:m0_readdata
	wire          sram_15_s2_agent_m0_waitrequest;                            // sram_15_s2_translator:uav_waitrequest -> sram_15_s2_agent:m0_waitrequest
	wire          sram_15_s2_agent_m0_debugaccess;                            // sram_15_s2_agent:m0_debugaccess -> sram_15_s2_translator:uav_debugaccess
	wire   [29:0] sram_15_s2_agent_m0_address;                                // sram_15_s2_agent:m0_address -> sram_15_s2_translator:uav_address
	wire    [1:0] sram_15_s2_agent_m0_byteenable;                             // sram_15_s2_agent:m0_byteenable -> sram_15_s2_translator:uav_byteenable
	wire          sram_15_s2_agent_m0_read;                                   // sram_15_s2_agent:m0_read -> sram_15_s2_translator:uav_read
	wire          sram_15_s2_agent_m0_readdatavalid;                          // sram_15_s2_translator:uav_readdatavalid -> sram_15_s2_agent:m0_readdatavalid
	wire          sram_15_s2_agent_m0_lock;                                   // sram_15_s2_agent:m0_lock -> sram_15_s2_translator:uav_lock
	wire   [15:0] sram_15_s2_agent_m0_writedata;                              // sram_15_s2_agent:m0_writedata -> sram_15_s2_translator:uav_writedata
	wire          sram_15_s2_agent_m0_write;                                  // sram_15_s2_agent:m0_write -> sram_15_s2_translator:uav_write
	wire    [1:0] sram_15_s2_agent_m0_burstcount;                             // sram_15_s2_agent:m0_burstcount -> sram_15_s2_translator:uav_burstcount
	wire          sram_15_s2_agent_rf_source_valid;                           // sram_15_s2_agent:rf_source_valid -> sram_15_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_15_s2_agent_rf_source_data;                            // sram_15_s2_agent:rf_source_data -> sram_15_s2_agent_rsp_fifo:in_data
	wire          sram_15_s2_agent_rf_source_ready;                           // sram_15_s2_agent_rsp_fifo:in_ready -> sram_15_s2_agent:rf_source_ready
	wire          sram_15_s2_agent_rf_source_startofpacket;                   // sram_15_s2_agent:rf_source_startofpacket -> sram_15_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_15_s2_agent_rf_source_endofpacket;                     // sram_15_s2_agent:rf_source_endofpacket -> sram_15_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_15_s2_agent_rsp_fifo_out_valid;                        // sram_15_s2_agent_rsp_fifo:out_valid -> sram_15_s2_agent:rf_sink_valid
	wire  [115:0] sram_15_s2_agent_rsp_fifo_out_data;                         // sram_15_s2_agent_rsp_fifo:out_data -> sram_15_s2_agent:rf_sink_data
	wire          sram_15_s2_agent_rsp_fifo_out_ready;                        // sram_15_s2_agent:rf_sink_ready -> sram_15_s2_agent_rsp_fifo:out_ready
	wire          sram_15_s2_agent_rsp_fifo_out_startofpacket;                // sram_15_s2_agent_rsp_fifo:out_startofpacket -> sram_15_s2_agent:rf_sink_startofpacket
	wire          sram_15_s2_agent_rsp_fifo_out_endofpacket;                  // sram_15_s2_agent_rsp_fifo:out_endofpacket -> sram_15_s2_agent:rf_sink_endofpacket
	wire          sram_15_s2_agent_rdata_fifo_src_valid;                      // sram_15_s2_agent:rdata_fifo_src_valid -> sram_15_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_15_s2_agent_rdata_fifo_src_data;                       // sram_15_s2_agent:rdata_fifo_src_data -> sram_15_s2_agent_rdata_fifo:in_data
	wire          sram_15_s2_agent_rdata_fifo_src_ready;                      // sram_15_s2_agent_rdata_fifo:in_ready -> sram_15_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_16_s2_agent_m0_readdata;                               // sram_16_s2_translator:uav_readdata -> sram_16_s2_agent:m0_readdata
	wire          sram_16_s2_agent_m0_waitrequest;                            // sram_16_s2_translator:uav_waitrequest -> sram_16_s2_agent:m0_waitrequest
	wire          sram_16_s2_agent_m0_debugaccess;                            // sram_16_s2_agent:m0_debugaccess -> sram_16_s2_translator:uav_debugaccess
	wire   [29:0] sram_16_s2_agent_m0_address;                                // sram_16_s2_agent:m0_address -> sram_16_s2_translator:uav_address
	wire    [1:0] sram_16_s2_agent_m0_byteenable;                             // sram_16_s2_agent:m0_byteenable -> sram_16_s2_translator:uav_byteenable
	wire          sram_16_s2_agent_m0_read;                                   // sram_16_s2_agent:m0_read -> sram_16_s2_translator:uav_read
	wire          sram_16_s2_agent_m0_readdatavalid;                          // sram_16_s2_translator:uav_readdatavalid -> sram_16_s2_agent:m0_readdatavalid
	wire          sram_16_s2_agent_m0_lock;                                   // sram_16_s2_agent:m0_lock -> sram_16_s2_translator:uav_lock
	wire   [15:0] sram_16_s2_agent_m0_writedata;                              // sram_16_s2_agent:m0_writedata -> sram_16_s2_translator:uav_writedata
	wire          sram_16_s2_agent_m0_write;                                  // sram_16_s2_agent:m0_write -> sram_16_s2_translator:uav_write
	wire    [1:0] sram_16_s2_agent_m0_burstcount;                             // sram_16_s2_agent:m0_burstcount -> sram_16_s2_translator:uav_burstcount
	wire          sram_16_s2_agent_rf_source_valid;                           // sram_16_s2_agent:rf_source_valid -> sram_16_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_16_s2_agent_rf_source_data;                            // sram_16_s2_agent:rf_source_data -> sram_16_s2_agent_rsp_fifo:in_data
	wire          sram_16_s2_agent_rf_source_ready;                           // sram_16_s2_agent_rsp_fifo:in_ready -> sram_16_s2_agent:rf_source_ready
	wire          sram_16_s2_agent_rf_source_startofpacket;                   // sram_16_s2_agent:rf_source_startofpacket -> sram_16_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_16_s2_agent_rf_source_endofpacket;                     // sram_16_s2_agent:rf_source_endofpacket -> sram_16_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_16_s2_agent_rsp_fifo_out_valid;                        // sram_16_s2_agent_rsp_fifo:out_valid -> sram_16_s2_agent:rf_sink_valid
	wire  [115:0] sram_16_s2_agent_rsp_fifo_out_data;                         // sram_16_s2_agent_rsp_fifo:out_data -> sram_16_s2_agent:rf_sink_data
	wire          sram_16_s2_agent_rsp_fifo_out_ready;                        // sram_16_s2_agent:rf_sink_ready -> sram_16_s2_agent_rsp_fifo:out_ready
	wire          sram_16_s2_agent_rsp_fifo_out_startofpacket;                // sram_16_s2_agent_rsp_fifo:out_startofpacket -> sram_16_s2_agent:rf_sink_startofpacket
	wire          sram_16_s2_agent_rsp_fifo_out_endofpacket;                  // sram_16_s2_agent_rsp_fifo:out_endofpacket -> sram_16_s2_agent:rf_sink_endofpacket
	wire          sram_16_s2_agent_rdata_fifo_src_valid;                      // sram_16_s2_agent:rdata_fifo_src_valid -> sram_16_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_16_s2_agent_rdata_fifo_src_data;                       // sram_16_s2_agent:rdata_fifo_src_data -> sram_16_s2_agent_rdata_fifo:in_data
	wire          sram_16_s2_agent_rdata_fifo_src_ready;                      // sram_16_s2_agent_rdata_fifo:in_ready -> sram_16_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_17_s2_agent_m0_readdata;                               // sram_17_s2_translator:uav_readdata -> sram_17_s2_agent:m0_readdata
	wire          sram_17_s2_agent_m0_waitrequest;                            // sram_17_s2_translator:uav_waitrequest -> sram_17_s2_agent:m0_waitrequest
	wire          sram_17_s2_agent_m0_debugaccess;                            // sram_17_s2_agent:m0_debugaccess -> sram_17_s2_translator:uav_debugaccess
	wire   [29:0] sram_17_s2_agent_m0_address;                                // sram_17_s2_agent:m0_address -> sram_17_s2_translator:uav_address
	wire    [1:0] sram_17_s2_agent_m0_byteenable;                             // sram_17_s2_agent:m0_byteenable -> sram_17_s2_translator:uav_byteenable
	wire          sram_17_s2_agent_m0_read;                                   // sram_17_s2_agent:m0_read -> sram_17_s2_translator:uav_read
	wire          sram_17_s2_agent_m0_readdatavalid;                          // sram_17_s2_translator:uav_readdatavalid -> sram_17_s2_agent:m0_readdatavalid
	wire          sram_17_s2_agent_m0_lock;                                   // sram_17_s2_agent:m0_lock -> sram_17_s2_translator:uav_lock
	wire   [15:0] sram_17_s2_agent_m0_writedata;                              // sram_17_s2_agent:m0_writedata -> sram_17_s2_translator:uav_writedata
	wire          sram_17_s2_agent_m0_write;                                  // sram_17_s2_agent:m0_write -> sram_17_s2_translator:uav_write
	wire    [1:0] sram_17_s2_agent_m0_burstcount;                             // sram_17_s2_agent:m0_burstcount -> sram_17_s2_translator:uav_burstcount
	wire          sram_17_s2_agent_rf_source_valid;                           // sram_17_s2_agent:rf_source_valid -> sram_17_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_17_s2_agent_rf_source_data;                            // sram_17_s2_agent:rf_source_data -> sram_17_s2_agent_rsp_fifo:in_data
	wire          sram_17_s2_agent_rf_source_ready;                           // sram_17_s2_agent_rsp_fifo:in_ready -> sram_17_s2_agent:rf_source_ready
	wire          sram_17_s2_agent_rf_source_startofpacket;                   // sram_17_s2_agent:rf_source_startofpacket -> sram_17_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_17_s2_agent_rf_source_endofpacket;                     // sram_17_s2_agent:rf_source_endofpacket -> sram_17_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_17_s2_agent_rsp_fifo_out_valid;                        // sram_17_s2_agent_rsp_fifo:out_valid -> sram_17_s2_agent:rf_sink_valid
	wire  [115:0] sram_17_s2_agent_rsp_fifo_out_data;                         // sram_17_s2_agent_rsp_fifo:out_data -> sram_17_s2_agent:rf_sink_data
	wire          sram_17_s2_agent_rsp_fifo_out_ready;                        // sram_17_s2_agent:rf_sink_ready -> sram_17_s2_agent_rsp_fifo:out_ready
	wire          sram_17_s2_agent_rsp_fifo_out_startofpacket;                // sram_17_s2_agent_rsp_fifo:out_startofpacket -> sram_17_s2_agent:rf_sink_startofpacket
	wire          sram_17_s2_agent_rsp_fifo_out_endofpacket;                  // sram_17_s2_agent_rsp_fifo:out_endofpacket -> sram_17_s2_agent:rf_sink_endofpacket
	wire          sram_17_s2_agent_rdata_fifo_src_valid;                      // sram_17_s2_agent:rdata_fifo_src_valid -> sram_17_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_17_s2_agent_rdata_fifo_src_data;                       // sram_17_s2_agent:rdata_fifo_src_data -> sram_17_s2_agent_rdata_fifo:in_data
	wire          sram_17_s2_agent_rdata_fifo_src_ready;                      // sram_17_s2_agent_rdata_fifo:in_ready -> sram_17_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_18_s2_agent_m0_readdata;                               // sram_18_s2_translator:uav_readdata -> sram_18_s2_agent:m0_readdata
	wire          sram_18_s2_agent_m0_waitrequest;                            // sram_18_s2_translator:uav_waitrequest -> sram_18_s2_agent:m0_waitrequest
	wire          sram_18_s2_agent_m0_debugaccess;                            // sram_18_s2_agent:m0_debugaccess -> sram_18_s2_translator:uav_debugaccess
	wire   [29:0] sram_18_s2_agent_m0_address;                                // sram_18_s2_agent:m0_address -> sram_18_s2_translator:uav_address
	wire    [1:0] sram_18_s2_agent_m0_byteenable;                             // sram_18_s2_agent:m0_byteenable -> sram_18_s2_translator:uav_byteenable
	wire          sram_18_s2_agent_m0_read;                                   // sram_18_s2_agent:m0_read -> sram_18_s2_translator:uav_read
	wire          sram_18_s2_agent_m0_readdatavalid;                          // sram_18_s2_translator:uav_readdatavalid -> sram_18_s2_agent:m0_readdatavalid
	wire          sram_18_s2_agent_m0_lock;                                   // sram_18_s2_agent:m0_lock -> sram_18_s2_translator:uav_lock
	wire   [15:0] sram_18_s2_agent_m0_writedata;                              // sram_18_s2_agent:m0_writedata -> sram_18_s2_translator:uav_writedata
	wire          sram_18_s2_agent_m0_write;                                  // sram_18_s2_agent:m0_write -> sram_18_s2_translator:uav_write
	wire    [1:0] sram_18_s2_agent_m0_burstcount;                             // sram_18_s2_agent:m0_burstcount -> sram_18_s2_translator:uav_burstcount
	wire          sram_18_s2_agent_rf_source_valid;                           // sram_18_s2_agent:rf_source_valid -> sram_18_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_18_s2_agent_rf_source_data;                            // sram_18_s2_agent:rf_source_data -> sram_18_s2_agent_rsp_fifo:in_data
	wire          sram_18_s2_agent_rf_source_ready;                           // sram_18_s2_agent_rsp_fifo:in_ready -> sram_18_s2_agent:rf_source_ready
	wire          sram_18_s2_agent_rf_source_startofpacket;                   // sram_18_s2_agent:rf_source_startofpacket -> sram_18_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_18_s2_agent_rf_source_endofpacket;                     // sram_18_s2_agent:rf_source_endofpacket -> sram_18_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_18_s2_agent_rsp_fifo_out_valid;                        // sram_18_s2_agent_rsp_fifo:out_valid -> sram_18_s2_agent:rf_sink_valid
	wire  [115:0] sram_18_s2_agent_rsp_fifo_out_data;                         // sram_18_s2_agent_rsp_fifo:out_data -> sram_18_s2_agent:rf_sink_data
	wire          sram_18_s2_agent_rsp_fifo_out_ready;                        // sram_18_s2_agent:rf_sink_ready -> sram_18_s2_agent_rsp_fifo:out_ready
	wire          sram_18_s2_agent_rsp_fifo_out_startofpacket;                // sram_18_s2_agent_rsp_fifo:out_startofpacket -> sram_18_s2_agent:rf_sink_startofpacket
	wire          sram_18_s2_agent_rsp_fifo_out_endofpacket;                  // sram_18_s2_agent_rsp_fifo:out_endofpacket -> sram_18_s2_agent:rf_sink_endofpacket
	wire          sram_18_s2_agent_rdata_fifo_src_valid;                      // sram_18_s2_agent:rdata_fifo_src_valid -> sram_18_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_18_s2_agent_rdata_fifo_src_data;                       // sram_18_s2_agent:rdata_fifo_src_data -> sram_18_s2_agent_rdata_fifo:in_data
	wire          sram_18_s2_agent_rdata_fifo_src_ready;                      // sram_18_s2_agent_rdata_fifo:in_ready -> sram_18_s2_agent:rdata_fifo_src_ready
	wire   [15:0] sram_19_s2_agent_m0_readdata;                               // sram_19_s2_translator:uav_readdata -> sram_19_s2_agent:m0_readdata
	wire          sram_19_s2_agent_m0_waitrequest;                            // sram_19_s2_translator:uav_waitrequest -> sram_19_s2_agent:m0_waitrequest
	wire          sram_19_s2_agent_m0_debugaccess;                            // sram_19_s2_agent:m0_debugaccess -> sram_19_s2_translator:uav_debugaccess
	wire   [29:0] sram_19_s2_agent_m0_address;                                // sram_19_s2_agent:m0_address -> sram_19_s2_translator:uav_address
	wire    [1:0] sram_19_s2_agent_m0_byteenable;                             // sram_19_s2_agent:m0_byteenable -> sram_19_s2_translator:uav_byteenable
	wire          sram_19_s2_agent_m0_read;                                   // sram_19_s2_agent:m0_read -> sram_19_s2_translator:uav_read
	wire          sram_19_s2_agent_m0_readdatavalid;                          // sram_19_s2_translator:uav_readdatavalid -> sram_19_s2_agent:m0_readdatavalid
	wire          sram_19_s2_agent_m0_lock;                                   // sram_19_s2_agent:m0_lock -> sram_19_s2_translator:uav_lock
	wire   [15:0] sram_19_s2_agent_m0_writedata;                              // sram_19_s2_agent:m0_writedata -> sram_19_s2_translator:uav_writedata
	wire          sram_19_s2_agent_m0_write;                                  // sram_19_s2_agent:m0_write -> sram_19_s2_translator:uav_write
	wire    [1:0] sram_19_s2_agent_m0_burstcount;                             // sram_19_s2_agent:m0_burstcount -> sram_19_s2_translator:uav_burstcount
	wire          sram_19_s2_agent_rf_source_valid;                           // sram_19_s2_agent:rf_source_valid -> sram_19_s2_agent_rsp_fifo:in_valid
	wire  [115:0] sram_19_s2_agent_rf_source_data;                            // sram_19_s2_agent:rf_source_data -> sram_19_s2_agent_rsp_fifo:in_data
	wire          sram_19_s2_agent_rf_source_ready;                           // sram_19_s2_agent_rsp_fifo:in_ready -> sram_19_s2_agent:rf_source_ready
	wire          sram_19_s2_agent_rf_source_startofpacket;                   // sram_19_s2_agent:rf_source_startofpacket -> sram_19_s2_agent_rsp_fifo:in_startofpacket
	wire          sram_19_s2_agent_rf_source_endofpacket;                     // sram_19_s2_agent:rf_source_endofpacket -> sram_19_s2_agent_rsp_fifo:in_endofpacket
	wire          sram_19_s2_agent_rsp_fifo_out_valid;                        // sram_19_s2_agent_rsp_fifo:out_valid -> sram_19_s2_agent:rf_sink_valid
	wire  [115:0] sram_19_s2_agent_rsp_fifo_out_data;                         // sram_19_s2_agent_rsp_fifo:out_data -> sram_19_s2_agent:rf_sink_data
	wire          sram_19_s2_agent_rsp_fifo_out_ready;                        // sram_19_s2_agent:rf_sink_ready -> sram_19_s2_agent_rsp_fifo:out_ready
	wire          sram_19_s2_agent_rsp_fifo_out_startofpacket;                // sram_19_s2_agent_rsp_fifo:out_startofpacket -> sram_19_s2_agent:rf_sink_startofpacket
	wire          sram_19_s2_agent_rsp_fifo_out_endofpacket;                  // sram_19_s2_agent_rsp_fifo:out_endofpacket -> sram_19_s2_agent:rf_sink_endofpacket
	wire          sram_19_s2_agent_rdata_fifo_src_valid;                      // sram_19_s2_agent:rdata_fifo_src_valid -> sram_19_s2_agent_rdata_fifo:in_valid
	wire   [17:0] sram_19_s2_agent_rdata_fifo_src_data;                       // sram_19_s2_agent:rdata_fifo_src_data -> sram_19_s2_agent_rdata_fifo:in_data
	wire          sram_19_s2_agent_rdata_fifo_src_ready;                      // sram_19_s2_agent_rdata_fifo:in_ready -> sram_19_s2_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;             // ARM_A9_HPS_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [240:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;              // ARM_A9_HPS_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;             // router:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;     // ARM_A9_HPS_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;       // ARM_A9_HPS_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;              // ARM_A9_HPS_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [240:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;               // ARM_A9_HPS_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;              // router_001:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;      // ARM_A9_HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;        // ARM_A9_HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          inst_sram_s2_agent_rp_valid;                                // inst_sram_s2_agent:rp_valid -> router_002:sink_valid
	wire  [240:0] inst_sram_s2_agent_rp_data;                                 // inst_sram_s2_agent:rp_data -> router_002:sink_data
	wire          inst_sram_s2_agent_rp_ready;                                // router_002:sink_ready -> inst_sram_s2_agent:rp_ready
	wire          inst_sram_s2_agent_rp_startofpacket;                        // inst_sram_s2_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          inst_sram_s2_agent_rp_endofpacket;                          // inst_sram_s2_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                       // router_002:src_valid -> rsp_demux:sink_valid
	wire  [240:0] router_002_src_data;                                        // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                       // rsp_demux:sink_ready -> router_002:src_ready
	wire   [20:0] router_002_src_channel;                                     // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                               // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                 // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sram_0_s2_agent_rp_valid;                                   // sram_0_s2_agent:rp_valid -> router_003:sink_valid
	wire  [114:0] sram_0_s2_agent_rp_data;                                    // sram_0_s2_agent:rp_data -> router_003:sink_data
	wire          sram_0_s2_agent_rp_ready;                                   // router_003:sink_ready -> sram_0_s2_agent:rp_ready
	wire          sram_0_s2_agent_rp_startofpacket;                           // sram_0_s2_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sram_0_s2_agent_rp_endofpacket;                             // sram_0_s2_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sram_1_s2_agent_rp_valid;                                   // sram_1_s2_agent:rp_valid -> router_004:sink_valid
	wire  [114:0] sram_1_s2_agent_rp_data;                                    // sram_1_s2_agent:rp_data -> router_004:sink_data
	wire          sram_1_s2_agent_rp_ready;                                   // router_004:sink_ready -> sram_1_s2_agent:rp_ready
	wire          sram_1_s2_agent_rp_startofpacket;                           // sram_1_s2_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sram_1_s2_agent_rp_endofpacket;                             // sram_1_s2_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          sram_2_s2_agent_rp_valid;                                   // sram_2_s2_agent:rp_valid -> router_005:sink_valid
	wire  [114:0] sram_2_s2_agent_rp_data;                                    // sram_2_s2_agent:rp_data -> router_005:sink_data
	wire          sram_2_s2_agent_rp_ready;                                   // router_005:sink_ready -> sram_2_s2_agent:rp_ready
	wire          sram_2_s2_agent_rp_startofpacket;                           // sram_2_s2_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sram_2_s2_agent_rp_endofpacket;                             // sram_2_s2_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          sram_3_s2_agent_rp_valid;                                   // sram_3_s2_agent:rp_valid -> router_006:sink_valid
	wire  [114:0] sram_3_s2_agent_rp_data;                                    // sram_3_s2_agent:rp_data -> router_006:sink_data
	wire          sram_3_s2_agent_rp_ready;                                   // router_006:sink_ready -> sram_3_s2_agent:rp_ready
	wire          sram_3_s2_agent_rp_startofpacket;                           // sram_3_s2_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sram_3_s2_agent_rp_endofpacket;                             // sram_3_s2_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          sram_4_s2_agent_rp_valid;                                   // sram_4_s2_agent:rp_valid -> router_007:sink_valid
	wire  [114:0] sram_4_s2_agent_rp_data;                                    // sram_4_s2_agent:rp_data -> router_007:sink_data
	wire          sram_4_s2_agent_rp_ready;                                   // router_007:sink_ready -> sram_4_s2_agent:rp_ready
	wire          sram_4_s2_agent_rp_startofpacket;                           // sram_4_s2_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sram_4_s2_agent_rp_endofpacket;                             // sram_4_s2_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          sram_5_s2_agent_rp_valid;                                   // sram_5_s2_agent:rp_valid -> router_008:sink_valid
	wire  [114:0] sram_5_s2_agent_rp_data;                                    // sram_5_s2_agent:rp_data -> router_008:sink_data
	wire          sram_5_s2_agent_rp_ready;                                   // router_008:sink_ready -> sram_5_s2_agent:rp_ready
	wire          sram_5_s2_agent_rp_startofpacket;                           // sram_5_s2_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sram_5_s2_agent_rp_endofpacket;                             // sram_5_s2_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          sram_6_s2_agent_rp_valid;                                   // sram_6_s2_agent:rp_valid -> router_009:sink_valid
	wire  [114:0] sram_6_s2_agent_rp_data;                                    // sram_6_s2_agent:rp_data -> router_009:sink_data
	wire          sram_6_s2_agent_rp_ready;                                   // router_009:sink_ready -> sram_6_s2_agent:rp_ready
	wire          sram_6_s2_agent_rp_startofpacket;                           // sram_6_s2_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sram_6_s2_agent_rp_endofpacket;                             // sram_6_s2_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          sram_7_s2_agent_rp_valid;                                   // sram_7_s2_agent:rp_valid -> router_010:sink_valid
	wire  [114:0] sram_7_s2_agent_rp_data;                                    // sram_7_s2_agent:rp_data -> router_010:sink_data
	wire          sram_7_s2_agent_rp_ready;                                   // router_010:sink_ready -> sram_7_s2_agent:rp_ready
	wire          sram_7_s2_agent_rp_startofpacket;                           // sram_7_s2_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sram_7_s2_agent_rp_endofpacket;                             // sram_7_s2_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          sram_8_s2_agent_rp_valid;                                   // sram_8_s2_agent:rp_valid -> router_011:sink_valid
	wire  [114:0] sram_8_s2_agent_rp_data;                                    // sram_8_s2_agent:rp_data -> router_011:sink_data
	wire          sram_8_s2_agent_rp_ready;                                   // router_011:sink_ready -> sram_8_s2_agent:rp_ready
	wire          sram_8_s2_agent_rp_startofpacket;                           // sram_8_s2_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sram_8_s2_agent_rp_endofpacket;                             // sram_8_s2_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          sram_9_s2_agent_rp_valid;                                   // sram_9_s2_agent:rp_valid -> router_012:sink_valid
	wire  [114:0] sram_9_s2_agent_rp_data;                                    // sram_9_s2_agent:rp_data -> router_012:sink_data
	wire          sram_9_s2_agent_rp_ready;                                   // router_012:sink_ready -> sram_9_s2_agent:rp_ready
	wire          sram_9_s2_agent_rp_startofpacket;                           // sram_9_s2_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          sram_9_s2_agent_rp_endofpacket;                             // sram_9_s2_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          sram_10_s2_agent_rp_valid;                                  // sram_10_s2_agent:rp_valid -> router_013:sink_valid
	wire  [114:0] sram_10_s2_agent_rp_data;                                   // sram_10_s2_agent:rp_data -> router_013:sink_data
	wire          sram_10_s2_agent_rp_ready;                                  // router_013:sink_ready -> sram_10_s2_agent:rp_ready
	wire          sram_10_s2_agent_rp_startofpacket;                          // sram_10_s2_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sram_10_s2_agent_rp_endofpacket;                            // sram_10_s2_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          sram_11_s2_agent_rp_valid;                                  // sram_11_s2_agent:rp_valid -> router_014:sink_valid
	wire  [114:0] sram_11_s2_agent_rp_data;                                   // sram_11_s2_agent:rp_data -> router_014:sink_data
	wire          sram_11_s2_agent_rp_ready;                                  // router_014:sink_ready -> sram_11_s2_agent:rp_ready
	wire          sram_11_s2_agent_rp_startofpacket;                          // sram_11_s2_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          sram_11_s2_agent_rp_endofpacket;                            // sram_11_s2_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          sram_12_s2_agent_rp_valid;                                  // sram_12_s2_agent:rp_valid -> router_015:sink_valid
	wire  [114:0] sram_12_s2_agent_rp_data;                                   // sram_12_s2_agent:rp_data -> router_015:sink_data
	wire          sram_12_s2_agent_rp_ready;                                  // router_015:sink_ready -> sram_12_s2_agent:rp_ready
	wire          sram_12_s2_agent_rp_startofpacket;                          // sram_12_s2_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          sram_12_s2_agent_rp_endofpacket;                            // sram_12_s2_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          sram_13_s2_agent_rp_valid;                                  // sram_13_s2_agent:rp_valid -> router_016:sink_valid
	wire  [114:0] sram_13_s2_agent_rp_data;                                   // sram_13_s2_agent:rp_data -> router_016:sink_data
	wire          sram_13_s2_agent_rp_ready;                                  // router_016:sink_ready -> sram_13_s2_agent:rp_ready
	wire          sram_13_s2_agent_rp_startofpacket;                          // sram_13_s2_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          sram_13_s2_agent_rp_endofpacket;                            // sram_13_s2_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          sram_14_s2_agent_rp_valid;                                  // sram_14_s2_agent:rp_valid -> router_017:sink_valid
	wire  [114:0] sram_14_s2_agent_rp_data;                                   // sram_14_s2_agent:rp_data -> router_017:sink_data
	wire          sram_14_s2_agent_rp_ready;                                  // router_017:sink_ready -> sram_14_s2_agent:rp_ready
	wire          sram_14_s2_agent_rp_startofpacket;                          // sram_14_s2_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          sram_14_s2_agent_rp_endofpacket;                            // sram_14_s2_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          sram_15_s2_agent_rp_valid;                                  // sram_15_s2_agent:rp_valid -> router_018:sink_valid
	wire  [114:0] sram_15_s2_agent_rp_data;                                   // sram_15_s2_agent:rp_data -> router_018:sink_data
	wire          sram_15_s2_agent_rp_ready;                                  // router_018:sink_ready -> sram_15_s2_agent:rp_ready
	wire          sram_15_s2_agent_rp_startofpacket;                          // sram_15_s2_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          sram_15_s2_agent_rp_endofpacket;                            // sram_15_s2_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          sram_16_s2_agent_rp_valid;                                  // sram_16_s2_agent:rp_valid -> router_019:sink_valid
	wire  [114:0] sram_16_s2_agent_rp_data;                                   // sram_16_s2_agent:rp_data -> router_019:sink_data
	wire          sram_16_s2_agent_rp_ready;                                  // router_019:sink_ready -> sram_16_s2_agent:rp_ready
	wire          sram_16_s2_agent_rp_startofpacket;                          // sram_16_s2_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          sram_16_s2_agent_rp_endofpacket;                            // sram_16_s2_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          sram_17_s2_agent_rp_valid;                                  // sram_17_s2_agent:rp_valid -> router_020:sink_valid
	wire  [114:0] sram_17_s2_agent_rp_data;                                   // sram_17_s2_agent:rp_data -> router_020:sink_data
	wire          sram_17_s2_agent_rp_ready;                                  // router_020:sink_ready -> sram_17_s2_agent:rp_ready
	wire          sram_17_s2_agent_rp_startofpacket;                          // sram_17_s2_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          sram_17_s2_agent_rp_endofpacket;                            // sram_17_s2_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          sram_18_s2_agent_rp_valid;                                  // sram_18_s2_agent:rp_valid -> router_021:sink_valid
	wire  [114:0] sram_18_s2_agent_rp_data;                                   // sram_18_s2_agent:rp_data -> router_021:sink_data
	wire          sram_18_s2_agent_rp_ready;                                  // router_021:sink_ready -> sram_18_s2_agent:rp_ready
	wire          sram_18_s2_agent_rp_startofpacket;                          // sram_18_s2_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          sram_18_s2_agent_rp_endofpacket;                            // sram_18_s2_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          sram_19_s2_agent_rp_valid;                                  // sram_19_s2_agent:rp_valid -> router_022:sink_valid
	wire  [114:0] sram_19_s2_agent_rp_data;                                   // sram_19_s2_agent:rp_data -> router_022:sink_data
	wire          sram_19_s2_agent_rp_ready;                                  // router_022:sink_ready -> sram_19_s2_agent:rp_ready
	wire          sram_19_s2_agent_rp_startofpacket;                          // sram_19_s2_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          sram_19_s2_agent_rp_endofpacket;                            // sram_19_s2_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_src_valid;                                           // router:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [240:0] router_src_data;                                            // router:src_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                           // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [20:0] router_src_channel;                                         // router:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                   // router:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                     // router:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [240:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data;          // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready;         // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [20:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel;       // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                          // rsp_mux:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [240:0] rsp_mux_src_data;                                           // rsp_mux:src_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                          // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [20:0] rsp_mux_src_channel;                                        // rsp_mux:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                  // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                    // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid;         // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_valid
	wire  [240:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data;          // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready;         // ARM_A9_HPS_h2f_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [20:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel;       // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                       // router_001:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [240:0] router_001_src_data;                                        // router_001:src_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                       // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [20:0] router_001_src_channel;                                     // router_001:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                               // router_001:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                 // router_001:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [240:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data;          // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready;         // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [20:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel;       // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                      // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [240:0] rsp_mux_001_src_data;                                       // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                      // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [20:0] rsp_mux_001_src_channel;                                    // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                              // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid;         // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_valid
	wire  [240:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data;          // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready;         // ARM_A9_HPS_h2f_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [20:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel;       // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                          // cmd_mux:src_valid -> inst_sram_s2_burst_adapter:sink0_valid
	wire  [240:0] cmd_mux_src_data;                                           // cmd_mux:src_data -> inst_sram_s2_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                          // inst_sram_s2_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [20:0] cmd_mux_src_channel;                                        // cmd_mux:src_channel -> inst_sram_s2_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                  // cmd_mux:src_startofpacket -> inst_sram_s2_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                    // cmd_mux:src_endofpacket -> inst_sram_s2_burst_adapter:sink0_endofpacket
	wire          inst_sram_s2_burst_adapter_source0_valid;                   // inst_sram_s2_burst_adapter:source0_valid -> inst_sram_s2_agent:cp_valid
	wire  [240:0] inst_sram_s2_burst_adapter_source0_data;                    // inst_sram_s2_burst_adapter:source0_data -> inst_sram_s2_agent:cp_data
	wire          inst_sram_s2_burst_adapter_source0_ready;                   // inst_sram_s2_agent:cp_ready -> inst_sram_s2_burst_adapter:source0_ready
	wire   [20:0] inst_sram_s2_burst_adapter_source0_channel;                 // inst_sram_s2_burst_adapter:source0_channel -> inst_sram_s2_agent:cp_channel
	wire          inst_sram_s2_burst_adapter_source0_startofpacket;           // inst_sram_s2_burst_adapter:source0_startofpacket -> inst_sram_s2_agent:cp_startofpacket
	wire          inst_sram_s2_burst_adapter_source0_endofpacket;             // inst_sram_s2_burst_adapter:source0_endofpacket -> inst_sram_s2_agent:cp_endofpacket
	wire          sram_0_s2_burst_adapter_source0_valid;                      // sram_0_s2_burst_adapter:source0_valid -> sram_0_s2_agent:cp_valid
	wire  [114:0] sram_0_s2_burst_adapter_source0_data;                       // sram_0_s2_burst_adapter:source0_data -> sram_0_s2_agent:cp_data
	wire          sram_0_s2_burst_adapter_source0_ready;                      // sram_0_s2_agent:cp_ready -> sram_0_s2_burst_adapter:source0_ready
	wire   [20:0] sram_0_s2_burst_adapter_source0_channel;                    // sram_0_s2_burst_adapter:source0_channel -> sram_0_s2_agent:cp_channel
	wire          sram_0_s2_burst_adapter_source0_startofpacket;              // sram_0_s2_burst_adapter:source0_startofpacket -> sram_0_s2_agent:cp_startofpacket
	wire          sram_0_s2_burst_adapter_source0_endofpacket;                // sram_0_s2_burst_adapter:source0_endofpacket -> sram_0_s2_agent:cp_endofpacket
	wire          sram_1_s2_burst_adapter_source0_valid;                      // sram_1_s2_burst_adapter:source0_valid -> sram_1_s2_agent:cp_valid
	wire  [114:0] sram_1_s2_burst_adapter_source0_data;                       // sram_1_s2_burst_adapter:source0_data -> sram_1_s2_agent:cp_data
	wire          sram_1_s2_burst_adapter_source0_ready;                      // sram_1_s2_agent:cp_ready -> sram_1_s2_burst_adapter:source0_ready
	wire   [20:0] sram_1_s2_burst_adapter_source0_channel;                    // sram_1_s2_burst_adapter:source0_channel -> sram_1_s2_agent:cp_channel
	wire          sram_1_s2_burst_adapter_source0_startofpacket;              // sram_1_s2_burst_adapter:source0_startofpacket -> sram_1_s2_agent:cp_startofpacket
	wire          sram_1_s2_burst_adapter_source0_endofpacket;                // sram_1_s2_burst_adapter:source0_endofpacket -> sram_1_s2_agent:cp_endofpacket
	wire          sram_2_s2_burst_adapter_source0_valid;                      // sram_2_s2_burst_adapter:source0_valid -> sram_2_s2_agent:cp_valid
	wire  [114:0] sram_2_s2_burst_adapter_source0_data;                       // sram_2_s2_burst_adapter:source0_data -> sram_2_s2_agent:cp_data
	wire          sram_2_s2_burst_adapter_source0_ready;                      // sram_2_s2_agent:cp_ready -> sram_2_s2_burst_adapter:source0_ready
	wire   [20:0] sram_2_s2_burst_adapter_source0_channel;                    // sram_2_s2_burst_adapter:source0_channel -> sram_2_s2_agent:cp_channel
	wire          sram_2_s2_burst_adapter_source0_startofpacket;              // sram_2_s2_burst_adapter:source0_startofpacket -> sram_2_s2_agent:cp_startofpacket
	wire          sram_2_s2_burst_adapter_source0_endofpacket;                // sram_2_s2_burst_adapter:source0_endofpacket -> sram_2_s2_agent:cp_endofpacket
	wire          sram_3_s2_burst_adapter_source0_valid;                      // sram_3_s2_burst_adapter:source0_valid -> sram_3_s2_agent:cp_valid
	wire  [114:0] sram_3_s2_burst_adapter_source0_data;                       // sram_3_s2_burst_adapter:source0_data -> sram_3_s2_agent:cp_data
	wire          sram_3_s2_burst_adapter_source0_ready;                      // sram_3_s2_agent:cp_ready -> sram_3_s2_burst_adapter:source0_ready
	wire   [20:0] sram_3_s2_burst_adapter_source0_channel;                    // sram_3_s2_burst_adapter:source0_channel -> sram_3_s2_agent:cp_channel
	wire          sram_3_s2_burst_adapter_source0_startofpacket;              // sram_3_s2_burst_adapter:source0_startofpacket -> sram_3_s2_agent:cp_startofpacket
	wire          sram_3_s2_burst_adapter_source0_endofpacket;                // sram_3_s2_burst_adapter:source0_endofpacket -> sram_3_s2_agent:cp_endofpacket
	wire          sram_4_s2_burst_adapter_source0_valid;                      // sram_4_s2_burst_adapter:source0_valid -> sram_4_s2_agent:cp_valid
	wire  [114:0] sram_4_s2_burst_adapter_source0_data;                       // sram_4_s2_burst_adapter:source0_data -> sram_4_s2_agent:cp_data
	wire          sram_4_s2_burst_adapter_source0_ready;                      // sram_4_s2_agent:cp_ready -> sram_4_s2_burst_adapter:source0_ready
	wire   [20:0] sram_4_s2_burst_adapter_source0_channel;                    // sram_4_s2_burst_adapter:source0_channel -> sram_4_s2_agent:cp_channel
	wire          sram_4_s2_burst_adapter_source0_startofpacket;              // sram_4_s2_burst_adapter:source0_startofpacket -> sram_4_s2_agent:cp_startofpacket
	wire          sram_4_s2_burst_adapter_source0_endofpacket;                // sram_4_s2_burst_adapter:source0_endofpacket -> sram_4_s2_agent:cp_endofpacket
	wire          sram_5_s2_burst_adapter_source0_valid;                      // sram_5_s2_burst_adapter:source0_valid -> sram_5_s2_agent:cp_valid
	wire  [114:0] sram_5_s2_burst_adapter_source0_data;                       // sram_5_s2_burst_adapter:source0_data -> sram_5_s2_agent:cp_data
	wire          sram_5_s2_burst_adapter_source0_ready;                      // sram_5_s2_agent:cp_ready -> sram_5_s2_burst_adapter:source0_ready
	wire   [20:0] sram_5_s2_burst_adapter_source0_channel;                    // sram_5_s2_burst_adapter:source0_channel -> sram_5_s2_agent:cp_channel
	wire          sram_5_s2_burst_adapter_source0_startofpacket;              // sram_5_s2_burst_adapter:source0_startofpacket -> sram_5_s2_agent:cp_startofpacket
	wire          sram_5_s2_burst_adapter_source0_endofpacket;                // sram_5_s2_burst_adapter:source0_endofpacket -> sram_5_s2_agent:cp_endofpacket
	wire          sram_6_s2_burst_adapter_source0_valid;                      // sram_6_s2_burst_adapter:source0_valid -> sram_6_s2_agent:cp_valid
	wire  [114:0] sram_6_s2_burst_adapter_source0_data;                       // sram_6_s2_burst_adapter:source0_data -> sram_6_s2_agent:cp_data
	wire          sram_6_s2_burst_adapter_source0_ready;                      // sram_6_s2_agent:cp_ready -> sram_6_s2_burst_adapter:source0_ready
	wire   [20:0] sram_6_s2_burst_adapter_source0_channel;                    // sram_6_s2_burst_adapter:source0_channel -> sram_6_s2_agent:cp_channel
	wire          sram_6_s2_burst_adapter_source0_startofpacket;              // sram_6_s2_burst_adapter:source0_startofpacket -> sram_6_s2_agent:cp_startofpacket
	wire          sram_6_s2_burst_adapter_source0_endofpacket;                // sram_6_s2_burst_adapter:source0_endofpacket -> sram_6_s2_agent:cp_endofpacket
	wire          sram_7_s2_burst_adapter_source0_valid;                      // sram_7_s2_burst_adapter:source0_valid -> sram_7_s2_agent:cp_valid
	wire  [114:0] sram_7_s2_burst_adapter_source0_data;                       // sram_7_s2_burst_adapter:source0_data -> sram_7_s2_agent:cp_data
	wire          sram_7_s2_burst_adapter_source0_ready;                      // sram_7_s2_agent:cp_ready -> sram_7_s2_burst_adapter:source0_ready
	wire   [20:0] sram_7_s2_burst_adapter_source0_channel;                    // sram_7_s2_burst_adapter:source0_channel -> sram_7_s2_agent:cp_channel
	wire          sram_7_s2_burst_adapter_source0_startofpacket;              // sram_7_s2_burst_adapter:source0_startofpacket -> sram_7_s2_agent:cp_startofpacket
	wire          sram_7_s2_burst_adapter_source0_endofpacket;                // sram_7_s2_burst_adapter:source0_endofpacket -> sram_7_s2_agent:cp_endofpacket
	wire          sram_8_s2_burst_adapter_source0_valid;                      // sram_8_s2_burst_adapter:source0_valid -> sram_8_s2_agent:cp_valid
	wire  [114:0] sram_8_s2_burst_adapter_source0_data;                       // sram_8_s2_burst_adapter:source0_data -> sram_8_s2_agent:cp_data
	wire          sram_8_s2_burst_adapter_source0_ready;                      // sram_8_s2_agent:cp_ready -> sram_8_s2_burst_adapter:source0_ready
	wire   [20:0] sram_8_s2_burst_adapter_source0_channel;                    // sram_8_s2_burst_adapter:source0_channel -> sram_8_s2_agent:cp_channel
	wire          sram_8_s2_burst_adapter_source0_startofpacket;              // sram_8_s2_burst_adapter:source0_startofpacket -> sram_8_s2_agent:cp_startofpacket
	wire          sram_8_s2_burst_adapter_source0_endofpacket;                // sram_8_s2_burst_adapter:source0_endofpacket -> sram_8_s2_agent:cp_endofpacket
	wire          sram_9_s2_burst_adapter_source0_valid;                      // sram_9_s2_burst_adapter:source0_valid -> sram_9_s2_agent:cp_valid
	wire  [114:0] sram_9_s2_burst_adapter_source0_data;                       // sram_9_s2_burst_adapter:source0_data -> sram_9_s2_agent:cp_data
	wire          sram_9_s2_burst_adapter_source0_ready;                      // sram_9_s2_agent:cp_ready -> sram_9_s2_burst_adapter:source0_ready
	wire   [20:0] sram_9_s2_burst_adapter_source0_channel;                    // sram_9_s2_burst_adapter:source0_channel -> sram_9_s2_agent:cp_channel
	wire          sram_9_s2_burst_adapter_source0_startofpacket;              // sram_9_s2_burst_adapter:source0_startofpacket -> sram_9_s2_agent:cp_startofpacket
	wire          sram_9_s2_burst_adapter_source0_endofpacket;                // sram_9_s2_burst_adapter:source0_endofpacket -> sram_9_s2_agent:cp_endofpacket
	wire          sram_10_s2_burst_adapter_source0_valid;                     // sram_10_s2_burst_adapter:source0_valid -> sram_10_s2_agent:cp_valid
	wire  [114:0] sram_10_s2_burst_adapter_source0_data;                      // sram_10_s2_burst_adapter:source0_data -> sram_10_s2_agent:cp_data
	wire          sram_10_s2_burst_adapter_source0_ready;                     // sram_10_s2_agent:cp_ready -> sram_10_s2_burst_adapter:source0_ready
	wire   [20:0] sram_10_s2_burst_adapter_source0_channel;                   // sram_10_s2_burst_adapter:source0_channel -> sram_10_s2_agent:cp_channel
	wire          sram_10_s2_burst_adapter_source0_startofpacket;             // sram_10_s2_burst_adapter:source0_startofpacket -> sram_10_s2_agent:cp_startofpacket
	wire          sram_10_s2_burst_adapter_source0_endofpacket;               // sram_10_s2_burst_adapter:source0_endofpacket -> sram_10_s2_agent:cp_endofpacket
	wire          sram_11_s2_burst_adapter_source0_valid;                     // sram_11_s2_burst_adapter:source0_valid -> sram_11_s2_agent:cp_valid
	wire  [114:0] sram_11_s2_burst_adapter_source0_data;                      // sram_11_s2_burst_adapter:source0_data -> sram_11_s2_agent:cp_data
	wire          sram_11_s2_burst_adapter_source0_ready;                     // sram_11_s2_agent:cp_ready -> sram_11_s2_burst_adapter:source0_ready
	wire   [20:0] sram_11_s2_burst_adapter_source0_channel;                   // sram_11_s2_burst_adapter:source0_channel -> sram_11_s2_agent:cp_channel
	wire          sram_11_s2_burst_adapter_source0_startofpacket;             // sram_11_s2_burst_adapter:source0_startofpacket -> sram_11_s2_agent:cp_startofpacket
	wire          sram_11_s2_burst_adapter_source0_endofpacket;               // sram_11_s2_burst_adapter:source0_endofpacket -> sram_11_s2_agent:cp_endofpacket
	wire          sram_12_s2_burst_adapter_source0_valid;                     // sram_12_s2_burst_adapter:source0_valid -> sram_12_s2_agent:cp_valid
	wire  [114:0] sram_12_s2_burst_adapter_source0_data;                      // sram_12_s2_burst_adapter:source0_data -> sram_12_s2_agent:cp_data
	wire          sram_12_s2_burst_adapter_source0_ready;                     // sram_12_s2_agent:cp_ready -> sram_12_s2_burst_adapter:source0_ready
	wire   [20:0] sram_12_s2_burst_adapter_source0_channel;                   // sram_12_s2_burst_adapter:source0_channel -> sram_12_s2_agent:cp_channel
	wire          sram_12_s2_burst_adapter_source0_startofpacket;             // sram_12_s2_burst_adapter:source0_startofpacket -> sram_12_s2_agent:cp_startofpacket
	wire          sram_12_s2_burst_adapter_source0_endofpacket;               // sram_12_s2_burst_adapter:source0_endofpacket -> sram_12_s2_agent:cp_endofpacket
	wire          sram_13_s2_burst_adapter_source0_valid;                     // sram_13_s2_burst_adapter:source0_valid -> sram_13_s2_agent:cp_valid
	wire  [114:0] sram_13_s2_burst_adapter_source0_data;                      // sram_13_s2_burst_adapter:source0_data -> sram_13_s2_agent:cp_data
	wire          sram_13_s2_burst_adapter_source0_ready;                     // sram_13_s2_agent:cp_ready -> sram_13_s2_burst_adapter:source0_ready
	wire   [20:0] sram_13_s2_burst_adapter_source0_channel;                   // sram_13_s2_burst_adapter:source0_channel -> sram_13_s2_agent:cp_channel
	wire          sram_13_s2_burst_adapter_source0_startofpacket;             // sram_13_s2_burst_adapter:source0_startofpacket -> sram_13_s2_agent:cp_startofpacket
	wire          sram_13_s2_burst_adapter_source0_endofpacket;               // sram_13_s2_burst_adapter:source0_endofpacket -> sram_13_s2_agent:cp_endofpacket
	wire          sram_14_s2_burst_adapter_source0_valid;                     // sram_14_s2_burst_adapter:source0_valid -> sram_14_s2_agent:cp_valid
	wire  [114:0] sram_14_s2_burst_adapter_source0_data;                      // sram_14_s2_burst_adapter:source0_data -> sram_14_s2_agent:cp_data
	wire          sram_14_s2_burst_adapter_source0_ready;                     // sram_14_s2_agent:cp_ready -> sram_14_s2_burst_adapter:source0_ready
	wire   [20:0] sram_14_s2_burst_adapter_source0_channel;                   // sram_14_s2_burst_adapter:source0_channel -> sram_14_s2_agent:cp_channel
	wire          sram_14_s2_burst_adapter_source0_startofpacket;             // sram_14_s2_burst_adapter:source0_startofpacket -> sram_14_s2_agent:cp_startofpacket
	wire          sram_14_s2_burst_adapter_source0_endofpacket;               // sram_14_s2_burst_adapter:source0_endofpacket -> sram_14_s2_agent:cp_endofpacket
	wire          sram_15_s2_burst_adapter_source0_valid;                     // sram_15_s2_burst_adapter:source0_valid -> sram_15_s2_agent:cp_valid
	wire  [114:0] sram_15_s2_burst_adapter_source0_data;                      // sram_15_s2_burst_adapter:source0_data -> sram_15_s2_agent:cp_data
	wire          sram_15_s2_burst_adapter_source0_ready;                     // sram_15_s2_agent:cp_ready -> sram_15_s2_burst_adapter:source0_ready
	wire   [20:0] sram_15_s2_burst_adapter_source0_channel;                   // sram_15_s2_burst_adapter:source0_channel -> sram_15_s2_agent:cp_channel
	wire          sram_15_s2_burst_adapter_source0_startofpacket;             // sram_15_s2_burst_adapter:source0_startofpacket -> sram_15_s2_agent:cp_startofpacket
	wire          sram_15_s2_burst_adapter_source0_endofpacket;               // sram_15_s2_burst_adapter:source0_endofpacket -> sram_15_s2_agent:cp_endofpacket
	wire          sram_16_s2_burst_adapter_source0_valid;                     // sram_16_s2_burst_adapter:source0_valid -> sram_16_s2_agent:cp_valid
	wire  [114:0] sram_16_s2_burst_adapter_source0_data;                      // sram_16_s2_burst_adapter:source0_data -> sram_16_s2_agent:cp_data
	wire          sram_16_s2_burst_adapter_source0_ready;                     // sram_16_s2_agent:cp_ready -> sram_16_s2_burst_adapter:source0_ready
	wire   [20:0] sram_16_s2_burst_adapter_source0_channel;                   // sram_16_s2_burst_adapter:source0_channel -> sram_16_s2_agent:cp_channel
	wire          sram_16_s2_burst_adapter_source0_startofpacket;             // sram_16_s2_burst_adapter:source0_startofpacket -> sram_16_s2_agent:cp_startofpacket
	wire          sram_16_s2_burst_adapter_source0_endofpacket;               // sram_16_s2_burst_adapter:source0_endofpacket -> sram_16_s2_agent:cp_endofpacket
	wire          sram_17_s2_burst_adapter_source0_valid;                     // sram_17_s2_burst_adapter:source0_valid -> sram_17_s2_agent:cp_valid
	wire  [114:0] sram_17_s2_burst_adapter_source0_data;                      // sram_17_s2_burst_adapter:source0_data -> sram_17_s2_agent:cp_data
	wire          sram_17_s2_burst_adapter_source0_ready;                     // sram_17_s2_agent:cp_ready -> sram_17_s2_burst_adapter:source0_ready
	wire   [20:0] sram_17_s2_burst_adapter_source0_channel;                   // sram_17_s2_burst_adapter:source0_channel -> sram_17_s2_agent:cp_channel
	wire          sram_17_s2_burst_adapter_source0_startofpacket;             // sram_17_s2_burst_adapter:source0_startofpacket -> sram_17_s2_agent:cp_startofpacket
	wire          sram_17_s2_burst_adapter_source0_endofpacket;               // sram_17_s2_burst_adapter:source0_endofpacket -> sram_17_s2_agent:cp_endofpacket
	wire          sram_18_s2_burst_adapter_source0_valid;                     // sram_18_s2_burst_adapter:source0_valid -> sram_18_s2_agent:cp_valid
	wire  [114:0] sram_18_s2_burst_adapter_source0_data;                      // sram_18_s2_burst_adapter:source0_data -> sram_18_s2_agent:cp_data
	wire          sram_18_s2_burst_adapter_source0_ready;                     // sram_18_s2_agent:cp_ready -> sram_18_s2_burst_adapter:source0_ready
	wire   [20:0] sram_18_s2_burst_adapter_source0_channel;                   // sram_18_s2_burst_adapter:source0_channel -> sram_18_s2_agent:cp_channel
	wire          sram_18_s2_burst_adapter_source0_startofpacket;             // sram_18_s2_burst_adapter:source0_startofpacket -> sram_18_s2_agent:cp_startofpacket
	wire          sram_18_s2_burst_adapter_source0_endofpacket;               // sram_18_s2_burst_adapter:source0_endofpacket -> sram_18_s2_agent:cp_endofpacket
	wire          sram_19_s2_burst_adapter_source0_valid;                     // sram_19_s2_burst_adapter:source0_valid -> sram_19_s2_agent:cp_valid
	wire  [114:0] sram_19_s2_burst_adapter_source0_data;                      // sram_19_s2_burst_adapter:source0_data -> sram_19_s2_agent:cp_data
	wire          sram_19_s2_burst_adapter_source0_ready;                     // sram_19_s2_agent:cp_ready -> sram_19_s2_burst_adapter:source0_ready
	wire   [20:0] sram_19_s2_burst_adapter_source0_channel;                   // sram_19_s2_burst_adapter:source0_channel -> sram_19_s2_agent:cp_channel
	wire          sram_19_s2_burst_adapter_source0_startofpacket;             // sram_19_s2_burst_adapter:source0_startofpacket -> sram_19_s2_agent:cp_startofpacket
	wire          sram_19_s2_burst_adapter_source0_endofpacket;               // sram_19_s2_burst_adapter:source0_endofpacket -> sram_19_s2_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [240:0] cmd_demux_src0_data;                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [20:0] cmd_demux_src0_channel;                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [240:0] cmd_demux_src1_data;                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [20:0] cmd_demux_src1_channel;                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [240:0] cmd_demux_src2_data;                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [20:0] cmd_demux_src2_channel;                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                       // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [240:0] cmd_demux_src3_data;                                        // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                       // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [20:0] cmd_demux_src3_channel;                                     // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                               // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                 // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                       // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [240:0] cmd_demux_src4_data;                                        // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                       // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [20:0] cmd_demux_src4_channel;                                     // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                               // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                 // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                       // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [240:0] cmd_demux_src5_data;                                        // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                       // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [20:0] cmd_demux_src5_channel;                                     // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                               // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                 // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                       // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [240:0] cmd_demux_src6_data;                                        // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                       // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [20:0] cmd_demux_src6_channel;                                     // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                               // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                 // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                       // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [240:0] cmd_demux_src7_data;                                        // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                       // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [20:0] cmd_demux_src7_channel;                                     // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                               // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                 // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                       // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [240:0] cmd_demux_src8_data;                                        // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                       // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [20:0] cmd_demux_src8_channel;                                     // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                               // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                 // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                       // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [240:0] cmd_demux_src9_data;                                        // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                       // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [20:0] cmd_demux_src9_channel;                                     // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                               // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                 // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                      // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [240:0] cmd_demux_src10_data;                                       // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                      // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [20:0] cmd_demux_src10_channel;                                    // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                              // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                      // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [240:0] cmd_demux_src11_data;                                       // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                      // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [20:0] cmd_demux_src11_channel;                                    // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                              // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                      // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [240:0] cmd_demux_src12_data;                                       // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                      // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [20:0] cmd_demux_src12_channel;                                    // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                              // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                      // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [240:0] cmd_demux_src13_data;                                       // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                      // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [20:0] cmd_demux_src13_channel;                                    // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                              // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                      // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [240:0] cmd_demux_src14_data;                                       // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                      // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [20:0] cmd_demux_src14_channel;                                    // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                              // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                      // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [240:0] cmd_demux_src15_data;                                       // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                      // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [20:0] cmd_demux_src15_channel;                                    // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                              // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                      // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [240:0] cmd_demux_src16_data;                                       // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                      // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [20:0] cmd_demux_src16_channel;                                    // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                              // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                      // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [240:0] cmd_demux_src17_data;                                       // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                      // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [20:0] cmd_demux_src17_channel;                                    // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                              // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                      // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [240:0] cmd_demux_src18_data;                                       // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                      // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [20:0] cmd_demux_src18_channel;                                    // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                              // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                      // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [240:0] cmd_demux_src19_data;                                       // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                      // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [20:0] cmd_demux_src19_channel;                                    // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                              // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                      // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [240:0] cmd_demux_src20_data;                                       // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                      // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [20:0] cmd_demux_src20_channel;                                    // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                              // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                   // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [240:0] cmd_demux_001_src0_data;                                    // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                   // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [20:0] cmd_demux_001_src0_channel;                                 // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                           // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                             // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                   // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [240:0] cmd_demux_001_src1_data;                                    // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                   // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [20:0] cmd_demux_001_src1_channel;                                 // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                           // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                             // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                   // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [240:0] cmd_demux_001_src2_data;                                    // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                   // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [20:0] cmd_demux_001_src2_channel;                                 // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                           // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                             // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                   // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [240:0] cmd_demux_001_src3_data;                                    // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                   // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [20:0] cmd_demux_001_src3_channel;                                 // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                           // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                             // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                   // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [240:0] cmd_demux_001_src4_data;                                    // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                   // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [20:0] cmd_demux_001_src4_channel;                                 // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                           // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                             // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                   // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [240:0] cmd_demux_001_src5_data;                                    // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                   // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [20:0] cmd_demux_001_src5_channel;                                 // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                           // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                             // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                   // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [240:0] cmd_demux_001_src6_data;                                    // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                   // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [20:0] cmd_demux_001_src6_channel;                                 // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                           // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                             // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                   // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [240:0] cmd_demux_001_src7_data;                                    // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                   // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [20:0] cmd_demux_001_src7_channel;                                 // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                           // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                             // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                   // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [240:0] cmd_demux_001_src8_data;                                    // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                   // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [20:0] cmd_demux_001_src8_channel;                                 // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                           // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                             // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                   // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [240:0] cmd_demux_001_src9_data;                                    // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                   // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [20:0] cmd_demux_001_src9_channel;                                 // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                           // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                             // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                  // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [240:0] cmd_demux_001_src10_data;                                   // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                  // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [20:0] cmd_demux_001_src10_channel;                                // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                          // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                            // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                  // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [240:0] cmd_demux_001_src11_data;                                   // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                  // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [20:0] cmd_demux_001_src11_channel;                                // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                          // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                            // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                  // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [240:0] cmd_demux_001_src12_data;                                   // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                  // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [20:0] cmd_demux_001_src12_channel;                                // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                          // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                            // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                  // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [240:0] cmd_demux_001_src13_data;                                   // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                  // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [20:0] cmd_demux_001_src13_channel;                                // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                          // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                            // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                  // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [240:0] cmd_demux_001_src14_data;                                   // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src14_ready;                                  // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire   [20:0] cmd_demux_001_src14_channel;                                // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                          // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                            // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                  // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [240:0] cmd_demux_001_src15_data;                                   // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src15_ready;                                  // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire   [20:0] cmd_demux_001_src15_channel;                                // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                          // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                            // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                  // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [240:0] cmd_demux_001_src16_data;                                   // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src16_ready;                                  // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire   [20:0] cmd_demux_001_src16_channel;                                // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                          // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                            // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                  // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [240:0] cmd_demux_001_src17_data;                                   // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src17_ready;                                  // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire   [20:0] cmd_demux_001_src17_channel;                                // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                          // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                            // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                  // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [240:0] cmd_demux_001_src18_data;                                   // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src18_ready;                                  // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire   [20:0] cmd_demux_001_src18_channel;                                // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                          // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                            // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                  // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire  [240:0] cmd_demux_001_src19_data;                                   // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src19_ready;                                  // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire   [20:0] cmd_demux_001_src19_channel;                                // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                          // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                            // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                  // cmd_demux_001:src20_valid -> cmd_mux_020:sink1_valid
	wire  [240:0] cmd_demux_001_src20_data;                                   // cmd_demux_001:src20_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src20_ready;                                  // cmd_mux_020:sink1_ready -> cmd_demux_001:src20_ready
	wire   [20:0] cmd_demux_001_src20_channel;                                // cmd_demux_001:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src20_startofpacket;                          // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                            // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [240:0] rsp_demux_src0_data;                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [20:0] rsp_demux_src0_channel;                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                       // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [240:0] rsp_demux_src1_data;                                        // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                       // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [20:0] rsp_demux_src1_channel;                                     // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                               // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                 // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [240:0] rsp_demux_001_src0_data;                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [20:0] rsp_demux_001_src0_channel;                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                   // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [240:0] rsp_demux_001_src1_data;                                    // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                   // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [20:0] rsp_demux_001_src1_channel;                                 // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                           // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                             // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [240:0] rsp_demux_002_src0_data;                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [20:0] rsp_demux_002_src0_channel;                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                   // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [240:0] rsp_demux_002_src1_data;                                    // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                   // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [20:0] rsp_demux_002_src1_channel;                                 // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                           // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                             // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                   // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [240:0] rsp_demux_003_src0_data;                                    // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                   // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [20:0] rsp_demux_003_src0_channel;                                 // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                           // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                             // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                   // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [240:0] rsp_demux_003_src1_data;                                    // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                   // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [20:0] rsp_demux_003_src1_channel;                                 // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                           // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                             // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                   // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [240:0] rsp_demux_004_src0_data;                                    // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                   // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [20:0] rsp_demux_004_src0_channel;                                 // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                           // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                             // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                   // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [240:0] rsp_demux_004_src1_data;                                    // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                   // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [20:0] rsp_demux_004_src1_channel;                                 // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                           // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                             // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                   // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [240:0] rsp_demux_005_src0_data;                                    // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                   // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [20:0] rsp_demux_005_src0_channel;                                 // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                           // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                             // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                   // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [240:0] rsp_demux_005_src1_data;                                    // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                   // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [20:0] rsp_demux_005_src1_channel;                                 // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                           // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                             // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                   // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [240:0] rsp_demux_006_src0_data;                                    // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                   // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [20:0] rsp_demux_006_src0_channel;                                 // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                           // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                             // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                   // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [240:0] rsp_demux_006_src1_data;                                    // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                   // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [20:0] rsp_demux_006_src1_channel;                                 // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                           // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                             // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                   // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [240:0] rsp_demux_007_src0_data;                                    // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                   // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [20:0] rsp_demux_007_src0_channel;                                 // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                           // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                             // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                   // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [240:0] rsp_demux_007_src1_data;                                    // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                   // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [20:0] rsp_demux_007_src1_channel;                                 // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                           // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                             // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                   // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [240:0] rsp_demux_008_src0_data;                                    // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                   // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [20:0] rsp_demux_008_src0_channel;                                 // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                           // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                             // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                   // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [240:0] rsp_demux_008_src1_data;                                    // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                   // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [20:0] rsp_demux_008_src1_channel;                                 // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                           // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                             // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                   // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [240:0] rsp_demux_009_src0_data;                                    // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                   // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [20:0] rsp_demux_009_src0_channel;                                 // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                           // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                             // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                   // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [240:0] rsp_demux_009_src1_data;                                    // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                   // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [20:0] rsp_demux_009_src1_channel;                                 // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                           // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                             // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                   // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [240:0] rsp_demux_010_src0_data;                                    // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                   // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [20:0] rsp_demux_010_src0_channel;                                 // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                           // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                             // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                   // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [240:0] rsp_demux_010_src1_data;                                    // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                   // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [20:0] rsp_demux_010_src1_channel;                                 // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                           // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                             // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                   // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [240:0] rsp_demux_011_src0_data;                                    // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                   // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [20:0] rsp_demux_011_src0_channel;                                 // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                           // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                             // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                   // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [240:0] rsp_demux_011_src1_data;                                    // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                   // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [20:0] rsp_demux_011_src1_channel;                                 // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                           // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                             // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                   // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [240:0] rsp_demux_012_src0_data;                                    // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                   // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [20:0] rsp_demux_012_src0_channel;                                 // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                           // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                             // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                   // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [240:0] rsp_demux_012_src1_data;                                    // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                   // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [20:0] rsp_demux_012_src1_channel;                                 // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                           // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                             // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                   // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [240:0] rsp_demux_013_src0_data;                                    // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                   // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [20:0] rsp_demux_013_src0_channel;                                 // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                           // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                             // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                   // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [240:0] rsp_demux_013_src1_data;                                    // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                   // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [20:0] rsp_demux_013_src1_channel;                                 // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                           // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                             // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                   // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [240:0] rsp_demux_014_src0_data;                                    // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                   // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [20:0] rsp_demux_014_src0_channel;                                 // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                           // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                             // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                   // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [240:0] rsp_demux_014_src1_data;                                    // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src1_ready;                                   // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire   [20:0] rsp_demux_014_src1_channel;                                 // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                           // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                             // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                   // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [240:0] rsp_demux_015_src0_data;                                    // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                   // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [20:0] rsp_demux_015_src0_channel;                                 // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                           // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                             // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                   // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [240:0] rsp_demux_015_src1_data;                                    // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src1_ready;                                   // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire   [20:0] rsp_demux_015_src1_channel;                                 // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                           // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                             // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                   // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [240:0] rsp_demux_016_src0_data;                                    // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                   // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [20:0] rsp_demux_016_src0_channel;                                 // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                           // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                             // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                   // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [240:0] rsp_demux_016_src1_data;                                    // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src1_ready;                                   // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire   [20:0] rsp_demux_016_src1_channel;                                 // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                           // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                             // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                   // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [240:0] rsp_demux_017_src0_data;                                    // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                   // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [20:0] rsp_demux_017_src0_channel;                                 // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                           // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                             // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                   // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [240:0] rsp_demux_017_src1_data;                                    // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src1_ready;                                   // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire   [20:0] rsp_demux_017_src1_channel;                                 // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                           // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                             // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                   // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [240:0] rsp_demux_018_src0_data;                                    // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                   // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [20:0] rsp_demux_018_src0_channel;                                 // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                           // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                             // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                   // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [240:0] rsp_demux_018_src1_data;                                    // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src1_ready;                                   // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire   [20:0] rsp_demux_018_src1_channel;                                 // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                           // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                             // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                   // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [240:0] rsp_demux_019_src0_data;                                    // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                   // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [20:0] rsp_demux_019_src0_channel;                                 // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                           // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                             // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                   // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire  [240:0] rsp_demux_019_src1_data;                                    // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src1_ready;                                   // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire   [20:0] rsp_demux_019_src1_channel;                                 // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                           // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                             // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                   // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [240:0] rsp_demux_020_src0_data;                                    // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                   // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [20:0] rsp_demux_020_src0_channel;                                 // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                           // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                             // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                   // rsp_demux_020:src1_valid -> rsp_mux_001:sink20_valid
	wire  [240:0] rsp_demux_020_src1_data;                                    // rsp_demux_020:src1_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src1_ready;                                   // rsp_mux_001:sink20_ready -> rsp_demux_020:src1_ready
	wire   [20:0] rsp_demux_020_src1_channel;                                 // rsp_demux_020:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src1_startofpacket;                           // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                             // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          router_003_src_valid;                                       // router_003:src_valid -> sram_0_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_003_src_data;                                        // router_003:src_data -> sram_0_s2_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                       // sram_0_s2_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [20:0] router_003_src_channel;                                     // router_003:src_channel -> sram_0_s2_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                               // router_003:src_startofpacket -> sram_0_s2_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                 // router_003:src_endofpacket -> sram_0_s2_rsp_width_adapter:in_endofpacket
	wire          sram_0_s2_rsp_width_adapter_src_valid;                      // sram_0_s2_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [240:0] sram_0_s2_rsp_width_adapter_src_data;                       // sram_0_s2_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sram_0_s2_rsp_width_adapter_src_ready;                      // rsp_demux_001:sink_ready -> sram_0_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_0_s2_rsp_width_adapter_src_channel;                    // sram_0_s2_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          sram_0_s2_rsp_width_adapter_src_startofpacket;              // sram_0_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          sram_0_s2_rsp_width_adapter_src_endofpacket;                // sram_0_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                       // router_004:src_valid -> sram_1_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_004_src_data;                                        // router_004:src_data -> sram_1_s2_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                       // sram_1_s2_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [20:0] router_004_src_channel;                                     // router_004:src_channel -> sram_1_s2_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                               // router_004:src_startofpacket -> sram_1_s2_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                 // router_004:src_endofpacket -> sram_1_s2_rsp_width_adapter:in_endofpacket
	wire          sram_1_s2_rsp_width_adapter_src_valid;                      // sram_1_s2_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [240:0] sram_1_s2_rsp_width_adapter_src_data;                       // sram_1_s2_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          sram_1_s2_rsp_width_adapter_src_ready;                      // rsp_demux_002:sink_ready -> sram_1_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_1_s2_rsp_width_adapter_src_channel;                    // sram_1_s2_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          sram_1_s2_rsp_width_adapter_src_startofpacket;              // sram_1_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          sram_1_s2_rsp_width_adapter_src_endofpacket;                // sram_1_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                       // router_005:src_valid -> sram_2_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_005_src_data;                                        // router_005:src_data -> sram_2_s2_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                       // sram_2_s2_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [20:0] router_005_src_channel;                                     // router_005:src_channel -> sram_2_s2_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                               // router_005:src_startofpacket -> sram_2_s2_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                 // router_005:src_endofpacket -> sram_2_s2_rsp_width_adapter:in_endofpacket
	wire          sram_2_s2_rsp_width_adapter_src_valid;                      // sram_2_s2_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [240:0] sram_2_s2_rsp_width_adapter_src_data;                       // sram_2_s2_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          sram_2_s2_rsp_width_adapter_src_ready;                      // rsp_demux_003:sink_ready -> sram_2_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_2_s2_rsp_width_adapter_src_channel;                    // sram_2_s2_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          sram_2_s2_rsp_width_adapter_src_startofpacket;              // sram_2_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          sram_2_s2_rsp_width_adapter_src_endofpacket;                // sram_2_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                       // router_006:src_valid -> sram_3_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_006_src_data;                                        // router_006:src_data -> sram_3_s2_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                       // sram_3_s2_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [20:0] router_006_src_channel;                                     // router_006:src_channel -> sram_3_s2_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                               // router_006:src_startofpacket -> sram_3_s2_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                 // router_006:src_endofpacket -> sram_3_s2_rsp_width_adapter:in_endofpacket
	wire          sram_3_s2_rsp_width_adapter_src_valid;                      // sram_3_s2_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [240:0] sram_3_s2_rsp_width_adapter_src_data;                       // sram_3_s2_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          sram_3_s2_rsp_width_adapter_src_ready;                      // rsp_demux_004:sink_ready -> sram_3_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_3_s2_rsp_width_adapter_src_channel;                    // sram_3_s2_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          sram_3_s2_rsp_width_adapter_src_startofpacket;              // sram_3_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          sram_3_s2_rsp_width_adapter_src_endofpacket;                // sram_3_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                       // router_007:src_valid -> sram_4_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_007_src_data;                                        // router_007:src_data -> sram_4_s2_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                       // sram_4_s2_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [20:0] router_007_src_channel;                                     // router_007:src_channel -> sram_4_s2_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                               // router_007:src_startofpacket -> sram_4_s2_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                 // router_007:src_endofpacket -> sram_4_s2_rsp_width_adapter:in_endofpacket
	wire          sram_4_s2_rsp_width_adapter_src_valid;                      // sram_4_s2_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [240:0] sram_4_s2_rsp_width_adapter_src_data;                       // sram_4_s2_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          sram_4_s2_rsp_width_adapter_src_ready;                      // rsp_demux_005:sink_ready -> sram_4_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_4_s2_rsp_width_adapter_src_channel;                    // sram_4_s2_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          sram_4_s2_rsp_width_adapter_src_startofpacket;              // sram_4_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          sram_4_s2_rsp_width_adapter_src_endofpacket;                // sram_4_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                       // router_008:src_valid -> sram_5_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_008_src_data;                                        // router_008:src_data -> sram_5_s2_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                       // sram_5_s2_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [20:0] router_008_src_channel;                                     // router_008:src_channel -> sram_5_s2_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                               // router_008:src_startofpacket -> sram_5_s2_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                 // router_008:src_endofpacket -> sram_5_s2_rsp_width_adapter:in_endofpacket
	wire          sram_5_s2_rsp_width_adapter_src_valid;                      // sram_5_s2_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [240:0] sram_5_s2_rsp_width_adapter_src_data;                       // sram_5_s2_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          sram_5_s2_rsp_width_adapter_src_ready;                      // rsp_demux_006:sink_ready -> sram_5_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_5_s2_rsp_width_adapter_src_channel;                    // sram_5_s2_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          sram_5_s2_rsp_width_adapter_src_startofpacket;              // sram_5_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          sram_5_s2_rsp_width_adapter_src_endofpacket;                // sram_5_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                       // router_009:src_valid -> sram_6_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_009_src_data;                                        // router_009:src_data -> sram_6_s2_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                       // sram_6_s2_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [20:0] router_009_src_channel;                                     // router_009:src_channel -> sram_6_s2_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                               // router_009:src_startofpacket -> sram_6_s2_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                 // router_009:src_endofpacket -> sram_6_s2_rsp_width_adapter:in_endofpacket
	wire          sram_6_s2_rsp_width_adapter_src_valid;                      // sram_6_s2_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [240:0] sram_6_s2_rsp_width_adapter_src_data;                       // sram_6_s2_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          sram_6_s2_rsp_width_adapter_src_ready;                      // rsp_demux_007:sink_ready -> sram_6_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_6_s2_rsp_width_adapter_src_channel;                    // sram_6_s2_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          sram_6_s2_rsp_width_adapter_src_startofpacket;              // sram_6_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          sram_6_s2_rsp_width_adapter_src_endofpacket;                // sram_6_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                       // router_010:src_valid -> sram_7_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_010_src_data;                                        // router_010:src_data -> sram_7_s2_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                       // sram_7_s2_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [20:0] router_010_src_channel;                                     // router_010:src_channel -> sram_7_s2_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                               // router_010:src_startofpacket -> sram_7_s2_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                 // router_010:src_endofpacket -> sram_7_s2_rsp_width_adapter:in_endofpacket
	wire          sram_7_s2_rsp_width_adapter_src_valid;                      // sram_7_s2_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [240:0] sram_7_s2_rsp_width_adapter_src_data;                       // sram_7_s2_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          sram_7_s2_rsp_width_adapter_src_ready;                      // rsp_demux_008:sink_ready -> sram_7_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_7_s2_rsp_width_adapter_src_channel;                    // sram_7_s2_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          sram_7_s2_rsp_width_adapter_src_startofpacket;              // sram_7_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          sram_7_s2_rsp_width_adapter_src_endofpacket;                // sram_7_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                       // router_011:src_valid -> sram_8_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_011_src_data;                                        // router_011:src_data -> sram_8_s2_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                       // sram_8_s2_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [20:0] router_011_src_channel;                                     // router_011:src_channel -> sram_8_s2_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                               // router_011:src_startofpacket -> sram_8_s2_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                 // router_011:src_endofpacket -> sram_8_s2_rsp_width_adapter:in_endofpacket
	wire          sram_8_s2_rsp_width_adapter_src_valid;                      // sram_8_s2_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [240:0] sram_8_s2_rsp_width_adapter_src_data;                       // sram_8_s2_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          sram_8_s2_rsp_width_adapter_src_ready;                      // rsp_demux_009:sink_ready -> sram_8_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_8_s2_rsp_width_adapter_src_channel;                    // sram_8_s2_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          sram_8_s2_rsp_width_adapter_src_startofpacket;              // sram_8_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          sram_8_s2_rsp_width_adapter_src_endofpacket;                // sram_8_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                       // router_012:src_valid -> sram_9_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_012_src_data;                                        // router_012:src_data -> sram_9_s2_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                       // sram_9_s2_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [20:0] router_012_src_channel;                                     // router_012:src_channel -> sram_9_s2_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                               // router_012:src_startofpacket -> sram_9_s2_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                 // router_012:src_endofpacket -> sram_9_s2_rsp_width_adapter:in_endofpacket
	wire          sram_9_s2_rsp_width_adapter_src_valid;                      // sram_9_s2_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [240:0] sram_9_s2_rsp_width_adapter_src_data;                       // sram_9_s2_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          sram_9_s2_rsp_width_adapter_src_ready;                      // rsp_demux_010:sink_ready -> sram_9_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_9_s2_rsp_width_adapter_src_channel;                    // sram_9_s2_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          sram_9_s2_rsp_width_adapter_src_startofpacket;              // sram_9_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          sram_9_s2_rsp_width_adapter_src_endofpacket;                // sram_9_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                       // router_013:src_valid -> sram_10_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_013_src_data;                                        // router_013:src_data -> sram_10_s2_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                       // sram_10_s2_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [20:0] router_013_src_channel;                                     // router_013:src_channel -> sram_10_s2_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                               // router_013:src_startofpacket -> sram_10_s2_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                 // router_013:src_endofpacket -> sram_10_s2_rsp_width_adapter:in_endofpacket
	wire          sram_10_s2_rsp_width_adapter_src_valid;                     // sram_10_s2_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [240:0] sram_10_s2_rsp_width_adapter_src_data;                      // sram_10_s2_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          sram_10_s2_rsp_width_adapter_src_ready;                     // rsp_demux_011:sink_ready -> sram_10_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_10_s2_rsp_width_adapter_src_channel;                   // sram_10_s2_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          sram_10_s2_rsp_width_adapter_src_startofpacket;             // sram_10_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          sram_10_s2_rsp_width_adapter_src_endofpacket;               // sram_10_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                       // router_014:src_valid -> sram_11_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_014_src_data;                                        // router_014:src_data -> sram_11_s2_rsp_width_adapter:in_data
	wire          router_014_src_ready;                                       // sram_11_s2_rsp_width_adapter:in_ready -> router_014:src_ready
	wire   [20:0] router_014_src_channel;                                     // router_014:src_channel -> sram_11_s2_rsp_width_adapter:in_channel
	wire          router_014_src_startofpacket;                               // router_014:src_startofpacket -> sram_11_s2_rsp_width_adapter:in_startofpacket
	wire          router_014_src_endofpacket;                                 // router_014:src_endofpacket -> sram_11_s2_rsp_width_adapter:in_endofpacket
	wire          sram_11_s2_rsp_width_adapter_src_valid;                     // sram_11_s2_rsp_width_adapter:out_valid -> rsp_demux_012:sink_valid
	wire  [240:0] sram_11_s2_rsp_width_adapter_src_data;                      // sram_11_s2_rsp_width_adapter:out_data -> rsp_demux_012:sink_data
	wire          sram_11_s2_rsp_width_adapter_src_ready;                     // rsp_demux_012:sink_ready -> sram_11_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_11_s2_rsp_width_adapter_src_channel;                   // sram_11_s2_rsp_width_adapter:out_channel -> rsp_demux_012:sink_channel
	wire          sram_11_s2_rsp_width_adapter_src_startofpacket;             // sram_11_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          sram_11_s2_rsp_width_adapter_src_endofpacket;               // sram_11_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                       // router_015:src_valid -> sram_12_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_015_src_data;                                        // router_015:src_data -> sram_12_s2_rsp_width_adapter:in_data
	wire          router_015_src_ready;                                       // sram_12_s2_rsp_width_adapter:in_ready -> router_015:src_ready
	wire   [20:0] router_015_src_channel;                                     // router_015:src_channel -> sram_12_s2_rsp_width_adapter:in_channel
	wire          router_015_src_startofpacket;                               // router_015:src_startofpacket -> sram_12_s2_rsp_width_adapter:in_startofpacket
	wire          router_015_src_endofpacket;                                 // router_015:src_endofpacket -> sram_12_s2_rsp_width_adapter:in_endofpacket
	wire          sram_12_s2_rsp_width_adapter_src_valid;                     // sram_12_s2_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [240:0] sram_12_s2_rsp_width_adapter_src_data;                      // sram_12_s2_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire          sram_12_s2_rsp_width_adapter_src_ready;                     // rsp_demux_013:sink_ready -> sram_12_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_12_s2_rsp_width_adapter_src_channel;                   // sram_12_s2_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire          sram_12_s2_rsp_width_adapter_src_startofpacket;             // sram_12_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          sram_12_s2_rsp_width_adapter_src_endofpacket;               // sram_12_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                       // router_016:src_valid -> sram_13_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_016_src_data;                                        // router_016:src_data -> sram_13_s2_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                       // sram_13_s2_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [20:0] router_016_src_channel;                                     // router_016:src_channel -> sram_13_s2_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                               // router_016:src_startofpacket -> sram_13_s2_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                 // router_016:src_endofpacket -> sram_13_s2_rsp_width_adapter:in_endofpacket
	wire          sram_13_s2_rsp_width_adapter_src_valid;                     // sram_13_s2_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [240:0] sram_13_s2_rsp_width_adapter_src_data;                      // sram_13_s2_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          sram_13_s2_rsp_width_adapter_src_ready;                     // rsp_demux_014:sink_ready -> sram_13_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_13_s2_rsp_width_adapter_src_channel;                   // sram_13_s2_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          sram_13_s2_rsp_width_adapter_src_startofpacket;             // sram_13_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          sram_13_s2_rsp_width_adapter_src_endofpacket;               // sram_13_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                       // router_017:src_valid -> sram_14_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_017_src_data;                                        // router_017:src_data -> sram_14_s2_rsp_width_adapter:in_data
	wire          router_017_src_ready;                                       // sram_14_s2_rsp_width_adapter:in_ready -> router_017:src_ready
	wire   [20:0] router_017_src_channel;                                     // router_017:src_channel -> sram_14_s2_rsp_width_adapter:in_channel
	wire          router_017_src_startofpacket;                               // router_017:src_startofpacket -> sram_14_s2_rsp_width_adapter:in_startofpacket
	wire          router_017_src_endofpacket;                                 // router_017:src_endofpacket -> sram_14_s2_rsp_width_adapter:in_endofpacket
	wire          sram_14_s2_rsp_width_adapter_src_valid;                     // sram_14_s2_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [240:0] sram_14_s2_rsp_width_adapter_src_data;                      // sram_14_s2_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire          sram_14_s2_rsp_width_adapter_src_ready;                     // rsp_demux_015:sink_ready -> sram_14_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_14_s2_rsp_width_adapter_src_channel;                   // sram_14_s2_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire          sram_14_s2_rsp_width_adapter_src_startofpacket;             // sram_14_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          sram_14_s2_rsp_width_adapter_src_endofpacket;               // sram_14_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                       // router_018:src_valid -> sram_15_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_018_src_data;                                        // router_018:src_data -> sram_15_s2_rsp_width_adapter:in_data
	wire          router_018_src_ready;                                       // sram_15_s2_rsp_width_adapter:in_ready -> router_018:src_ready
	wire   [20:0] router_018_src_channel;                                     // router_018:src_channel -> sram_15_s2_rsp_width_adapter:in_channel
	wire          router_018_src_startofpacket;                               // router_018:src_startofpacket -> sram_15_s2_rsp_width_adapter:in_startofpacket
	wire          router_018_src_endofpacket;                                 // router_018:src_endofpacket -> sram_15_s2_rsp_width_adapter:in_endofpacket
	wire          sram_15_s2_rsp_width_adapter_src_valid;                     // sram_15_s2_rsp_width_adapter:out_valid -> rsp_demux_016:sink_valid
	wire  [240:0] sram_15_s2_rsp_width_adapter_src_data;                      // sram_15_s2_rsp_width_adapter:out_data -> rsp_demux_016:sink_data
	wire          sram_15_s2_rsp_width_adapter_src_ready;                     // rsp_demux_016:sink_ready -> sram_15_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_15_s2_rsp_width_adapter_src_channel;                   // sram_15_s2_rsp_width_adapter:out_channel -> rsp_demux_016:sink_channel
	wire          sram_15_s2_rsp_width_adapter_src_startofpacket;             // sram_15_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          sram_15_s2_rsp_width_adapter_src_endofpacket;               // sram_15_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_019_src_valid;                                       // router_019:src_valid -> sram_16_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_019_src_data;                                        // router_019:src_data -> sram_16_s2_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                       // sram_16_s2_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [20:0] router_019_src_channel;                                     // router_019:src_channel -> sram_16_s2_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                               // router_019:src_startofpacket -> sram_16_s2_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                 // router_019:src_endofpacket -> sram_16_s2_rsp_width_adapter:in_endofpacket
	wire          sram_16_s2_rsp_width_adapter_src_valid;                     // sram_16_s2_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [240:0] sram_16_s2_rsp_width_adapter_src_data;                      // sram_16_s2_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire          sram_16_s2_rsp_width_adapter_src_ready;                     // rsp_demux_017:sink_ready -> sram_16_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_16_s2_rsp_width_adapter_src_channel;                   // sram_16_s2_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire          sram_16_s2_rsp_width_adapter_src_startofpacket;             // sram_16_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          sram_16_s2_rsp_width_adapter_src_endofpacket;               // sram_16_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_020_src_valid;                                       // router_020:src_valid -> sram_17_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_020_src_data;                                        // router_020:src_data -> sram_17_s2_rsp_width_adapter:in_data
	wire          router_020_src_ready;                                       // sram_17_s2_rsp_width_adapter:in_ready -> router_020:src_ready
	wire   [20:0] router_020_src_channel;                                     // router_020:src_channel -> sram_17_s2_rsp_width_adapter:in_channel
	wire          router_020_src_startofpacket;                               // router_020:src_startofpacket -> sram_17_s2_rsp_width_adapter:in_startofpacket
	wire          router_020_src_endofpacket;                                 // router_020:src_endofpacket -> sram_17_s2_rsp_width_adapter:in_endofpacket
	wire          sram_17_s2_rsp_width_adapter_src_valid;                     // sram_17_s2_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [240:0] sram_17_s2_rsp_width_adapter_src_data;                      // sram_17_s2_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire          sram_17_s2_rsp_width_adapter_src_ready;                     // rsp_demux_018:sink_ready -> sram_17_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_17_s2_rsp_width_adapter_src_channel;                   // sram_17_s2_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire          sram_17_s2_rsp_width_adapter_src_startofpacket;             // sram_17_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          sram_17_s2_rsp_width_adapter_src_endofpacket;               // sram_17_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_021_src_valid;                                       // router_021:src_valid -> sram_18_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_021_src_data;                                        // router_021:src_data -> sram_18_s2_rsp_width_adapter:in_data
	wire          router_021_src_ready;                                       // sram_18_s2_rsp_width_adapter:in_ready -> router_021:src_ready
	wire   [20:0] router_021_src_channel;                                     // router_021:src_channel -> sram_18_s2_rsp_width_adapter:in_channel
	wire          router_021_src_startofpacket;                               // router_021:src_startofpacket -> sram_18_s2_rsp_width_adapter:in_startofpacket
	wire          router_021_src_endofpacket;                                 // router_021:src_endofpacket -> sram_18_s2_rsp_width_adapter:in_endofpacket
	wire          sram_18_s2_rsp_width_adapter_src_valid;                     // sram_18_s2_rsp_width_adapter:out_valid -> rsp_demux_019:sink_valid
	wire  [240:0] sram_18_s2_rsp_width_adapter_src_data;                      // sram_18_s2_rsp_width_adapter:out_data -> rsp_demux_019:sink_data
	wire          sram_18_s2_rsp_width_adapter_src_ready;                     // rsp_demux_019:sink_ready -> sram_18_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_18_s2_rsp_width_adapter_src_channel;                   // sram_18_s2_rsp_width_adapter:out_channel -> rsp_demux_019:sink_channel
	wire          sram_18_s2_rsp_width_adapter_src_startofpacket;             // sram_18_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          sram_18_s2_rsp_width_adapter_src_endofpacket;               // sram_18_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_022_src_valid;                                       // router_022:src_valid -> sram_19_s2_rsp_width_adapter:in_valid
	wire  [114:0] router_022_src_data;                                        // router_022:src_data -> sram_19_s2_rsp_width_adapter:in_data
	wire          router_022_src_ready;                                       // sram_19_s2_rsp_width_adapter:in_ready -> router_022:src_ready
	wire   [20:0] router_022_src_channel;                                     // router_022:src_channel -> sram_19_s2_rsp_width_adapter:in_channel
	wire          router_022_src_startofpacket;                               // router_022:src_startofpacket -> sram_19_s2_rsp_width_adapter:in_startofpacket
	wire          router_022_src_endofpacket;                                 // router_022:src_endofpacket -> sram_19_s2_rsp_width_adapter:in_endofpacket
	wire          sram_19_s2_rsp_width_adapter_src_valid;                     // sram_19_s2_rsp_width_adapter:out_valid -> rsp_demux_020:sink_valid
	wire  [240:0] sram_19_s2_rsp_width_adapter_src_data;                      // sram_19_s2_rsp_width_adapter:out_data -> rsp_demux_020:sink_data
	wire          sram_19_s2_rsp_width_adapter_src_ready;                     // rsp_demux_020:sink_ready -> sram_19_s2_rsp_width_adapter:out_ready
	wire   [20:0] sram_19_s2_rsp_width_adapter_src_channel;                   // sram_19_s2_rsp_width_adapter:out_channel -> rsp_demux_020:sink_channel
	wire          sram_19_s2_rsp_width_adapter_src_startofpacket;             // sram_19_s2_rsp_width_adapter:out_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          sram_19_s2_rsp_width_adapter_src_endofpacket;               // sram_19_s2_rsp_width_adapter:out_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                      // cmd_mux_001:src_valid -> sram_0_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_001_src_data;                                       // cmd_mux_001:src_data -> sram_0_s2_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                      // sram_0_s2_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [20:0] cmd_mux_001_src_channel;                                    // cmd_mux_001:src_channel -> sram_0_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                              // cmd_mux_001:src_startofpacket -> sram_0_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                // cmd_mux_001:src_endofpacket -> sram_0_s2_cmd_width_adapter:in_endofpacket
	wire          sram_0_s2_cmd_width_adapter_src_valid;                      // sram_0_s2_cmd_width_adapter:out_valid -> sram_0_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_0_s2_cmd_width_adapter_src_data;                       // sram_0_s2_cmd_width_adapter:out_data -> sram_0_s2_burst_adapter:sink0_data
	wire          sram_0_s2_cmd_width_adapter_src_ready;                      // sram_0_s2_burst_adapter:sink0_ready -> sram_0_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_0_s2_cmd_width_adapter_src_channel;                    // sram_0_s2_cmd_width_adapter:out_channel -> sram_0_s2_burst_adapter:sink0_channel
	wire          sram_0_s2_cmd_width_adapter_src_startofpacket;              // sram_0_s2_cmd_width_adapter:out_startofpacket -> sram_0_s2_burst_adapter:sink0_startofpacket
	wire          sram_0_s2_cmd_width_adapter_src_endofpacket;                // sram_0_s2_cmd_width_adapter:out_endofpacket -> sram_0_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                      // cmd_mux_002:src_valid -> sram_1_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_002_src_data;                                       // cmd_mux_002:src_data -> sram_1_s2_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                      // sram_1_s2_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire   [20:0] cmd_mux_002_src_channel;                                    // cmd_mux_002:src_channel -> sram_1_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                              // cmd_mux_002:src_startofpacket -> sram_1_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                // cmd_mux_002:src_endofpacket -> sram_1_s2_cmd_width_adapter:in_endofpacket
	wire          sram_1_s2_cmd_width_adapter_src_valid;                      // sram_1_s2_cmd_width_adapter:out_valid -> sram_1_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_1_s2_cmd_width_adapter_src_data;                       // sram_1_s2_cmd_width_adapter:out_data -> sram_1_s2_burst_adapter:sink0_data
	wire          sram_1_s2_cmd_width_adapter_src_ready;                      // sram_1_s2_burst_adapter:sink0_ready -> sram_1_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_1_s2_cmd_width_adapter_src_channel;                    // sram_1_s2_cmd_width_adapter:out_channel -> sram_1_s2_burst_adapter:sink0_channel
	wire          sram_1_s2_cmd_width_adapter_src_startofpacket;              // sram_1_s2_cmd_width_adapter:out_startofpacket -> sram_1_s2_burst_adapter:sink0_startofpacket
	wire          sram_1_s2_cmd_width_adapter_src_endofpacket;                // sram_1_s2_cmd_width_adapter:out_endofpacket -> sram_1_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                      // cmd_mux_003:src_valid -> sram_2_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_003_src_data;                                       // cmd_mux_003:src_data -> sram_2_s2_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                      // sram_2_s2_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [20:0] cmd_mux_003_src_channel;                                    // cmd_mux_003:src_channel -> sram_2_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                              // cmd_mux_003:src_startofpacket -> sram_2_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                // cmd_mux_003:src_endofpacket -> sram_2_s2_cmd_width_adapter:in_endofpacket
	wire          sram_2_s2_cmd_width_adapter_src_valid;                      // sram_2_s2_cmd_width_adapter:out_valid -> sram_2_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_2_s2_cmd_width_adapter_src_data;                       // sram_2_s2_cmd_width_adapter:out_data -> sram_2_s2_burst_adapter:sink0_data
	wire          sram_2_s2_cmd_width_adapter_src_ready;                      // sram_2_s2_burst_adapter:sink0_ready -> sram_2_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_2_s2_cmd_width_adapter_src_channel;                    // sram_2_s2_cmd_width_adapter:out_channel -> sram_2_s2_burst_adapter:sink0_channel
	wire          sram_2_s2_cmd_width_adapter_src_startofpacket;              // sram_2_s2_cmd_width_adapter:out_startofpacket -> sram_2_s2_burst_adapter:sink0_startofpacket
	wire          sram_2_s2_cmd_width_adapter_src_endofpacket;                // sram_2_s2_cmd_width_adapter:out_endofpacket -> sram_2_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                      // cmd_mux_004:src_valid -> sram_3_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_004_src_data;                                       // cmd_mux_004:src_data -> sram_3_s2_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                      // sram_3_s2_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [20:0] cmd_mux_004_src_channel;                                    // cmd_mux_004:src_channel -> sram_3_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                              // cmd_mux_004:src_startofpacket -> sram_3_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                // cmd_mux_004:src_endofpacket -> sram_3_s2_cmd_width_adapter:in_endofpacket
	wire          sram_3_s2_cmd_width_adapter_src_valid;                      // sram_3_s2_cmd_width_adapter:out_valid -> sram_3_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_3_s2_cmd_width_adapter_src_data;                       // sram_3_s2_cmd_width_adapter:out_data -> sram_3_s2_burst_adapter:sink0_data
	wire          sram_3_s2_cmd_width_adapter_src_ready;                      // sram_3_s2_burst_adapter:sink0_ready -> sram_3_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_3_s2_cmd_width_adapter_src_channel;                    // sram_3_s2_cmd_width_adapter:out_channel -> sram_3_s2_burst_adapter:sink0_channel
	wire          sram_3_s2_cmd_width_adapter_src_startofpacket;              // sram_3_s2_cmd_width_adapter:out_startofpacket -> sram_3_s2_burst_adapter:sink0_startofpacket
	wire          sram_3_s2_cmd_width_adapter_src_endofpacket;                // sram_3_s2_cmd_width_adapter:out_endofpacket -> sram_3_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                      // cmd_mux_005:src_valid -> sram_4_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_005_src_data;                                       // cmd_mux_005:src_data -> sram_4_s2_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                      // sram_4_s2_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [20:0] cmd_mux_005_src_channel;                                    // cmd_mux_005:src_channel -> sram_4_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                              // cmd_mux_005:src_startofpacket -> sram_4_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                // cmd_mux_005:src_endofpacket -> sram_4_s2_cmd_width_adapter:in_endofpacket
	wire          sram_4_s2_cmd_width_adapter_src_valid;                      // sram_4_s2_cmd_width_adapter:out_valid -> sram_4_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_4_s2_cmd_width_adapter_src_data;                       // sram_4_s2_cmd_width_adapter:out_data -> sram_4_s2_burst_adapter:sink0_data
	wire          sram_4_s2_cmd_width_adapter_src_ready;                      // sram_4_s2_burst_adapter:sink0_ready -> sram_4_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_4_s2_cmd_width_adapter_src_channel;                    // sram_4_s2_cmd_width_adapter:out_channel -> sram_4_s2_burst_adapter:sink0_channel
	wire          sram_4_s2_cmd_width_adapter_src_startofpacket;              // sram_4_s2_cmd_width_adapter:out_startofpacket -> sram_4_s2_burst_adapter:sink0_startofpacket
	wire          sram_4_s2_cmd_width_adapter_src_endofpacket;                // sram_4_s2_cmd_width_adapter:out_endofpacket -> sram_4_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                      // cmd_mux_006:src_valid -> sram_5_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_006_src_data;                                       // cmd_mux_006:src_data -> sram_5_s2_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                      // sram_5_s2_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [20:0] cmd_mux_006_src_channel;                                    // cmd_mux_006:src_channel -> sram_5_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                              // cmd_mux_006:src_startofpacket -> sram_5_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                // cmd_mux_006:src_endofpacket -> sram_5_s2_cmd_width_adapter:in_endofpacket
	wire          sram_5_s2_cmd_width_adapter_src_valid;                      // sram_5_s2_cmd_width_adapter:out_valid -> sram_5_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_5_s2_cmd_width_adapter_src_data;                       // sram_5_s2_cmd_width_adapter:out_data -> sram_5_s2_burst_adapter:sink0_data
	wire          sram_5_s2_cmd_width_adapter_src_ready;                      // sram_5_s2_burst_adapter:sink0_ready -> sram_5_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_5_s2_cmd_width_adapter_src_channel;                    // sram_5_s2_cmd_width_adapter:out_channel -> sram_5_s2_burst_adapter:sink0_channel
	wire          sram_5_s2_cmd_width_adapter_src_startofpacket;              // sram_5_s2_cmd_width_adapter:out_startofpacket -> sram_5_s2_burst_adapter:sink0_startofpacket
	wire          sram_5_s2_cmd_width_adapter_src_endofpacket;                // sram_5_s2_cmd_width_adapter:out_endofpacket -> sram_5_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                      // cmd_mux_007:src_valid -> sram_6_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_007_src_data;                                       // cmd_mux_007:src_data -> sram_6_s2_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                      // sram_6_s2_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [20:0] cmd_mux_007_src_channel;                                    // cmd_mux_007:src_channel -> sram_6_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                              // cmd_mux_007:src_startofpacket -> sram_6_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                // cmd_mux_007:src_endofpacket -> sram_6_s2_cmd_width_adapter:in_endofpacket
	wire          sram_6_s2_cmd_width_adapter_src_valid;                      // sram_6_s2_cmd_width_adapter:out_valid -> sram_6_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_6_s2_cmd_width_adapter_src_data;                       // sram_6_s2_cmd_width_adapter:out_data -> sram_6_s2_burst_adapter:sink0_data
	wire          sram_6_s2_cmd_width_adapter_src_ready;                      // sram_6_s2_burst_adapter:sink0_ready -> sram_6_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_6_s2_cmd_width_adapter_src_channel;                    // sram_6_s2_cmd_width_adapter:out_channel -> sram_6_s2_burst_adapter:sink0_channel
	wire          sram_6_s2_cmd_width_adapter_src_startofpacket;              // sram_6_s2_cmd_width_adapter:out_startofpacket -> sram_6_s2_burst_adapter:sink0_startofpacket
	wire          sram_6_s2_cmd_width_adapter_src_endofpacket;                // sram_6_s2_cmd_width_adapter:out_endofpacket -> sram_6_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                      // cmd_mux_008:src_valid -> sram_7_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_008_src_data;                                       // cmd_mux_008:src_data -> sram_7_s2_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                      // sram_7_s2_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [20:0] cmd_mux_008_src_channel;                                    // cmd_mux_008:src_channel -> sram_7_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                              // cmd_mux_008:src_startofpacket -> sram_7_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                // cmd_mux_008:src_endofpacket -> sram_7_s2_cmd_width_adapter:in_endofpacket
	wire          sram_7_s2_cmd_width_adapter_src_valid;                      // sram_7_s2_cmd_width_adapter:out_valid -> sram_7_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_7_s2_cmd_width_adapter_src_data;                       // sram_7_s2_cmd_width_adapter:out_data -> sram_7_s2_burst_adapter:sink0_data
	wire          sram_7_s2_cmd_width_adapter_src_ready;                      // sram_7_s2_burst_adapter:sink0_ready -> sram_7_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_7_s2_cmd_width_adapter_src_channel;                    // sram_7_s2_cmd_width_adapter:out_channel -> sram_7_s2_burst_adapter:sink0_channel
	wire          sram_7_s2_cmd_width_adapter_src_startofpacket;              // sram_7_s2_cmd_width_adapter:out_startofpacket -> sram_7_s2_burst_adapter:sink0_startofpacket
	wire          sram_7_s2_cmd_width_adapter_src_endofpacket;                // sram_7_s2_cmd_width_adapter:out_endofpacket -> sram_7_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                      // cmd_mux_009:src_valid -> sram_8_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_009_src_data;                                       // cmd_mux_009:src_data -> sram_8_s2_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                      // sram_8_s2_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [20:0] cmd_mux_009_src_channel;                                    // cmd_mux_009:src_channel -> sram_8_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                              // cmd_mux_009:src_startofpacket -> sram_8_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                // cmd_mux_009:src_endofpacket -> sram_8_s2_cmd_width_adapter:in_endofpacket
	wire          sram_8_s2_cmd_width_adapter_src_valid;                      // sram_8_s2_cmd_width_adapter:out_valid -> sram_8_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_8_s2_cmd_width_adapter_src_data;                       // sram_8_s2_cmd_width_adapter:out_data -> sram_8_s2_burst_adapter:sink0_data
	wire          sram_8_s2_cmd_width_adapter_src_ready;                      // sram_8_s2_burst_adapter:sink0_ready -> sram_8_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_8_s2_cmd_width_adapter_src_channel;                    // sram_8_s2_cmd_width_adapter:out_channel -> sram_8_s2_burst_adapter:sink0_channel
	wire          sram_8_s2_cmd_width_adapter_src_startofpacket;              // sram_8_s2_cmd_width_adapter:out_startofpacket -> sram_8_s2_burst_adapter:sink0_startofpacket
	wire          sram_8_s2_cmd_width_adapter_src_endofpacket;                // sram_8_s2_cmd_width_adapter:out_endofpacket -> sram_8_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                      // cmd_mux_010:src_valid -> sram_9_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_010_src_data;                                       // cmd_mux_010:src_data -> sram_9_s2_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                      // sram_9_s2_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [20:0] cmd_mux_010_src_channel;                                    // cmd_mux_010:src_channel -> sram_9_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                              // cmd_mux_010:src_startofpacket -> sram_9_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                // cmd_mux_010:src_endofpacket -> sram_9_s2_cmd_width_adapter:in_endofpacket
	wire          sram_9_s2_cmd_width_adapter_src_valid;                      // sram_9_s2_cmd_width_adapter:out_valid -> sram_9_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_9_s2_cmd_width_adapter_src_data;                       // sram_9_s2_cmd_width_adapter:out_data -> sram_9_s2_burst_adapter:sink0_data
	wire          sram_9_s2_cmd_width_adapter_src_ready;                      // sram_9_s2_burst_adapter:sink0_ready -> sram_9_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_9_s2_cmd_width_adapter_src_channel;                    // sram_9_s2_cmd_width_adapter:out_channel -> sram_9_s2_burst_adapter:sink0_channel
	wire          sram_9_s2_cmd_width_adapter_src_startofpacket;              // sram_9_s2_cmd_width_adapter:out_startofpacket -> sram_9_s2_burst_adapter:sink0_startofpacket
	wire          sram_9_s2_cmd_width_adapter_src_endofpacket;                // sram_9_s2_cmd_width_adapter:out_endofpacket -> sram_9_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                      // cmd_mux_011:src_valid -> sram_10_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_011_src_data;                                       // cmd_mux_011:src_data -> sram_10_s2_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                      // sram_10_s2_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [20:0] cmd_mux_011_src_channel;                                    // cmd_mux_011:src_channel -> sram_10_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                              // cmd_mux_011:src_startofpacket -> sram_10_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                // cmd_mux_011:src_endofpacket -> sram_10_s2_cmd_width_adapter:in_endofpacket
	wire          sram_10_s2_cmd_width_adapter_src_valid;                     // sram_10_s2_cmd_width_adapter:out_valid -> sram_10_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_10_s2_cmd_width_adapter_src_data;                      // sram_10_s2_cmd_width_adapter:out_data -> sram_10_s2_burst_adapter:sink0_data
	wire          sram_10_s2_cmd_width_adapter_src_ready;                     // sram_10_s2_burst_adapter:sink0_ready -> sram_10_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_10_s2_cmd_width_adapter_src_channel;                   // sram_10_s2_cmd_width_adapter:out_channel -> sram_10_s2_burst_adapter:sink0_channel
	wire          sram_10_s2_cmd_width_adapter_src_startofpacket;             // sram_10_s2_cmd_width_adapter:out_startofpacket -> sram_10_s2_burst_adapter:sink0_startofpacket
	wire          sram_10_s2_cmd_width_adapter_src_endofpacket;               // sram_10_s2_cmd_width_adapter:out_endofpacket -> sram_10_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                      // cmd_mux_012:src_valid -> sram_11_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_012_src_data;                                       // cmd_mux_012:src_data -> sram_11_s2_cmd_width_adapter:in_data
	wire          cmd_mux_012_src_ready;                                      // sram_11_s2_cmd_width_adapter:in_ready -> cmd_mux_012:src_ready
	wire   [20:0] cmd_mux_012_src_channel;                                    // cmd_mux_012:src_channel -> sram_11_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_012_src_startofpacket;                              // cmd_mux_012:src_startofpacket -> sram_11_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                // cmd_mux_012:src_endofpacket -> sram_11_s2_cmd_width_adapter:in_endofpacket
	wire          sram_11_s2_cmd_width_adapter_src_valid;                     // sram_11_s2_cmd_width_adapter:out_valid -> sram_11_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_11_s2_cmd_width_adapter_src_data;                      // sram_11_s2_cmd_width_adapter:out_data -> sram_11_s2_burst_adapter:sink0_data
	wire          sram_11_s2_cmd_width_adapter_src_ready;                     // sram_11_s2_burst_adapter:sink0_ready -> sram_11_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_11_s2_cmd_width_adapter_src_channel;                   // sram_11_s2_cmd_width_adapter:out_channel -> sram_11_s2_burst_adapter:sink0_channel
	wire          sram_11_s2_cmd_width_adapter_src_startofpacket;             // sram_11_s2_cmd_width_adapter:out_startofpacket -> sram_11_s2_burst_adapter:sink0_startofpacket
	wire          sram_11_s2_cmd_width_adapter_src_endofpacket;               // sram_11_s2_cmd_width_adapter:out_endofpacket -> sram_11_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                      // cmd_mux_013:src_valid -> sram_12_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_013_src_data;                                       // cmd_mux_013:src_data -> sram_12_s2_cmd_width_adapter:in_data
	wire          cmd_mux_013_src_ready;                                      // sram_12_s2_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire   [20:0] cmd_mux_013_src_channel;                                    // cmd_mux_013:src_channel -> sram_12_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_013_src_startofpacket;                              // cmd_mux_013:src_startofpacket -> sram_12_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                // cmd_mux_013:src_endofpacket -> sram_12_s2_cmd_width_adapter:in_endofpacket
	wire          sram_12_s2_cmd_width_adapter_src_valid;                     // sram_12_s2_cmd_width_adapter:out_valid -> sram_12_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_12_s2_cmd_width_adapter_src_data;                      // sram_12_s2_cmd_width_adapter:out_data -> sram_12_s2_burst_adapter:sink0_data
	wire          sram_12_s2_cmd_width_adapter_src_ready;                     // sram_12_s2_burst_adapter:sink0_ready -> sram_12_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_12_s2_cmd_width_adapter_src_channel;                   // sram_12_s2_cmd_width_adapter:out_channel -> sram_12_s2_burst_adapter:sink0_channel
	wire          sram_12_s2_cmd_width_adapter_src_startofpacket;             // sram_12_s2_cmd_width_adapter:out_startofpacket -> sram_12_s2_burst_adapter:sink0_startofpacket
	wire          sram_12_s2_cmd_width_adapter_src_endofpacket;               // sram_12_s2_cmd_width_adapter:out_endofpacket -> sram_12_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                      // cmd_mux_014:src_valid -> sram_13_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_014_src_data;                                       // cmd_mux_014:src_data -> sram_13_s2_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                      // sram_13_s2_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [20:0] cmd_mux_014_src_channel;                                    // cmd_mux_014:src_channel -> sram_13_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                              // cmd_mux_014:src_startofpacket -> sram_13_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                // cmd_mux_014:src_endofpacket -> sram_13_s2_cmd_width_adapter:in_endofpacket
	wire          sram_13_s2_cmd_width_adapter_src_valid;                     // sram_13_s2_cmd_width_adapter:out_valid -> sram_13_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_13_s2_cmd_width_adapter_src_data;                      // sram_13_s2_cmd_width_adapter:out_data -> sram_13_s2_burst_adapter:sink0_data
	wire          sram_13_s2_cmd_width_adapter_src_ready;                     // sram_13_s2_burst_adapter:sink0_ready -> sram_13_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_13_s2_cmd_width_adapter_src_channel;                   // sram_13_s2_cmd_width_adapter:out_channel -> sram_13_s2_burst_adapter:sink0_channel
	wire          sram_13_s2_cmd_width_adapter_src_startofpacket;             // sram_13_s2_cmd_width_adapter:out_startofpacket -> sram_13_s2_burst_adapter:sink0_startofpacket
	wire          sram_13_s2_cmd_width_adapter_src_endofpacket;               // sram_13_s2_cmd_width_adapter:out_endofpacket -> sram_13_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                      // cmd_mux_015:src_valid -> sram_14_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_015_src_data;                                       // cmd_mux_015:src_data -> sram_14_s2_cmd_width_adapter:in_data
	wire          cmd_mux_015_src_ready;                                      // sram_14_s2_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire   [20:0] cmd_mux_015_src_channel;                                    // cmd_mux_015:src_channel -> sram_14_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_015_src_startofpacket;                              // cmd_mux_015:src_startofpacket -> sram_14_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                // cmd_mux_015:src_endofpacket -> sram_14_s2_cmd_width_adapter:in_endofpacket
	wire          sram_14_s2_cmd_width_adapter_src_valid;                     // sram_14_s2_cmd_width_adapter:out_valid -> sram_14_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_14_s2_cmd_width_adapter_src_data;                      // sram_14_s2_cmd_width_adapter:out_data -> sram_14_s2_burst_adapter:sink0_data
	wire          sram_14_s2_cmd_width_adapter_src_ready;                     // sram_14_s2_burst_adapter:sink0_ready -> sram_14_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_14_s2_cmd_width_adapter_src_channel;                   // sram_14_s2_cmd_width_adapter:out_channel -> sram_14_s2_burst_adapter:sink0_channel
	wire          sram_14_s2_cmd_width_adapter_src_startofpacket;             // sram_14_s2_cmd_width_adapter:out_startofpacket -> sram_14_s2_burst_adapter:sink0_startofpacket
	wire          sram_14_s2_cmd_width_adapter_src_endofpacket;               // sram_14_s2_cmd_width_adapter:out_endofpacket -> sram_14_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                      // cmd_mux_016:src_valid -> sram_15_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_016_src_data;                                       // cmd_mux_016:src_data -> sram_15_s2_cmd_width_adapter:in_data
	wire          cmd_mux_016_src_ready;                                      // sram_15_s2_cmd_width_adapter:in_ready -> cmd_mux_016:src_ready
	wire   [20:0] cmd_mux_016_src_channel;                                    // cmd_mux_016:src_channel -> sram_15_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_016_src_startofpacket;                              // cmd_mux_016:src_startofpacket -> sram_15_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                // cmd_mux_016:src_endofpacket -> sram_15_s2_cmd_width_adapter:in_endofpacket
	wire          sram_15_s2_cmd_width_adapter_src_valid;                     // sram_15_s2_cmd_width_adapter:out_valid -> sram_15_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_15_s2_cmd_width_adapter_src_data;                      // sram_15_s2_cmd_width_adapter:out_data -> sram_15_s2_burst_adapter:sink0_data
	wire          sram_15_s2_cmd_width_adapter_src_ready;                     // sram_15_s2_burst_adapter:sink0_ready -> sram_15_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_15_s2_cmd_width_adapter_src_channel;                   // sram_15_s2_cmd_width_adapter:out_channel -> sram_15_s2_burst_adapter:sink0_channel
	wire          sram_15_s2_cmd_width_adapter_src_startofpacket;             // sram_15_s2_cmd_width_adapter:out_startofpacket -> sram_15_s2_burst_adapter:sink0_startofpacket
	wire          sram_15_s2_cmd_width_adapter_src_endofpacket;               // sram_15_s2_cmd_width_adapter:out_endofpacket -> sram_15_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                      // cmd_mux_017:src_valid -> sram_16_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_017_src_data;                                       // cmd_mux_017:src_data -> sram_16_s2_cmd_width_adapter:in_data
	wire          cmd_mux_017_src_ready;                                      // sram_16_s2_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire   [20:0] cmd_mux_017_src_channel;                                    // cmd_mux_017:src_channel -> sram_16_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_017_src_startofpacket;                              // cmd_mux_017:src_startofpacket -> sram_16_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                // cmd_mux_017:src_endofpacket -> sram_16_s2_cmd_width_adapter:in_endofpacket
	wire          sram_16_s2_cmd_width_adapter_src_valid;                     // sram_16_s2_cmd_width_adapter:out_valid -> sram_16_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_16_s2_cmd_width_adapter_src_data;                      // sram_16_s2_cmd_width_adapter:out_data -> sram_16_s2_burst_adapter:sink0_data
	wire          sram_16_s2_cmd_width_adapter_src_ready;                     // sram_16_s2_burst_adapter:sink0_ready -> sram_16_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_16_s2_cmd_width_adapter_src_channel;                   // sram_16_s2_cmd_width_adapter:out_channel -> sram_16_s2_burst_adapter:sink0_channel
	wire          sram_16_s2_cmd_width_adapter_src_startofpacket;             // sram_16_s2_cmd_width_adapter:out_startofpacket -> sram_16_s2_burst_adapter:sink0_startofpacket
	wire          sram_16_s2_cmd_width_adapter_src_endofpacket;               // sram_16_s2_cmd_width_adapter:out_endofpacket -> sram_16_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                      // cmd_mux_018:src_valid -> sram_17_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_018_src_data;                                       // cmd_mux_018:src_data -> sram_17_s2_cmd_width_adapter:in_data
	wire          cmd_mux_018_src_ready;                                      // sram_17_s2_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire   [20:0] cmd_mux_018_src_channel;                                    // cmd_mux_018:src_channel -> sram_17_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_018_src_startofpacket;                              // cmd_mux_018:src_startofpacket -> sram_17_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                // cmd_mux_018:src_endofpacket -> sram_17_s2_cmd_width_adapter:in_endofpacket
	wire          sram_17_s2_cmd_width_adapter_src_valid;                     // sram_17_s2_cmd_width_adapter:out_valid -> sram_17_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_17_s2_cmd_width_adapter_src_data;                      // sram_17_s2_cmd_width_adapter:out_data -> sram_17_s2_burst_adapter:sink0_data
	wire          sram_17_s2_cmd_width_adapter_src_ready;                     // sram_17_s2_burst_adapter:sink0_ready -> sram_17_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_17_s2_cmd_width_adapter_src_channel;                   // sram_17_s2_cmd_width_adapter:out_channel -> sram_17_s2_burst_adapter:sink0_channel
	wire          sram_17_s2_cmd_width_adapter_src_startofpacket;             // sram_17_s2_cmd_width_adapter:out_startofpacket -> sram_17_s2_burst_adapter:sink0_startofpacket
	wire          sram_17_s2_cmd_width_adapter_src_endofpacket;               // sram_17_s2_cmd_width_adapter:out_endofpacket -> sram_17_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                      // cmd_mux_019:src_valid -> sram_18_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_019_src_data;                                       // cmd_mux_019:src_data -> sram_18_s2_cmd_width_adapter:in_data
	wire          cmd_mux_019_src_ready;                                      // sram_18_s2_cmd_width_adapter:in_ready -> cmd_mux_019:src_ready
	wire   [20:0] cmd_mux_019_src_channel;                                    // cmd_mux_019:src_channel -> sram_18_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_019_src_startofpacket;                              // cmd_mux_019:src_startofpacket -> sram_18_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                // cmd_mux_019:src_endofpacket -> sram_18_s2_cmd_width_adapter:in_endofpacket
	wire          sram_18_s2_cmd_width_adapter_src_valid;                     // sram_18_s2_cmd_width_adapter:out_valid -> sram_18_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_18_s2_cmd_width_adapter_src_data;                      // sram_18_s2_cmd_width_adapter:out_data -> sram_18_s2_burst_adapter:sink0_data
	wire          sram_18_s2_cmd_width_adapter_src_ready;                     // sram_18_s2_burst_adapter:sink0_ready -> sram_18_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_18_s2_cmd_width_adapter_src_channel;                   // sram_18_s2_cmd_width_adapter:out_channel -> sram_18_s2_burst_adapter:sink0_channel
	wire          sram_18_s2_cmd_width_adapter_src_startofpacket;             // sram_18_s2_cmd_width_adapter:out_startofpacket -> sram_18_s2_burst_adapter:sink0_startofpacket
	wire          sram_18_s2_cmd_width_adapter_src_endofpacket;               // sram_18_s2_cmd_width_adapter:out_endofpacket -> sram_18_s2_burst_adapter:sink0_endofpacket
	wire          cmd_mux_020_src_valid;                                      // cmd_mux_020:src_valid -> sram_19_s2_cmd_width_adapter:in_valid
	wire  [240:0] cmd_mux_020_src_data;                                       // cmd_mux_020:src_data -> sram_19_s2_cmd_width_adapter:in_data
	wire          cmd_mux_020_src_ready;                                      // sram_19_s2_cmd_width_adapter:in_ready -> cmd_mux_020:src_ready
	wire   [20:0] cmd_mux_020_src_channel;                                    // cmd_mux_020:src_channel -> sram_19_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_020_src_startofpacket;                              // cmd_mux_020:src_startofpacket -> sram_19_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                // cmd_mux_020:src_endofpacket -> sram_19_s2_cmd_width_adapter:in_endofpacket
	wire          sram_19_s2_cmd_width_adapter_src_valid;                     // sram_19_s2_cmd_width_adapter:out_valid -> sram_19_s2_burst_adapter:sink0_valid
	wire  [114:0] sram_19_s2_cmd_width_adapter_src_data;                      // sram_19_s2_cmd_width_adapter:out_data -> sram_19_s2_burst_adapter:sink0_data
	wire          sram_19_s2_cmd_width_adapter_src_ready;                     // sram_19_s2_burst_adapter:sink0_ready -> sram_19_s2_cmd_width_adapter:out_ready
	wire   [20:0] sram_19_s2_cmd_width_adapter_src_channel;                   // sram_19_s2_cmd_width_adapter:out_channel -> sram_19_s2_burst_adapter:sink0_channel
	wire          sram_19_s2_cmd_width_adapter_src_startofpacket;             // sram_19_s2_cmd_width_adapter:out_startofpacket -> sram_19_s2_burst_adapter:sink0_startofpacket
	wire          sram_19_s2_cmd_width_adapter_src_endofpacket;               // sram_19_s2_cmd_width_adapter:out_endofpacket -> sram_19_s2_burst_adapter:sink0_endofpacket
	wire   [20:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data;        // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [20:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data;        // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          inst_sram_s2_agent_rdata_fifo_out_valid;                    // inst_sram_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] inst_sram_s2_agent_rdata_fifo_out_data;                     // inst_sram_s2_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          inst_sram_s2_agent_rdata_fifo_out_ready;                    // avalon_st_adapter:in_0_ready -> inst_sram_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                              // avalon_st_adapter:out_0_valid -> inst_sram_s2_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                               // avalon_st_adapter:out_0_data -> inst_sram_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                              // inst_sram_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                              // avalon_st_adapter:out_0_error -> inst_sram_s2_agent:rdata_fifo_sink_error
	wire          sram_0_s2_agent_rdata_fifo_out_valid;                       // sram_0_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] sram_0_s2_agent_rdata_fifo_out_data;                        // sram_0_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sram_0_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> sram_0_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                          // avalon_st_adapter_001:out_0_valid -> sram_0_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                           // avalon_st_adapter_001:out_0_data -> sram_0_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                          // sram_0_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                          // avalon_st_adapter_001:out_0_error -> sram_0_s2_agent:rdata_fifo_sink_error
	wire          sram_1_s2_agent_rdata_fifo_out_valid;                       // sram_1_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [17:0] sram_1_s2_agent_rdata_fifo_out_data;                        // sram_1_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sram_1_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_002:in_0_ready -> sram_1_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                          // avalon_st_adapter_002:out_0_valid -> sram_1_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_002_out_0_data;                           // avalon_st_adapter_002:out_0_data -> sram_1_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                          // sram_1_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                          // avalon_st_adapter_002:out_0_error -> sram_1_s2_agent:rdata_fifo_sink_error
	wire          sram_2_s2_agent_rdata_fifo_out_valid;                       // sram_2_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] sram_2_s2_agent_rdata_fifo_out_data;                        // sram_2_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sram_2_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_003:in_0_ready -> sram_2_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                          // avalon_st_adapter_003:out_0_valid -> sram_2_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                           // avalon_st_adapter_003:out_0_data -> sram_2_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                          // sram_2_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                          // avalon_st_adapter_003:out_0_error -> sram_2_s2_agent:rdata_fifo_sink_error
	wire          sram_3_s2_agent_rdata_fifo_out_valid;                       // sram_3_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [17:0] sram_3_s2_agent_rdata_fifo_out_data;                        // sram_3_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sram_3_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_004:in_0_ready -> sram_3_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                          // avalon_st_adapter_004:out_0_valid -> sram_3_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_004_out_0_data;                           // avalon_st_adapter_004:out_0_data -> sram_3_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                          // sram_3_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                          // avalon_st_adapter_004:out_0_error -> sram_3_s2_agent:rdata_fifo_sink_error
	wire          sram_4_s2_agent_rdata_fifo_out_valid;                       // sram_4_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] sram_4_s2_agent_rdata_fifo_out_data;                        // sram_4_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          sram_4_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_005:in_0_ready -> sram_4_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                          // avalon_st_adapter_005:out_0_valid -> sram_4_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                           // avalon_st_adapter_005:out_0_data -> sram_4_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                          // sram_4_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                          // avalon_st_adapter_005:out_0_error -> sram_4_s2_agent:rdata_fifo_sink_error
	wire          sram_5_s2_agent_rdata_fifo_out_valid;                       // sram_5_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [17:0] sram_5_s2_agent_rdata_fifo_out_data;                        // sram_5_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          sram_5_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_006:in_0_ready -> sram_5_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                          // avalon_st_adapter_006:out_0_valid -> sram_5_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_006_out_0_data;                           // avalon_st_adapter_006:out_0_data -> sram_5_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                          // sram_5_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                          // avalon_st_adapter_006:out_0_error -> sram_5_s2_agent:rdata_fifo_sink_error
	wire          sram_6_s2_agent_rdata_fifo_out_valid;                       // sram_6_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [17:0] sram_6_s2_agent_rdata_fifo_out_data;                        // sram_6_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          sram_6_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_007:in_0_ready -> sram_6_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                          // avalon_st_adapter_007:out_0_valid -> sram_6_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_007_out_0_data;                           // avalon_st_adapter_007:out_0_data -> sram_6_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                          // sram_6_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                          // avalon_st_adapter_007:out_0_error -> sram_6_s2_agent:rdata_fifo_sink_error
	wire          sram_7_s2_agent_rdata_fifo_out_valid;                       // sram_7_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [17:0] sram_7_s2_agent_rdata_fifo_out_data;                        // sram_7_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          sram_7_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_008:in_0_ready -> sram_7_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                          // avalon_st_adapter_008:out_0_valid -> sram_7_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_008_out_0_data;                           // avalon_st_adapter_008:out_0_data -> sram_7_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                          // sram_7_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                          // avalon_st_adapter_008:out_0_error -> sram_7_s2_agent:rdata_fifo_sink_error
	wire          sram_8_s2_agent_rdata_fifo_out_valid;                       // sram_8_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [17:0] sram_8_s2_agent_rdata_fifo_out_data;                        // sram_8_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          sram_8_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_009:in_0_ready -> sram_8_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                          // avalon_st_adapter_009:out_0_valid -> sram_8_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_009_out_0_data;                           // avalon_st_adapter_009:out_0_data -> sram_8_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                          // sram_8_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                          // avalon_st_adapter_009:out_0_error -> sram_8_s2_agent:rdata_fifo_sink_error
	wire          sram_9_s2_agent_rdata_fifo_out_valid;                       // sram_9_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [17:0] sram_9_s2_agent_rdata_fifo_out_data;                        // sram_9_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          sram_9_s2_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_010:in_0_ready -> sram_9_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                          // avalon_st_adapter_010:out_0_valid -> sram_9_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_010_out_0_data;                           // avalon_st_adapter_010:out_0_data -> sram_9_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                          // sram_9_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                          // avalon_st_adapter_010:out_0_error -> sram_9_s2_agent:rdata_fifo_sink_error
	wire          sram_10_s2_agent_rdata_fifo_out_valid;                      // sram_10_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [17:0] sram_10_s2_agent_rdata_fifo_out_data;                       // sram_10_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          sram_10_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_011:in_0_ready -> sram_10_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                          // avalon_st_adapter_011:out_0_valid -> sram_10_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_011_out_0_data;                           // avalon_st_adapter_011:out_0_data -> sram_10_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                          // sram_10_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                          // avalon_st_adapter_011:out_0_error -> sram_10_s2_agent:rdata_fifo_sink_error
	wire          sram_11_s2_agent_rdata_fifo_out_valid;                      // sram_11_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [17:0] sram_11_s2_agent_rdata_fifo_out_data;                       // sram_11_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          sram_11_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_012:in_0_ready -> sram_11_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                          // avalon_st_adapter_012:out_0_valid -> sram_11_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_012_out_0_data;                           // avalon_st_adapter_012:out_0_data -> sram_11_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                          // sram_11_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                          // avalon_st_adapter_012:out_0_error -> sram_11_s2_agent:rdata_fifo_sink_error
	wire          sram_12_s2_agent_rdata_fifo_out_valid;                      // sram_12_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [17:0] sram_12_s2_agent_rdata_fifo_out_data;                       // sram_12_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          sram_12_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_013:in_0_ready -> sram_12_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                          // avalon_st_adapter_013:out_0_valid -> sram_12_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_013_out_0_data;                           // avalon_st_adapter_013:out_0_data -> sram_12_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                          // sram_12_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                          // avalon_st_adapter_013:out_0_error -> sram_12_s2_agent:rdata_fifo_sink_error
	wire          sram_13_s2_agent_rdata_fifo_out_valid;                      // sram_13_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [17:0] sram_13_s2_agent_rdata_fifo_out_data;                       // sram_13_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          sram_13_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_014:in_0_ready -> sram_13_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                          // avalon_st_adapter_014:out_0_valid -> sram_13_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_014_out_0_data;                           // avalon_st_adapter_014:out_0_data -> sram_13_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                          // sram_13_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                          // avalon_st_adapter_014:out_0_error -> sram_13_s2_agent:rdata_fifo_sink_error
	wire          sram_14_s2_agent_rdata_fifo_out_valid;                      // sram_14_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [17:0] sram_14_s2_agent_rdata_fifo_out_data;                       // sram_14_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          sram_14_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_015:in_0_ready -> sram_14_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                          // avalon_st_adapter_015:out_0_valid -> sram_14_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_015_out_0_data;                           // avalon_st_adapter_015:out_0_data -> sram_14_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                          // sram_14_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                          // avalon_st_adapter_015:out_0_error -> sram_14_s2_agent:rdata_fifo_sink_error
	wire          sram_15_s2_agent_rdata_fifo_out_valid;                      // sram_15_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [17:0] sram_15_s2_agent_rdata_fifo_out_data;                       // sram_15_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          sram_15_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_016:in_0_ready -> sram_15_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                          // avalon_st_adapter_016:out_0_valid -> sram_15_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_016_out_0_data;                           // avalon_st_adapter_016:out_0_data -> sram_15_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                          // sram_15_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                          // avalon_st_adapter_016:out_0_error -> sram_15_s2_agent:rdata_fifo_sink_error
	wire          sram_16_s2_agent_rdata_fifo_out_valid;                      // sram_16_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [17:0] sram_16_s2_agent_rdata_fifo_out_data;                       // sram_16_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          sram_16_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_017:in_0_ready -> sram_16_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                          // avalon_st_adapter_017:out_0_valid -> sram_16_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_017_out_0_data;                           // avalon_st_adapter_017:out_0_data -> sram_16_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                          // sram_16_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                          // avalon_st_adapter_017:out_0_error -> sram_16_s2_agent:rdata_fifo_sink_error
	wire          sram_17_s2_agent_rdata_fifo_out_valid;                      // sram_17_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [17:0] sram_17_s2_agent_rdata_fifo_out_data;                       // sram_17_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          sram_17_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_018:in_0_ready -> sram_17_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                          // avalon_st_adapter_018:out_0_valid -> sram_17_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_018_out_0_data;                           // avalon_st_adapter_018:out_0_data -> sram_17_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                          // sram_17_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                          // avalon_st_adapter_018:out_0_error -> sram_17_s2_agent:rdata_fifo_sink_error
	wire          sram_18_s2_agent_rdata_fifo_out_valid;                      // sram_18_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [17:0] sram_18_s2_agent_rdata_fifo_out_data;                       // sram_18_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          sram_18_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_019:in_0_ready -> sram_18_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                          // avalon_st_adapter_019:out_0_valid -> sram_18_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_019_out_0_data;                           // avalon_st_adapter_019:out_0_data -> sram_18_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                          // sram_18_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                          // avalon_st_adapter_019:out_0_error -> sram_18_s2_agent:rdata_fifo_sink_error
	wire          sram_19_s2_agent_rdata_fifo_out_valid;                      // sram_19_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [17:0] sram_19_s2_agent_rdata_fifo_out_data;                       // sram_19_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          sram_19_s2_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_020:in_0_ready -> sram_19_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                          // avalon_st_adapter_020:out_0_valid -> sram_19_s2_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_020_out_0_data;                           // avalon_st_adapter_020:out_0_data -> sram_19_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                          // sram_19_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                          // avalon_st_adapter_020:out_0_error -> sram_19_s2_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) inst_sram_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (inst_sram_s2_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (inst_sram_s2_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (inst_sram_s2_agent_m0_read),                   //                         .read
		.uav_write              (inst_sram_s2_agent_m0_write),                  //                         .write
		.uav_waitrequest        (inst_sram_s2_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (inst_sram_s2_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (inst_sram_s2_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (inst_sram_s2_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (inst_sram_s2_agent_m0_writedata),              //                         .writedata
		.uav_lock               (inst_sram_s2_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (inst_sram_s2_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (inst_sram_s2_address),                         //      avalon_anti_slave_0.address
		.av_write               (inst_sram_s2_write),                           //                         .write
		.av_readdata            (inst_sram_s2_readdata),                        //                         .readdata
		.av_writedata           (inst_sram_s2_writedata),                       //                         .writedata
		.av_byteenable          (inst_sram_s2_byteenable),                      //                         .byteenable
		.av_chipselect          (inst_sram_s2_chipselect),                      //                         .chipselect
		.av_clken               (inst_sram_s2_clken),                           //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_0_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_0_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_0_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_0_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_0_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_0_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_0_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_0_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_0_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_0_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_0_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_0_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_0_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_0_s2_write),                              //                         .write
		.av_readdata            (sram_0_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_0_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_0_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_0_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_0_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_1_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_1_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_1_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_1_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_1_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_1_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_1_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_1_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_1_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_1_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_1_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_1_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_1_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_1_s2_write),                              //                         .write
		.av_readdata            (sram_1_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_1_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_1_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_1_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_1_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_2_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_2_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_2_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_2_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_2_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_2_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_2_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_2_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_2_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_2_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_2_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_2_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_2_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_2_s2_write),                              //                         .write
		.av_readdata            (sram_2_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_2_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_2_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_2_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_2_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_3_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_3_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_3_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_3_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_3_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_3_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_3_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_3_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_3_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_3_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_3_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_3_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_3_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_3_s2_write),                              //                         .write
		.av_readdata            (sram_3_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_3_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_3_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_3_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_3_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_4_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_4_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_4_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_4_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_4_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_4_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_4_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_4_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_4_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_4_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_4_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_4_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_4_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_4_s2_write),                              //                         .write
		.av_readdata            (sram_4_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_4_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_4_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_4_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_4_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_5_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_5_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_5_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_5_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_5_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_5_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_5_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_5_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_5_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_5_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_5_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_5_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_5_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_5_s2_write),                              //                         .write
		.av_readdata            (sram_5_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_5_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_5_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_5_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_5_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_6_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_6_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_6_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_6_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_6_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_6_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_6_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_6_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_6_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_6_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_6_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_6_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_6_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_6_s2_write),                              //                         .write
		.av_readdata            (sram_6_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_6_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_6_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_6_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_6_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_7_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_7_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_7_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_7_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_7_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_7_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_7_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_7_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_7_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_7_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_7_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_7_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_7_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_7_s2_write),                              //                         .write
		.av_readdata            (sram_7_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_7_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_7_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_7_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_7_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_8_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_8_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_8_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_8_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_8_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_8_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_8_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_8_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_8_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_8_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_8_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_8_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_8_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_8_s2_write),                              //                         .write
		.av_readdata            (sram_8_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_8_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_8_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_8_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_8_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_9_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_9_s2_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sram_9_s2_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sram_9_s2_agent_m0_read),                      //                         .read
		.uav_write              (sram_9_s2_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sram_9_s2_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sram_9_s2_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sram_9_s2_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sram_9_s2_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sram_9_s2_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sram_9_s2_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sram_9_s2_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sram_9_s2_address),                            //      avalon_anti_slave_0.address
		.av_write               (sram_9_s2_write),                              //                         .write
		.av_readdata            (sram_9_s2_readdata),                           //                         .readdata
		.av_writedata           (sram_9_s2_writedata),                          //                         .writedata
		.av_byteenable          (sram_9_s2_byteenable),                         //                         .byteenable
		.av_chipselect          (sram_9_s2_chipselect),                         //                         .chipselect
		.av_clken               (sram_9_s2_clken),                              //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_10_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_10_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_10_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_10_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_10_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_10_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_10_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_10_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_10_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_10_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_10_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_10_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_10_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_10_s2_write),                             //                         .write
		.av_readdata            (sram_10_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_10_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_10_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_10_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_10_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_11_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_11_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_11_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_11_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_11_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_11_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_11_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_11_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_11_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_11_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_11_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_11_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_11_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_11_s2_write),                             //                         .write
		.av_readdata            (sram_11_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_11_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_11_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_11_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_11_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_12_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_12_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_12_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_12_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_12_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_12_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_12_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_12_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_12_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_12_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_12_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_12_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_12_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_12_s2_write),                             //                         .write
		.av_readdata            (sram_12_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_12_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_12_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_12_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_12_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_13_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_13_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_13_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_13_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_13_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_13_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_13_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_13_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_13_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_13_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_13_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_13_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_13_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_13_s2_write),                             //                         .write
		.av_readdata            (sram_13_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_13_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_13_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_13_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_13_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_14_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_14_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_14_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_14_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_14_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_14_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_14_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_14_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_14_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_14_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_14_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_14_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_14_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_14_s2_write),                             //                         .write
		.av_readdata            (sram_14_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_14_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_14_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_14_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_14_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_15_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_15_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_15_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_15_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_15_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_15_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_15_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_15_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_15_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_15_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_15_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_15_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_15_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_15_s2_write),                             //                         .write
		.av_readdata            (sram_15_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_15_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_15_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_15_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_15_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_16_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_16_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_16_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_16_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_16_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_16_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_16_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_16_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_16_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_16_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_16_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_16_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_16_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_16_s2_write),                             //                         .write
		.av_readdata            (sram_16_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_16_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_16_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_16_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_16_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_17_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_17_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_17_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_17_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_17_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_17_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_17_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_17_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_17_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_17_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_17_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_17_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_17_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_17_s2_write),                             //                         .write
		.av_readdata            (sram_17_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_17_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_17_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_17_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_17_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_18_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_18_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_18_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_18_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_18_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_18_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_18_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_18_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_18_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_18_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_18_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_18_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_18_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_18_s2_write),                             //                         .write
		.av_readdata            (sram_18_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_18_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_18_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_18_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_18_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_19_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (inst_sram_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_19_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_19_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_19_s2_agent_m0_read),                     //                         .read
		.uav_write              (sram_19_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_19_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_19_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_19_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_19_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_19_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_19_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_19_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_19_s2_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_19_s2_write),                             //                         .write
		.av_readdata            (sram_19_s2_readdata),                          //                         .readdata
		.av_writedata           (sram_19_s2_writedata),                         //                         .writedata
		.av_byteenable          (sram_19_s2_byteenable),                        //                         .byteenable
		.av_chipselect          (sram_19_s2_chipselect),                        //                         .chipselect
		.av_clken               (sram_19_s2_clken),                             //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (205),
		.PKT_CACHE_H               (235),
		.PKT_CACHE_L               (232),
		.PKT_ADDR_SIDEBAND_H       (203),
		.PKT_ADDR_SIDEBAND_L       (203),
		.PKT_PROTECTION_H          (231),
		.PKT_PROTECTION_L          (229),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_RESPONSE_STATUS_L     (236),
		.PKT_RESPONSE_STATUS_H     (237),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (212),
		.PKT_THREAD_ID_H           (228),
		.PKT_THREAD_ID_L           (217),
		.PKT_QOS_L                 (206),
		.PKT_QOS_H                 (206),
		.PKT_ORI_BURST_SIZE_L      (238),
		.PKT_ORI_BURST_SIZE_H      (240),
		.PKT_DATA_SIDEBAND_H       (204),
		.PKT_DATA_SIDEBAND_L       (204),
		.ST_DATA_W                 (241),
		.ST_CHANNEL_W              (21),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                 //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (1'b0),                                                                   //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (240),
		.PKT_ORI_BURST_SIZE_L      (238),
		.PKT_RESPONSE_STATUS_H     (237),
		.PKT_RESPONSE_STATUS_L     (236),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_TRANS_LOCK            (178),
		.PKT_BEGIN_BURST           (205),
		.PKT_PROTECTION_H          (231),
		.PKT_PROTECTION_L          (229),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (212),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (241),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) inst_sram_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                           //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (inst_sram_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (inst_sram_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (inst_sram_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (inst_sram_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (inst_sram_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (inst_sram_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (inst_sram_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (inst_sram_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (inst_sram_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (inst_sram_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (inst_sram_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (inst_sram_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (inst_sram_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (inst_sram_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (inst_sram_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (inst_sram_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (inst_sram_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (inst_sram_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (inst_sram_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (inst_sram_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (inst_sram_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (inst_sram_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (inst_sram_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (inst_sram_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (inst_sram_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (inst_sram_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (inst_sram_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (inst_sram_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (inst_sram_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (inst_sram_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (inst_sram_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (inst_sram_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (inst_sram_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (inst_sram_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (inst_sram_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (242),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) inst_sram_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (inst_sram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (inst_sram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (inst_sram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (inst_sram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (inst_sram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (inst_sram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (inst_sram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (inst_sram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (inst_sram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (inst_sram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) inst_sram_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (inst_sram_s2_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (inst_sram_s2_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (inst_sram_s2_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (inst_sram_s2_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (inst_sram_s2_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (inst_sram_s2_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_0_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_0_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_0_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_0_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_0_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_0_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_0_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_0_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_0_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_0_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_0_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_0_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_0_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_0_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_0_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_0_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_0_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_0_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_0_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_0_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_0_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_0_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_0_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_0_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_0_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_0_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_0_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_0_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_0_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_0_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_0_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_0_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_0_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_0_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_0_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_0_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_0_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_0_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_0_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_0_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_0_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_0_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_0_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_0_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_0_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_0_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_0_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_0_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_0_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_0_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_1_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_1_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_1_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_1_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_1_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_1_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_1_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_1_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_1_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_1_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_1_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_1_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_1_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_1_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_1_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_1_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_1_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_1_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_1_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_1_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_1_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_1_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_1_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_1_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_1_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_1_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_1_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_1_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_1_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_1_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_1_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_1_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_1_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_1_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_1_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_1_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_1_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_1_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_1_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_1_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_1_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_1_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_1_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_1_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_1_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_1_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_1_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_1_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_1_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_1_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_1_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_1_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_1_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_1_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_2_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_2_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_2_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_2_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_2_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_2_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_2_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_2_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_2_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_2_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_2_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_2_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_2_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_2_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_2_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_2_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_2_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_2_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_2_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_2_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_2_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_2_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_2_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_2_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_2_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_2_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_2_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_2_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_2_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_2_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_2_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_2_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_2_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_2_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_2_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_2_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_2_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_2_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_2_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_2_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_2_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_2_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_2_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_2_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_2_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_2_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_2_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_2_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_2_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_2_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_2_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_2_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_2_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_2_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_3_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_3_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_3_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_3_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_3_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_3_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_3_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_3_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_3_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_3_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_3_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_3_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_3_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_3_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_3_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_3_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_3_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_3_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_3_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_3_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_3_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_3_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_3_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_3_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_3_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_3_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_3_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_3_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_3_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_3_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_3_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_3_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_3_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_3_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_3_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_3_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_3_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_3_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_3_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_3_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_3_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_3_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_3_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_3_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_3_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_3_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_3_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_3_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_3_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_3_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_3_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_3_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_3_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_3_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_4_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_4_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_4_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_4_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_4_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_4_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_4_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_4_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_4_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_4_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_4_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_4_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_4_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_4_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_4_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_4_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_4_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_4_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_4_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_4_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_4_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_4_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_4_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_4_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_4_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_4_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_4_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_4_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_4_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_4_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_4_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_4_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_4_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_4_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_4_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_4_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_4_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_4_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_4_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_4_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_4_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_4_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_4_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_4_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_4_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_4_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_4_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_4_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_4_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_4_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_4_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_4_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_4_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_4_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_5_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_5_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_5_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_5_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_5_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_5_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_5_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_5_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_5_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_5_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_5_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_5_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_5_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_5_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_5_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_5_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_5_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_5_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_5_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_5_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_5_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_5_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_5_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_5_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_5_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_5_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_5_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_5_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_5_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_5_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_5_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_5_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_5_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_5_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_5_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_5_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_5_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_5_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_5_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_5_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_5_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_5_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_5_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_5_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_5_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_5_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_5_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_5_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_5_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_5_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_5_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_5_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_5_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_5_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_6_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_6_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_6_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_6_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_6_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_6_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_6_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_6_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_6_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_6_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_6_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_6_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_6_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_6_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_6_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_6_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_6_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_6_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_6_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_6_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_6_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_6_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_6_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_6_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_6_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_6_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_6_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_6_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_6_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_6_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_6_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_6_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_6_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_6_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_6_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_6_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_6_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_6_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_6_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_6_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_6_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_6_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_6_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_6_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_6_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_6_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_6_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_6_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_6_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_6_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_6_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_6_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_6_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_6_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_7_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_7_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_7_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_7_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_7_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_7_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_7_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_7_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_7_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_7_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_7_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_7_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_7_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_7_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_7_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_7_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_7_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_7_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_7_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_7_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_7_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_7_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_7_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_7_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_7_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_7_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_7_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_7_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_7_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_7_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_7_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_7_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_7_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_7_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_7_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_7_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_7_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_7_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_7_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_7_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_7_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_7_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_7_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_7_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_7_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_7_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_7_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_7_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_7_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_7_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_7_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_7_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_7_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_7_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_8_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_8_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_8_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_8_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_8_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_8_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_8_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_8_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_8_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_8_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_8_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_8_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_8_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_8_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_8_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_8_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_8_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_8_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_8_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_8_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_8_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_8_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_8_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_8_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_8_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_8_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_8_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_8_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_8_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_8_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_8_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_8_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_8_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_8_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_8_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_8_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_8_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_8_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_8_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_8_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_8_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_8_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_8_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_8_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_8_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_8_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_8_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_8_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_8_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_8_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_8_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_8_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_8_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_8_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_9_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_9_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_9_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_9_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_9_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_9_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_9_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_9_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_9_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_9_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_9_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_9_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_9_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_9_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_9_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_9_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_9_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_9_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_9_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_9_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_9_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_9_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_9_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_9_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_9_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_9_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_9_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_9_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_9_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_9_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_9_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_9_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_9_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sram_9_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_9_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_9_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_9_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_9_s2_agent_rf_source_data),               //        in.data
		.in_valid          (sram_9_s2_agent_rf_source_valid),              //          .valid
		.in_ready          (sram_9_s2_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sram_9_s2_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sram_9_s2_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sram_9_s2_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sram_9_s2_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sram_9_s2_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sram_9_s2_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sram_9_s2_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_9_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_9_s2_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sram_9_s2_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sram_9_s2_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sram_9_s2_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sram_9_s2_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sram_9_s2_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_10_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_10_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_10_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_10_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_10_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_10_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_10_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_10_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_10_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_10_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_10_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_10_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_10_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_10_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_10_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_10_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_10_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_10_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_10_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_10_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_10_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_10_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_10_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_10_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_10_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_10_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_10_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_10_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_10_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_10_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_10_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_10_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_10_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_10_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_10_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_10_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_10_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_10_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_10_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_10_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_10_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_10_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_10_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_10_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_10_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_10_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_10_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_10_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_10_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_10_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_10_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_10_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_10_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_10_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_11_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_11_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_11_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_11_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_11_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_11_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_11_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_11_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_11_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_11_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_11_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_11_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_11_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_11_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_11_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_11_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_11_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_11_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_11_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_11_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_11_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_11_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_11_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_11_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_11_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_11_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_11_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_11_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_11_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_11_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_11_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_11_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_11_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_11_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_11_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_11_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_11_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_11_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_11_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_11_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_11_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_11_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_11_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_11_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_11_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_11_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_11_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_11_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_11_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_11_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_11_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_11_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_11_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_11_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_12_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_12_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_12_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_12_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_12_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_12_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_12_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_12_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_12_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_12_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_12_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_12_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_12_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_12_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_12_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_12_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_12_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_12_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_12_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_12_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_12_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_12_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_12_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_12_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_12_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_12_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_12_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_12_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_12_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_12_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_12_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_12_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_12_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_12_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_12_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_12_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_12_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_12_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_12_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_12_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_12_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_12_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_12_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_12_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_12_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_12_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_12_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_12_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_12_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_12_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_12_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_12_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_12_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_12_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_13_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_13_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_13_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_13_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_13_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_13_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_13_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_13_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_13_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_13_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_13_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_13_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_13_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_13_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_13_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_13_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_13_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_13_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_13_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_13_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_13_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_13_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_13_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_13_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_13_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_13_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_13_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_13_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_13_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_13_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_13_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_13_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_13_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_13_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_13_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_13_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_13_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_13_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_13_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_13_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_13_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_13_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_13_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_13_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_13_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_13_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_13_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_13_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_13_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_13_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_13_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_13_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_13_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_13_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_14_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_14_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_14_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_14_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_14_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_14_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_14_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_14_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_14_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_14_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_14_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_14_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_14_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_14_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_14_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_14_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_14_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_14_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_14_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_14_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_14_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_14_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_14_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_14_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_14_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_14_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_14_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_14_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_14_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_14_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_14_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_14_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_14_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_14_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_14_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_14_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_14_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_14_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_14_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_14_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_14_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_14_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_14_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_14_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_14_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_14_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_14_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_14_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_14_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_14_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_14_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_14_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_14_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_14_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_15_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_15_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_15_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_15_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_15_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_15_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_15_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_15_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_15_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_15_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_15_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_15_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_15_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_15_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_15_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_15_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_15_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_15_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_15_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_15_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_15_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_15_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_15_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_15_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_15_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_15_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_15_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_15_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_15_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_15_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_15_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_15_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_15_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_15_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_15_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_15_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_15_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_15_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_15_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_15_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_15_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_15_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_15_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_15_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_15_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_15_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_15_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_15_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_15_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_15_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_15_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_15_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_15_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_15_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_16_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_16_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_16_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_16_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_16_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_16_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_16_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_16_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_16_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_16_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_16_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_16_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_16_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_16_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_16_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_16_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_16_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_16_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_16_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_16_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_16_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_16_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_16_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_16_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_16_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_16_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_16_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_16_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_16_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_16_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_16_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_16_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_16_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_16_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_16_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_16_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_16_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_16_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_16_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_16_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_16_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_16_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_16_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_16_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_16_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_16_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_16_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_16_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_16_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_16_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_16_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_16_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_16_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_16_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_17_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_17_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_17_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_17_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_17_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_17_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_17_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_17_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_17_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_17_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_17_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_17_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_17_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_17_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_17_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_17_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_17_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_17_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_17_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_17_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_17_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_17_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_17_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_17_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_17_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_17_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_17_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_17_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_17_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_17_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_17_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_17_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_17_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_17_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_17_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_17_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_17_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_17_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_17_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_17_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_17_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_17_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_17_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_17_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_17_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_17_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_17_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_17_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_17_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_17_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_17_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_17_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_17_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_17_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_18_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_18_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_18_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_18_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_18_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_18_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_18_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_18_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_18_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_18_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_18_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_18_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_18_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_18_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_18_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_18_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_18_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_18_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_18_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_18_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_18_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_18_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_18_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_18_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_18_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_18_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_18_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_18_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_18_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_18_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_18_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_18_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_18_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_18_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_18_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_18_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_18_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_18_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_18_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_18_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_18_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_18_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_18_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_18_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_18_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_18_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_18_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_18_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_18_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_18_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_18_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_18_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_18_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_18_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (86),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_19_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (inst_sram_reset2_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_19_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_19_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_19_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_19_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_19_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_19_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_19_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_19_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_19_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_19_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_19_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_19_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_19_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_19_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_19_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_19_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_19_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_19_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_19_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_19_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_19_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_19_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_19_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_19_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_19_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_19_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_19_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_19_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_19_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_19_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_19_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_19_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sram_19_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_19_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_19_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_19_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_19_s2_agent_rf_source_data),              //        in.data
		.in_valid          (sram_19_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_19_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_19_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_19_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_19_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_19_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_19_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_19_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_19_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_19_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_19_s2_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_19_s2_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_19_s2_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_19_s2_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_19_s2_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_19_s2_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                      //       src.ready
		.src_valid          (router_src_valid),                                                      //          .valid
		.src_data           (router_src_data),                                                       //          .data
		.src_channel        (router_src_channel),                                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                  //       src.ready
		.src_valid          (router_001_src_valid),                                                  //          .valid
		.src_data           (router_001_src_data),                                                   //          .data
		.src_channel        (router_001_src_channel),                                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (inst_sram_s2_agent_rp_ready),                  //      sink.ready
		.sink_valid         (inst_sram_s2_agent_rp_valid),                  //          .valid
		.sink_data          (inst_sram_s2_agent_rp_data),                   //          .data
		.sink_startofpacket (inst_sram_s2_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (inst_sram_s2_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sram_0_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_0_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_0_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_0_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_0_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sram_1_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_1_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_1_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_1_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_1_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (sram_2_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_2_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_2_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_2_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_2_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (sram_3_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_3_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_3_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_3_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_3_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (sram_4_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_4_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_4_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_4_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_4_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (sram_5_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_5_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_5_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_5_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_5_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                         //       src.ready
		.src_valid          (router_008_src_valid),                         //          .valid
		.src_data           (router_008_src_data),                          //          .data
		.src_channel        (router_008_src_channel),                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (sram_6_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_6_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_6_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_6_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_6_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (sram_7_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_7_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_7_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_7_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_7_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                         //       src.ready
		.src_valid          (router_010_src_valid),                         //          .valid
		.src_data           (router_010_src_data),                          //          .data
		.src_channel        (router_010_src_channel),                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (sram_8_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_8_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_8_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_8_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_8_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                         //       src.ready
		.src_valid          (router_011_src_valid),                         //          .valid
		.src_data           (router_011_src_data),                          //          .data
		.src_channel        (router_011_src_channel),                       //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (sram_9_s2_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sram_9_s2_agent_rp_valid),                     //          .valid
		.sink_data          (sram_9_s2_agent_rp_data),                      //          .data
		.sink_startofpacket (sram_9_s2_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sram_9_s2_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_013 (
		.sink_ready         (sram_10_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_10_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_10_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_10_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_10_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (sram_11_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_11_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_11_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_11_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_11_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                         //       src.ready
		.src_valid          (router_014_src_valid),                         //          .valid
		.src_data           (router_014_src_data),                          //          .data
		.src_channel        (router_014_src_channel),                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (sram_12_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_12_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_12_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_12_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_12_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                         //       src.ready
		.src_valid          (router_015_src_valid),                         //          .valid
		.src_data           (router_015_src_data),                          //          .data
		.src_channel        (router_015_src_channel),                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_016 (
		.sink_ready         (sram_13_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_13_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_13_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_13_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_13_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                         //       src.ready
		.src_valid          (router_016_src_valid),                         //          .valid
		.src_data           (router_016_src_data),                          //          .data
		.src_channel        (router_016_src_channel),                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (sram_14_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_14_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_14_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_14_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_14_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                         //       src.ready
		.src_valid          (router_017_src_valid),                         //          .valid
		.src_data           (router_017_src_data),                          //          .data
		.src_channel        (router_017_src_channel),                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_018 (
		.sink_ready         (sram_15_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_15_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_15_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_15_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_15_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_019 (
		.sink_ready         (sram_16_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_16_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_16_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_16_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_16_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                         //       src.ready
		.src_valid          (router_019_src_valid),                         //          .valid
		.src_data           (router_019_src_data),                          //          .data
		.src_channel        (router_019_src_channel),                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_020 (
		.sink_ready         (sram_17_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_17_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_17_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_17_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_17_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                         //       src.ready
		.src_valid          (router_020_src_valid),                         //          .valid
		.src_data           (router_020_src_data),                          //          .data
		.src_channel        (router_020_src_channel),                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_021 (
		.sink_ready         (sram_18_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_18_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_18_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_18_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_18_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                         //       src.ready
		.src_valid          (router_021_src_valid),                         //          .valid
		.src_data           (router_021_src_data),                          //          .data
		.src_channel        (router_021_src_channel),                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_022 (
		.sink_ready         (sram_19_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_19_s2_agent_rp_valid),                    //          .valid
		.sink_data          (sram_19_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_19_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_19_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                         //       src.ready
		.src_valid          (router_022_src_valid),                         //          .valid
		.src_data           (router_022_src_data),                          //          .data
		.src_channel        (router_022_src_channel),                       //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (212),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (241),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                      //          .valid
		.cmd_sink_data          (router_src_data),                                                       //          .data
		.cmd_sink_channel       (router_src_channel),                                                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                     //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                   //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (212),
		.PKT_SRC_ID_H              (211),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (241),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                 //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                               //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (205),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (241),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (184),
		.OUT_BURSTWRAP_H           (197),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) inst_sram_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                           //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                //          .ready
		.source0_valid         (inst_sram_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (inst_sram_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (inst_sram_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (inst_sram_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (inst_sram_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (inst_sram_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_0_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_0_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_0_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_0_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_0_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_0_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_0_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_0_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_0_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_0_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_0_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_0_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_0_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_1_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_1_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_1_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_1_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_1_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_1_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_1_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_1_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_1_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_1_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_1_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_1_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_1_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_2_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_2_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_2_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_2_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_2_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_2_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_2_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_2_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_2_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_2_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_2_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_2_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_2_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_3_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_3_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_3_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_3_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_3_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_3_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_3_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_3_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_3_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_3_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_3_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_3_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_3_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_4_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_4_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_4_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_4_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_4_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_4_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_4_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_4_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_4_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_4_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_4_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_4_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_4_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_5_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_5_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_5_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_5_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_5_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_5_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_5_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_5_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_5_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_5_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_5_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_5_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_5_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_6_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_6_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_6_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_6_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_6_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_6_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_6_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_6_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_6_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_6_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_6_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_6_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_6_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_7_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_7_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_7_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_7_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_7_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_7_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_7_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_7_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_7_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_7_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_7_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_7_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_7_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_8_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_8_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_8_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_8_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_8_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_8_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_8_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_8_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_8_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_8_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_8_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_8_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_8_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_9_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sram_9_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_9_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_9_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_9_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_9_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_9_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_9_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_9_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_9_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_9_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_9_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_9_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_10_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_10_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_10_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_10_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_10_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_10_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_10_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_10_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_10_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_10_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_10_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_10_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_10_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_11_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_11_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_11_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_11_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_11_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_11_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_11_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_11_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_11_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_11_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_11_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_11_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_11_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_12_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_12_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_12_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_12_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_12_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_12_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_12_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_12_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_12_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_12_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_12_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_12_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_12_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_13_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_13_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_13_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_13_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_13_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_13_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_13_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_13_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_13_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_13_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_13_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_13_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_13_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_14_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_14_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_14_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_14_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_14_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_14_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_14_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_14_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_14_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_14_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_14_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_14_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_14_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_15_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_15_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_15_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_15_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_15_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_15_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_15_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_15_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_15_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_15_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_15_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_15_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_15_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_16_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_16_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_16_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_16_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_16_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_16_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_16_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_16_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_16_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_16_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_16_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_16_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_16_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_17_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_17_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_17_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_17_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_17_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_17_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_17_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_17_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_17_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_17_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_17_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_17_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_17_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_18_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_18_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_18_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_18_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_18_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_18_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_18_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_18_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_18_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_18_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_18_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_18_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_18_s2_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_19_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (inst_sram_reset2_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (sram_19_s2_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_19_s2_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_19_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_19_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_19_s2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_19_s2_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_19_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_19_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_19_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_19_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_19_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_19_s2_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset               (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                  //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                  //           .valid
		.src0_data           (cmd_demux_src0_data),                                                   //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                          //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                            //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                  //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                  //           .valid
		.src1_data           (cmd_demux_src1_data),                                                   //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                          //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                            //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                  //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                  //           .valid
		.src2_data           (cmd_demux_src2_data),                                                   //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                          //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                            //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                  //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                  //           .valid
		.src3_data           (cmd_demux_src3_data),                                                   //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                          //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                            //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                  //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                  //           .valid
		.src4_data           (cmd_demux_src4_data),                                                   //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                          //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                            //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                  //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                  //           .valid
		.src5_data           (cmd_demux_src5_data),                                                   //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                          //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                            //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                  //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                  //           .valid
		.src6_data           (cmd_demux_src6_data),                                                   //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                          //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                            //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                  //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                  //           .valid
		.src7_data           (cmd_demux_src7_data),                                                   //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                          //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                            //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                  //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                  //           .valid
		.src8_data           (cmd_demux_src8_data),                                                   //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                          //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                            //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                  //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                  //           .valid
		.src9_data           (cmd_demux_src9_data),                                                   //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                          //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                            //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                 //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                 //           .valid
		.src10_data          (cmd_demux_src10_data),                                                  //           .data
		.src10_channel       (cmd_demux_src10_channel),                                               //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                         //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                           //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                                 //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                                 //           .valid
		.src11_data          (cmd_demux_src11_data),                                                  //           .data
		.src11_channel       (cmd_demux_src11_channel),                                               //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                         //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                           //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                                 //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                                 //           .valid
		.src12_data          (cmd_demux_src12_data),                                                  //           .data
		.src12_channel       (cmd_demux_src12_channel),                                               //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                         //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                           //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                                 //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                                 //           .valid
		.src13_data          (cmd_demux_src13_data),                                                  //           .data
		.src13_channel       (cmd_demux_src13_channel),                                               //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                         //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                           //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                                 //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                                 //           .valid
		.src14_data          (cmd_demux_src14_data),                                                  //           .data
		.src14_channel       (cmd_demux_src14_channel),                                               //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                         //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                           //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                                 //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                                 //           .valid
		.src15_data          (cmd_demux_src15_data),                                                  //           .data
		.src15_channel       (cmd_demux_src15_channel),                                               //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                         //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                           //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                                 //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                                 //           .valid
		.src16_data          (cmd_demux_src16_data),                                                  //           .data
		.src16_channel       (cmd_demux_src16_channel),                                               //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                         //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                           //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                                 //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                                 //           .valid
		.src17_data          (cmd_demux_src17_data),                                                  //           .data
		.src17_channel       (cmd_demux_src17_channel),                                               //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                         //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                           //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                                 //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                                 //           .valid
		.src18_data          (cmd_demux_src18_data),                                                  //           .data
		.src18_channel       (cmd_demux_src18_channel),                                               //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                         //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                           //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                                 //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                                 //           .valid
		.src19_data          (cmd_demux_src19_data),                                                  //           .data
		.src19_channel       (cmd_demux_src19_channel),                                               //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                         //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                           //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                                 //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                                 //           .valid
		.src20_data          (cmd_demux_src20_data),                                                  //           .data
		.src20_channel       (cmd_demux_src20_channel),                                               //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                         //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket)                                            //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                //        clk.clk
		.reset               (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                              //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                              //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                               //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                            //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                      //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                        //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                              //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                              //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                               //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                            //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                      //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                        //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                              //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                              //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                               //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                            //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                      //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                        //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                              //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                              //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                               //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                            //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                      //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                        //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                              //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                              //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                               //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                            //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                      //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                        //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                              //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                              //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                               //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                            //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                      //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                        //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                              //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                              //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                               //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                            //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                      //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                        //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                              //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                              //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                               //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                            //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                      //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                        //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                              //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                              //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                               //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                            //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                      //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                        //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                              //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                              //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                               //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                            //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                      //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                        //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                             //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                             //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                              //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                           //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                     //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                       //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                             //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                             //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                              //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                           //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                     //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                       //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                             //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                             //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                              //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                           //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                     //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                       //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                             //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                             //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                              //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                           //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                     //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                       //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                             //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                             //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                              //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                           //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                     //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                       //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                             //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                             //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                              //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                           //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                     //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                       //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                             //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                             //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                              //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                           //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                     //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                       //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                             //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                             //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                              //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                           //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                     //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                       //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                             //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                             //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                              //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                           //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                     //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                       //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                             //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                             //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                              //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                           //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                     //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                       //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                             //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                             //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                              //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                           //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                     //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket)                                        //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //          .channel
		.sink0_data          (cmd_demux_src3_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //          .channel
		.sink0_data          (cmd_demux_src4_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //          .channel
		.sink0_data          (cmd_demux_src5_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                       //          .channel
		.sink0_data          (cmd_demux_src6_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                       //          .channel
		.sink0_data          (cmd_demux_src7_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                      //          .channel
		.sink0_data          (cmd_demux_src10_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                      //          .channel
		.sink0_data          (cmd_demux_src11_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                      //          .channel
		.sink0_data          (cmd_demux_src12_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                        //          .valid
		.src_data            (cmd_mux_013_src_data),                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                      //          .channel
		.sink0_data          (cmd_demux_src13_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                        //          .valid
		.src_data            (cmd_mux_014_src_data),                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                      //          .channel
		.sink0_data          (cmd_demux_src14_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                        //          .valid
		.src_data            (cmd_mux_015_src_data),                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                      //          .channel
		.sink0_data          (cmd_demux_src15_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                        //          .valid
		.src_data            (cmd_mux_016_src_data),                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                      //          .channel
		.sink0_data          (cmd_demux_src16_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                        //          .valid
		.src_data            (cmd_mux_017_src_data),                         //          .data
		.src_channel         (cmd_mux_017_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                      //          .channel
		.sink0_data          (cmd_demux_src17_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                        //          .valid
		.src_data            (cmd_mux_018_src_data),                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                      //          .channel
		.sink0_data          (cmd_demux_src18_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                        //          .valid
		.src_data            (cmd_mux_019_src_data),                         //          .data
		.src_channel         (cmd_mux_019_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                      //          .channel
		.sink0_data          (cmd_demux_src19_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                        //          .valid
		.src_data            (cmd_mux_020_src_data),                         //          .data
		.src_channel         (cmd_mux_020_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                      //          .channel
		.sink0_data          (cmd_demux_src20_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_0_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_0_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_0_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_0_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_0_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_0_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_001_src1_data),                       //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_1_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_1_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_1_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_1_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_1_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_1_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_2_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_2_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_2_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_2_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_2_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_2_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_3_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_3_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_3_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_3_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_3_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_3_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_004_src1_data),                       //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_4_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_4_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_4_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_4_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_4_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_4_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_005_src1_data),                       //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_5_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_5_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_5_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_5_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_5_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_5_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_006_src1_data),                       //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_6_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_6_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_6_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_6_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_6_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_6_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_007_src1_data),                       //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_7_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_7_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_7_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_7_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_7_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_7_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_8_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_8_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_8_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_8_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_8_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_8_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sram_9_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_9_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_9_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_9_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_9_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_9_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_010_src1_data),                       //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_10_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_10_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_10_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_10_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_10_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_10_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_11_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_11_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_11_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_11_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_11_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_11_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_012_src1_data),                        //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_12_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_12_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_12_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_12_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_12_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_12_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_013_src0_data),                        //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_013_src1_data),                        //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_13_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_13_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_13_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_13_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_13_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_13_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_014_src1_data),                        //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_14_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_14_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_14_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_14_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_14_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_14_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_015_src0_data),                        //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_015_src1_data),                        //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_15_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_15_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_15_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_15_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_15_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_15_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_016_src0_data),                        //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_016_src1_data),                        //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_16_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_16_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_16_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_16_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_16_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_16_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_017_src0_data),                        //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_017_src1_data),                        //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_17_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_17_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_17_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_17_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_17_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_17_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_018_src0_data),                        //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_018_src1_data),                        //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_18_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_18_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_18_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_18_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_18_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_18_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_019_src0_data),                        //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_019_src1_data),                        //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (sram_19_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_19_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_19_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_19_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_19_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_19_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_020_src0_data),                        //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_020_src1_data),                        //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                     //          .valid
		.src_data             (rsp_mux_src_data),                                                      //          .data
		.src_channel          (rsp_mux_src_channel),                                                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                  //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                  //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                   //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                            //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                              //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                              //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                            //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                               //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                        //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                              //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                            //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                               //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                              //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                            //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                               //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                              //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                            //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                               //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                              //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                            //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                               //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)                                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                 //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                 //          .valid
		.src_data             (rsp_mux_001_src_data),                                                  //          .data
		.src_channel          (rsp_mux_001_src_channel),                                               //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                  //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                  //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                   //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                            //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                              //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                              //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                            //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                               //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                        //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                              //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                            //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                               //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                              //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                            //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                               //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                              //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                            //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                               //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                              //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                            //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                               //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                              //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                            //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                               //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                              //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                            //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                               //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                              //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                            //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                               //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                              //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                            //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                               //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                              //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                            //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                               //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                              //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                            //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                               //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                              //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                            //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                               //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                              //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                            //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                               //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                              //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                            //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                               //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                              //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                            //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                               //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                              //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                            //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                               //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                              //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                            //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                               //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                              //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                            //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                               //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                              //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                            //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                               //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),                                        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                                              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                                              //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),                                            //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                                               //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),                                      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket)                                         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_0_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_003_src_valid),                          //      sink.valid
		.in_channel           (router_003_src_channel),                        //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_003_src_ready),                          //          .ready
		.in_data              (router_003_src_data),                           //          .data
		.out_endofpacket      (sram_0_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_1_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_004_src_valid),                          //      sink.valid
		.in_channel           (router_004_src_channel),                        //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_004_src_ready),                          //          .ready
		.in_data              (router_004_src_data),                           //          .data
		.out_endofpacket      (sram_1_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_1_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_1_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_1_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_1_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_1_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_2_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_005_src_valid),                          //      sink.valid
		.in_channel           (router_005_src_channel),                        //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_005_src_ready),                          //          .ready
		.in_data              (router_005_src_data),                           //          .data
		.out_endofpacket      (sram_2_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_2_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_2_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_2_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_2_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_2_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_3_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_006_src_valid),                          //      sink.valid
		.in_channel           (router_006_src_channel),                        //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_006_src_ready),                          //          .ready
		.in_data              (router_006_src_data),                           //          .data
		.out_endofpacket      (sram_3_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_3_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_3_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_3_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_3_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_3_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_4_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_007_src_valid),                          //      sink.valid
		.in_channel           (router_007_src_channel),                        //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_007_src_ready),                          //          .ready
		.in_data              (router_007_src_data),                           //          .data
		.out_endofpacket      (sram_4_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_4_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_4_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_4_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_4_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_4_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_5_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_008_src_valid),                          //      sink.valid
		.in_channel           (router_008_src_channel),                        //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_008_src_ready),                          //          .ready
		.in_data              (router_008_src_data),                           //          .data
		.out_endofpacket      (sram_5_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_5_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_5_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_5_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_5_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_5_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_6_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_009_src_valid),                          //      sink.valid
		.in_channel           (router_009_src_channel),                        //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_009_src_ready),                          //          .ready
		.in_data              (router_009_src_data),                           //          .data
		.out_endofpacket      (sram_6_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_6_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_6_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_6_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_6_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_6_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_7_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_010_src_valid),                          //      sink.valid
		.in_channel           (router_010_src_channel),                        //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_010_src_ready),                          //          .ready
		.in_data              (router_010_src_data),                           //          .data
		.out_endofpacket      (sram_7_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_7_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_7_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_7_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_7_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_7_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_8_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_011_src_valid),                          //      sink.valid
		.in_channel           (router_011_src_channel),                        //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_011_src_ready),                          //          .ready
		.in_data              (router_011_src_data),                           //          .data
		.out_endofpacket      (sram_8_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_8_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_8_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_8_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_8_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_8_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_9_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_012_src_valid),                          //      sink.valid
		.in_channel           (router_012_src_channel),                        //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_012_src_ready),                          //          .ready
		.in_data              (router_012_src_data),                           //          .data
		.out_endofpacket      (sram_9_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_9_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_9_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_9_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_9_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_9_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_10_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_013_src_valid),                           //      sink.valid
		.in_channel           (router_013_src_channel),                         //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_013_src_ready),                           //          .ready
		.in_data              (router_013_src_data),                            //          .data
		.out_endofpacket      (sram_10_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_10_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_10_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_10_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_10_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_10_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_11_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_014_src_valid),                           //      sink.valid
		.in_channel           (router_014_src_channel),                         //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_014_src_ready),                           //          .ready
		.in_data              (router_014_src_data),                            //          .data
		.out_endofpacket      (sram_11_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_11_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_11_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_11_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_11_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_11_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_12_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_015_src_valid),                           //      sink.valid
		.in_channel           (router_015_src_channel),                         //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_015_src_ready),                           //          .ready
		.in_data              (router_015_src_data),                            //          .data
		.out_endofpacket      (sram_12_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_12_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_12_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_12_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_12_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_12_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_13_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_016_src_valid),                           //      sink.valid
		.in_channel           (router_016_src_channel),                         //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_016_src_ready),                           //          .ready
		.in_data              (router_016_src_data),                            //          .data
		.out_endofpacket      (sram_13_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_13_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_13_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_13_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_13_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_13_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_14_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_017_src_valid),                           //      sink.valid
		.in_channel           (router_017_src_channel),                         //          .channel
		.in_startofpacket     (router_017_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_017_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_017_src_ready),                           //          .ready
		.in_data              (router_017_src_data),                            //          .data
		.out_endofpacket      (sram_14_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_14_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_14_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_14_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_14_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_14_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_15_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_018_src_valid),                           //      sink.valid
		.in_channel           (router_018_src_channel),                         //          .channel
		.in_startofpacket     (router_018_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_018_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_018_src_ready),                           //          .ready
		.in_data              (router_018_src_data),                            //          .data
		.out_endofpacket      (sram_15_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_15_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_15_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_15_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_15_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_15_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_16_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_019_src_valid),                           //      sink.valid
		.in_channel           (router_019_src_channel),                         //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_019_src_ready),                           //          .ready
		.in_data              (router_019_src_data),                            //          .data
		.out_endofpacket      (sram_16_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_16_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_16_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_16_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_16_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_16_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_17_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_020_src_valid),                           //      sink.valid
		.in_channel           (router_020_src_channel),                         //          .channel
		.in_startofpacket     (router_020_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_020_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_020_src_ready),                           //          .ready
		.in_data              (router_020_src_data),                            //          .data
		.out_endofpacket      (sram_17_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_17_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_17_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_17_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_17_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_17_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_18_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_021_src_valid),                           //      sink.valid
		.in_channel           (router_021_src_channel),                         //          .channel
		.in_startofpacket     (router_021_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_021_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_021_src_ready),                           //          .ready
		.in_data              (router_021_src_data),                            //          .data
		.out_endofpacket      (sram_18_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_18_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_18_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_18_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_18_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_18_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (241),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_19_s2_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_022_src_valid),                           //      sink.valid
		.in_channel           (router_022_src_channel),                         //          .channel
		.in_startofpacket     (router_022_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_022_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_022_src_ready),                           //          .ready
		.in_data              (router_022_src_data),                            //          .data
		.out_endofpacket      (sram_19_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_19_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_19_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_19_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_19_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_19_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_0_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                         //          .ready
		.in_data              (cmd_mux_001_src_data),                          //          .data
		.out_endofpacket      (sram_0_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_1_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                         //          .ready
		.in_data              (cmd_mux_002_src_data),                          //          .data
		.out_endofpacket      (sram_1_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_1_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_1_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_1_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_1_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_1_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_2_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                         //          .ready
		.in_data              (cmd_mux_003_src_data),                          //          .data
		.out_endofpacket      (sram_2_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_2_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_2_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_2_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_2_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_2_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_3_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                         //          .ready
		.in_data              (cmd_mux_004_src_data),                          //          .data
		.out_endofpacket      (sram_3_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_3_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_3_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_3_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_3_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_3_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_4_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                         //          .ready
		.in_data              (cmd_mux_005_src_data),                          //          .data
		.out_endofpacket      (sram_4_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_4_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_4_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_4_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_4_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_4_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_5_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                         //          .ready
		.in_data              (cmd_mux_006_src_data),                          //          .data
		.out_endofpacket      (sram_5_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_5_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_5_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_5_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_5_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_5_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_6_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                         //          .ready
		.in_data              (cmd_mux_007_src_data),                          //          .data
		.out_endofpacket      (sram_6_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_6_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_6_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_6_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_6_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_6_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_7_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                         //          .ready
		.in_data              (cmd_mux_008_src_data),                          //          .data
		.out_endofpacket      (sram_7_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_7_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_7_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_7_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_7_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_7_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_8_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                         //          .ready
		.in_data              (cmd_mux_009_src_data),                          //          .data
		.out_endofpacket      (sram_8_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_8_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_8_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_8_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_8_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_8_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_9_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                         //          .ready
		.in_data              (cmd_mux_010_src_data),                          //          .data
		.out_endofpacket      (sram_9_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_9_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_9_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_9_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_9_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_9_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_10_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                          //          .ready
		.in_data              (cmd_mux_011_src_data),                           //          .data
		.out_endofpacket      (sram_10_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_10_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_10_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_10_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_10_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_10_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_11_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_012_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_012_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_012_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_012_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_012_src_ready),                          //          .ready
		.in_data              (cmd_mux_012_src_data),                           //          .data
		.out_endofpacket      (sram_11_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_11_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_11_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_11_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_11_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_11_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_12_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                          //          .ready
		.in_data              (cmd_mux_013_src_data),                           //          .data
		.out_endofpacket      (sram_12_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_12_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_12_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_12_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_12_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_12_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_13_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                          //          .ready
		.in_data              (cmd_mux_014_src_data),                           //          .data
		.out_endofpacket      (sram_13_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_13_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_13_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_13_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_13_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_13_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_14_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                          //          .ready
		.in_data              (cmd_mux_015_src_data),                           //          .data
		.out_endofpacket      (sram_14_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_14_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_14_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_14_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_14_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_14_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_15_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_016_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_016_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_016_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_016_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_016_src_ready),                          //          .ready
		.in_data              (cmd_mux_016_src_data),                           //          .data
		.out_endofpacket      (sram_15_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_15_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_15_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_15_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_15_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_15_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_16_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                          //          .ready
		.in_data              (cmd_mux_017_src_data),                           //          .data
		.out_endofpacket      (sram_16_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_16_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_16_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_16_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_16_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_16_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_17_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                          //          .ready
		.in_data              (cmd_mux_018_src_data),                           //          .data
		.out_endofpacket      (sram_17_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_17_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_17_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_17_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_17_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_17_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_18_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_019_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_019_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_019_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_019_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_019_src_ready),                          //          .ready
		.in_data              (cmd_mux_019_src_data),                           //          .data
		.out_endofpacket      (sram_18_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_18_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_18_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_18_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_18_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_18_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (241),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sram_19_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset                (inst_sram_reset2_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_020_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_020_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_020_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_020_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_020_src_ready),                          //          .ready
		.in_data              (cmd_mux_020_src_data),                           //          .data
		.out_endofpacket      (sram_19_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_19_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_19_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_19_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_19_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_19_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (inst_sram_s2_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (inst_sram_s2_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (inst_sram_s2_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_0_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_0_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_0_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_1_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_1_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_1_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_2_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_2_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_2_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_3_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_3_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_3_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_4_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_4_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_4_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_5_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_5_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_5_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_6_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_6_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_6_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_7_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_7_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_7_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_8_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_8_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_8_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_9_s2_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (sram_9_s2_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (sram_9_s2_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_10_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_10_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_10_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_11_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_11_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_11_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_12_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_12_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_12_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_13_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_13_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_13_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_14_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_14_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_14_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_15_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_15_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_15_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_16_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_16_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_16_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_17_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_17_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_17_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_18_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_18_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_18_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (inst_sram_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_19_s2_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_19_s2_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_19_s2_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)             //         .error
	);

endmodule
